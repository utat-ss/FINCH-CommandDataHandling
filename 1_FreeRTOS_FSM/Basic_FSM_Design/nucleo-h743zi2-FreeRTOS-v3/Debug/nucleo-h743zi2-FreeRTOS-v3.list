
nucleo-h743zi2-FreeRTOS-v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6bc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f4  0800f95c  0800f95c  0001f95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010050  08010050  00020050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010058  08010058  00020058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801005c  0801005c  0002005c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08010060  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400007c  080100dc  0003007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000dc  0801013c  000300dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005268  2400013c  0801019c  0003013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240053a4  0801019c  000353a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031231  00000000  00000000  0003016a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c4d  00000000  00000000  0006139b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002200  00000000  00000000  00065fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002048  00000000  00000000  000681e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006ce1  00000000  00000000  0006a230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028ed2  00000000  00000000  00070f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001827a7  00000000  00000000  00099de3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0021c58a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e84  00000000  00000000  0021c5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00226460  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00226484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400013c 	.word	0x2400013c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f944 	.word	0x0800f944

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000140 	.word	0x24000140
 80002dc:	0800f944 	.word	0x0800f944

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <check_button>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int count=0;
gpio_t user_button;

void check_button(){
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(user_button.bank, user_button.pin) == 1){	// button is pressed
 8000688:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <check_button+0x44>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <check_button+0x44>)
 800068e:	8892      	ldrh	r2, [r2, #4]
 8000690:	4611      	mov	r1, r2
 8000692:	4618      	mov	r0, r3
 8000694:	f004 f9f0 	bl	8004a78 <HAL_GPIO_ReadPin>
 8000698:	4603      	mov	r3, r0
 800069a:	2b01      	cmp	r3, #1
 800069c:	d111      	bne.n	80006c2 <check_button+0x3e>
		printf("DEBUG: button pressed!\r\n");
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <check_button+0x48>)
 80006a0:	f00e f9d0 	bl	800ea44 <puts>
		while(HAL_GPIO_ReadPin(user_button.bank, user_button.pin) == 1){ // wait until release
 80006a4:	bf00      	nop
 80006a6:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <check_button+0x44>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a07      	ldr	r2, [pc, #28]	; (80006c8 <check_button+0x44>)
 80006ac:	8892      	ldrh	r2, [r2, #4]
 80006ae:	4611      	mov	r1, r2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 f9e1 	bl	8004a78 <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d0f4      	beq.n	80006a6 <check_button+0x22>
			// do nothing
		}
		printf("DEBUG: button released!\r\n");
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <check_button+0x4c>)
 80006be:	f00e f9c1 	bl	800ea44 <puts>
	}
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	2400091c 	.word	0x2400091c
 80006cc:	0800f9e8 	.word	0x0800f9e8
 80006d0:	0800fa00 	.word	0x0800fa00

080006d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	//OBC = 0: EPS, NEEDS TO SEND DATA TO OBC.
	//OBC = 1: ON-BOARD COMPUTER, NEEDS TO HANDLE INCOMING DATA
	//IF TX, OBC = 0
  int OBC = 1;
 80006da:	2301      	movs	r3, #1
 80006dc:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f001 fac9 	bl	8001c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f9a3 	bl	8000a2c <SystemClock_Config>
	/**
	 * user button
	 * um1974-stm32-nucleo144-boards-mb1137-stmicroelectronics.pdf
	 * section 6.6
	 */
	user_button.bank = GPIOC;
 80006e6:	4ba1      	ldr	r3, [pc, #644]	; (800096c <main+0x298>)
 80006e8:	4aa1      	ldr	r2, [pc, #644]	; (8000970 <main+0x29c>)
 80006ea:	601a      	str	r2, [r3, #0]
	user_button.pin = GPIO_PIN_13;
 80006ec:	4b9f      	ldr	r3, [pc, #636]	; (800096c <main+0x298>)
 80006ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006f2:	809a      	strh	r2, [r3, #4]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f4:	f000 fb48 	bl	8000d88 <MX_GPIO_Init>
  MX_ETH_Init();
 80006f8:	f000 fa18 	bl	8000b2c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006fc:	f000 fac6 	bl	8000c8c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000700:	f000 fb10 	bl	8000d24 <MX_USB_OTG_FS_PCD_Init>
  MX_FDCAN1_Init();
 8000704:	f000 fa5e 	bl	8000bc4 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  //Enable Interrupt Mode for USART3
  HAL_UART_Receive_IT(&huart3, USART_DATA, 1);
 8000708:	2201      	movs	r2, #1
 800070a:	499a      	ldr	r1, [pc, #616]	; (8000974 <main+0x2a0>)
 800070c:	489a      	ldr	r0, [pc, #616]	; (8000978 <main+0x2a4>)
 800070e:	f007 fb6f 	bl	8007df0 <HAL_UART_Receive_IT>

  printf("USART3 initialized\r\n");
 8000712:	489a      	ldr	r0, [pc, #616]	; (800097c <main+0x2a8>)
 8000714:	f00e f996 	bl	800ea44 <puts>
  printf("FDCAN1 initialized\r\n");
 8000718:	4899      	ldr	r0, [pc, #612]	; (8000980 <main+0x2ac>)
 800071a:	f00e f993 	bl	800ea44 <puts>

  /* reception filter for Rx FIFO 0 */
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800071e:	4b99      	ldr	r3, [pc, #612]	; (8000984 <main+0x2b0>)
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIndex = 0;
 8000724:	4b97      	ldr	r3, [pc, #604]	; (8000984 <main+0x2b0>)
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800072a:	4b96      	ldr	r3, [pc, #600]	; (8000984 <main+0x2b0>)
 800072c:	2202      	movs	r2, #2
 800072e:	609a      	str	r2, [r3, #8]
   * section 4.3.1 of AN5348 App Note: FDCAN Peripheral on STM32 devices
   * Classic bit mask filter: to match groups of identifiers by masking bits of a received identifier. The first ID
   * configured is used as message ID filter, the second ID is used as filter mask. Each zero bit at the filter mask
   * masks out the corresponding bit position of the configured ID filter
   */
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000730:	4b94      	ldr	r3, [pc, #592]	; (8000984 <main+0x2b0>)
 8000732:	2201      	movs	r2, #1
 8000734:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterID1 = 0x111;	// since all filterID2 is set to 1's, then must be exact match on filterID1
 8000736:	4b93      	ldr	r3, [pc, #588]	; (8000984 <main+0x2b0>)
 8000738:	f240 1211 	movw	r2, #273	; 0x111
 800073c:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 800073e:	4b91      	ldr	r3, [pc, #580]	; (8000984 <main+0x2b0>)
 8000740:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000744:	615a      	str	r2, [r3, #20]
  // don't need the other struct components since we're using RX FIFO
  // they're only used if FilterConfig == FDCAN_FITLER_TO_RXBUFFER

  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK){
 8000746:	498f      	ldr	r1, [pc, #572]	; (8000984 <main+0x2b0>)
 8000748:	488f      	ldr	r0, [pc, #572]	; (8000988 <main+0x2b4>)
 800074a:	f002 ff79 	bl	8003640 <HAL_FDCAN_ConfigFilter>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <main+0x84>
	  Error_Handler();
 8000754:	f000 fe0e 	bl	8001374 <Error_Handler>
  }
  printf("FDCAN filter is configured\r\n");
 8000758:	488c      	ldr	r0, [pc, #560]	; (800098c <main+0x2b8>)
 800075a:	f00e f973 	bl	800ea44 <puts>

//  /* Configure global filter:
//	Filter all remote frames with STD and EXT ID
//	Reject non matching frames with STD ID and EXT ID
//   */
  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE) != HAL_OK){
 800075e:	2301      	movs	r3, #1
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2301      	movs	r3, #1
 8000764:	2202      	movs	r2, #2
 8000766:	2102      	movs	r1, #2
 8000768:	4887      	ldr	r0, [pc, #540]	; (8000988 <main+0x2b4>)
 800076a:	f002 ffdf 	bl	800372c <HAL_FDCAN_ConfigGlobalFilter>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <main+0xa4>
	  Error_Handler();
 8000774:	f000 fdfe 	bl	8001374 <Error_Handler>
  }

  if ((&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK){
	  Error_Handler();
  }
  printf("FDCAN global filter is configured\r\n");
 8000778:	4885      	ldr	r0, [pc, #532]	; (8000990 <main+0x2bc>)
 800077a:	f00e f963 	bl	800ea44 <puts>

  /* Prepare Tx message Header */
  TxHeader.Identifier = 0x111;
 800077e:	4b85      	ldr	r3, [pc, #532]	; (8000994 <main+0x2c0>)
 8000780:	f240 1211 	movw	r2, #273	; 0x111
 8000784:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 8000786:	4b83      	ldr	r3, [pc, #524]	; (8000994 <main+0x2c0>)
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800078c:	4b81      	ldr	r3, [pc, #516]	; (8000994 <main+0x2c0>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000792:	4b80      	ldr	r3, [pc, #512]	; (8000994 <main+0x2c0>)
 8000794:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000798:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;	// transmitting node is error active
 800079a:	4b7e      	ldr	r3, [pc, #504]	; (8000994 <main+0x2c0>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80007a0:	4b7c      	ldr	r3, [pc, #496]	; (8000994 <main+0x2c0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;	// needs to be set to classic CAN mode, not FDCAN mode
 80007a6:	4b7b      	ldr	r3, [pc, #492]	; (8000994 <main+0x2c0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80007ac:	4b79      	ldr	r3, [pc, #484]	; (8000994 <main+0x2c0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;		// message marker to identify Tx message status, not too important
 80007b2:	4b78      	ldr	r3, [pc, #480]	; (8000994 <main+0x2c0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  printf("prepared TxHeader\r\n");
 80007b8:	4877      	ldr	r0, [pc, #476]	; (8000998 <main+0x2c4>)
 80007ba:	f00e f943 	bl	800ea44 <puts>
   * check out the example called "FDCAN_Com_IT" for the STM32H743I_EVAL discover board
   * open up a new project, and navigate to the example selector
   * Yong Da is basing his code from there
   */

  printf("putting the FDCAN module into interrupt mode\r\n");
 80007be:	4877      	ldr	r0, [pc, #476]	; (800099c <main+0x2c8>)
 80007c0:	f00e f940 	bl	800ea44 <puts>
  /* Configure Rx FIFO 0 watermark to 2 */
  HAL_FDCAN_ConfigFifoWatermark(&hfdcan1, FDCAN_CFG_RX_FIFO0, 2);
 80007c4:	2202      	movs	r2, #2
 80007c6:	2101      	movs	r1, #1
 80007c8:	486f      	ldr	r0, [pc, #444]	; (8000988 <main+0x2b4>)
 80007ca:	f002 ffdc 	bl	8003786 <HAL_FDCAN_ConfigFifoWatermark>

  /* Activate Rx FIFO 0 watermark notification */
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_WATERMARK, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2102      	movs	r1, #2
 80007d2:	486d      	ldr	r0, [pc, #436]	; (8000988 <main+0x2b4>)
 80007d4:	f003 fa18 	bl	8003c08 <HAL_FDCAN_ActivateNotification>


  /* === starting FDCAN module, must be last thing to do === */
  printf("trying to start FDCAN module\r\n");\
 80007d8:	4871      	ldr	r0, [pc, #452]	; (80009a0 <main+0x2cc>)
 80007da:	f00e f933 	bl	800ea44 <puts>
  if(HAL_FDCAN_Start(&hfdcan1) != HAL_OK){
 80007de:	486a      	ldr	r0, [pc, #424]	; (8000988 <main+0x2b4>)
 80007e0:	f003 f81d 	bl	800381e <HAL_FDCAN_Start>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <main+0x11a>
	  Error_Handler();
 80007ea:	f000 fdc3 	bl	8001374 <Error_Handler>
  }
  printf("successfully started FDCAN module\r\n");
 80007ee:	486d      	ldr	r0, [pc, #436]	; (80009a4 <main+0x2d0>)
 80007f0:	f00e f928 	bl	800ea44 <puts>


  /* === seed random number === */
  srand(time(NULL));
 80007f4:	2000      	movs	r0, #0
 80007f6:	f00e fa57 	bl	800eca8 <time>
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	4613      	mov	r3, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f00e f927 	bl	800ea54 <srand>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000806:	f00a f8c3 	bl	800a990 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  FollowThroughMutexHandle = osMutexNew(&FollowThroughMutex_attributes);
 800080a:	4867      	ldr	r0, [pc, #412]	; (80009a8 <main+0x2d4>)
 800080c:	f00a fa26 	bl	800ac5c <osMutexNew>
 8000810:	4603      	mov	r3, r0
 8000812:	4a66      	ldr	r2, [pc, #408]	; (80009ac <main+0x2d8>)
 8000814:	6013      	str	r3, [r2, #0]
  //	printf("%s", osMutexGetName(FollowThroughMutexHandle));
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of FollowThroughSem */
  FollowThroughSemHandle = osSemaphoreNew(1, 1, &FollowThroughSem_attributes);
 8000816:	4a66      	ldr	r2, [pc, #408]	; (80009b0 <main+0x2dc>)
 8000818:	2101      	movs	r1, #1
 800081a:	2001      	movs	r0, #1
 800081c:	f00a faa4 	bl	800ad68 <osSemaphoreNew>
 8000820:	4603      	mov	r3, r0
 8000822:	4a64      	ldr	r2, [pc, #400]	; (80009b4 <main+0x2e0>)
 8000824:	6013      	str	r3, [r2, #0]

  /* creation of ThreadExitSem */
  ThreadExitSemHandle = osSemaphoreNew(1, 1, &ThreadExitSem_attributes);
 8000826:	4a64      	ldr	r2, [pc, #400]	; (80009b8 <main+0x2e4>)
 8000828:	2101      	movs	r1, #1
 800082a:	2001      	movs	r0, #1
 800082c:	f00a fa9c 	bl	800ad68 <osSemaphoreNew>
 8000830:	4603      	mov	r3, r0
 8000832:	4a62      	ldr	r2, [pc, #392]	; (80009bc <main+0x2e8>)
 8000834:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  osSemaphoreAcquire(ThreadExitSemHandle, 0); //Start at 0. //Change the creation instead to start at 0 later.
 8000836:	4b61      	ldr	r3, [pc, #388]	; (80009bc <main+0x2e8>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f00a fb1d 	bl	800ae7c <osSemaphoreAcquire>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CommandQueue */
  CommandQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &CommandQueue_attributes);
 8000842:	4a5f      	ldr	r2, [pc, #380]	; (80009c0 <main+0x2ec>)
 8000844:	2102      	movs	r1, #2
 8000846:	2010      	movs	r0, #16
 8000848:	f00a fbae 	bl	800afa8 <osMessageQueueNew>
 800084c:	4603      	mov	r3, r0
 800084e:	4a5d      	ldr	r2, [pc, #372]	; (80009c4 <main+0x2f0>)
 8000850:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of CommandHandler */
  CommandHandlerHandle = osThreadNew(StartCommandHandler, NULL, &CommandHandler_attributes);
 8000852:	4a5d      	ldr	r2, [pc, #372]	; (80009c8 <main+0x2f4>)
 8000854:	2100      	movs	r1, #0
 8000856:	485d      	ldr	r0, [pc, #372]	; (80009cc <main+0x2f8>)
 8000858:	f00a f8e4 	bl	800aa24 <osThreadNew>
 800085c:	4603      	mov	r3, r0
 800085e:	4a5c      	ldr	r2, [pc, #368]	; (80009d0 <main+0x2fc>)
 8000860:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000862:	4a5c      	ldr	r2, [pc, #368]	; (80009d4 <main+0x300>)
 8000864:	2100      	movs	r1, #0
 8000866:	485c      	ldr	r0, [pc, #368]	; (80009d8 <main+0x304>)
 8000868:	f00a f8dc 	bl	800aa24 <osThreadNew>
 800086c:	4603      	mov	r3, r0
 800086e:	4a5b      	ldr	r2, [pc, #364]	; (80009dc <main+0x308>)
 8000870:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000872:	4a5b      	ldr	r2, [pc, #364]	; (80009e0 <main+0x30c>)
 8000874:	2100      	movs	r1, #0
 8000876:	485b      	ldr	r0, [pc, #364]	; (80009e4 <main+0x310>)
 8000878:	f00a f8d4 	bl	800aa24 <osThreadNew>
 800087c:	4603      	mov	r3, r0
 800087e:	4a5a      	ldr	r2, [pc, #360]	; (80009e8 <main+0x314>)
 8000880:	6013      	str	r3, [r2, #0]

  /* creation of CommandIdle */
  CommandIdleHandle = osThreadNew(StartCommandIdle, NULL, &CommandIdle_attributes);
 8000882:	4a5a      	ldr	r2, [pc, #360]	; (80009ec <main+0x318>)
 8000884:	2100      	movs	r1, #0
 8000886:	485a      	ldr	r0, [pc, #360]	; (80009f0 <main+0x31c>)
 8000888:	f00a f8cc 	bl	800aa24 <osThreadNew>
 800088c:	4603      	mov	r3, r0
 800088e:	4a59      	ldr	r2, [pc, #356]	; (80009f4 <main+0x320>)
 8000890:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000892:	4a59      	ldr	r2, [pc, #356]	; (80009f8 <main+0x324>)
 8000894:	2100      	movs	r1, #0
 8000896:	4859      	ldr	r0, [pc, #356]	; (80009fc <main+0x328>)
 8000898:	f00a f8c4 	bl	800aa24 <osThreadNew>
 800089c:	4603      	mov	r3, r0
 800089e:	4a58      	ldr	r2, [pc, #352]	; (8000a00 <main+0x32c>)
 80008a0:	6013      	str	r3, [r2, #0]

  /* creation of ThreadTerminato */
  ThreadTerminatoHandle = osThreadNew(StartThreadTerminator, NULL, &ThreadTerminato_attributes);
 80008a2:	4a58      	ldr	r2, [pc, #352]	; (8000a04 <main+0x330>)
 80008a4:	2100      	movs	r1, #0
 80008a6:	4858      	ldr	r0, [pc, #352]	; (8000a08 <main+0x334>)
 80008a8:	f00a f8bc 	bl	800aa24 <osThreadNew>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a57      	ldr	r2, [pc, #348]	; (8000a0c <main+0x338>)
 80008b0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadTerminate(Task1Handle);
 80008b2:	4b4a      	ldr	r3, [pc, #296]	; (80009dc <main+0x308>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f00a f988 	bl	800abcc <osThreadTerminate>
  osThreadTerminate(Task2Handle);
 80008bc:	4b4a      	ldr	r3, [pc, #296]	; (80009e8 <main+0x314>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f00a f983 	bl	800abcc <osThreadTerminate>
  osThreadTerminate(Task3Handle);
 80008c6:	4b4e      	ldr	r3, [pc, #312]	; (8000a00 <main+0x32c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f00a f97e 	bl	800abcc <osThreadTerminate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008d0:	f00a f882 	bl	800a9d8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(OBC == 0)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d1fc      	bne.n	80008d4 <main+0x200>
	  {
		  /* ========== TX super loop ========== */
		  printf("count: %d\n\r", count);
 80008da:	4b4d      	ldr	r3, [pc, #308]	; (8000a10 <main+0x33c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4619      	mov	r1, r3
 80008e0:	484c      	ldr	r0, [pc, #304]	; (8000a14 <main+0x340>)
 80008e2:	f00e f829 	bl	800e938 <iprintf>
		  count++;
 80008e6:	4b4a      	ldr	r3, [pc, #296]	; (8000a10 <main+0x33c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	3301      	adds	r3, #1
 80008ec:	4a48      	ldr	r2, [pc, #288]	; (8000a10 <main+0x33c>)
 80008ee:	6013      	str	r3, [r2, #0]

		  printf("trying to add message to TxFifo: TxData[0]=%3d, TxData[1]=%3d\r\n", TxData[0], TxData[1]);
 80008f0:	4b49      	ldr	r3, [pc, #292]	; (8000a18 <main+0x344>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	4619      	mov	r1, r3
 80008f6:	4b48      	ldr	r3, [pc, #288]	; (8000a18 <main+0x344>)
 80008f8:	785b      	ldrb	r3, [r3, #1]
 80008fa:	461a      	mov	r2, r3
 80008fc:	4847      	ldr	r0, [pc, #284]	; (8000a1c <main+0x348>)
 80008fe:	f00e f81b 	bl	800e938 <iprintf>
		  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK){
 8000902:	4a45      	ldr	r2, [pc, #276]	; (8000a18 <main+0x344>)
 8000904:	4923      	ldr	r1, [pc, #140]	; (8000994 <main+0x2c0>)
 8000906:	4820      	ldr	r0, [pc, #128]	; (8000988 <main+0x2b4>)
 8000908:	f002 ffb4 	bl	8003874 <HAL_FDCAN_AddMessageToTxFifoQ>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <main+0x242>
			  Error_Handler();
 8000912:	f000 fd2f 	bl	8001374 <Error_Handler>
		  }
		  printf("successfully added message to TxFifo\r\n");
 8000916:	4842      	ldr	r0, [pc, #264]	; (8000a20 <main+0x34c>)
 8000918:	f00e f894 	bl	800ea44 <puts>

		  TxData[0] = (uint8_t)rand();
 800091c:	f00e f8c8 	bl	800eab0 <rand>
 8000920:	4603      	mov	r3, r0
 8000922:	b2da      	uxtb	r2, r3
 8000924:	4b3c      	ldr	r3, [pc, #240]	; (8000a18 <main+0x344>)
 8000926:	701a      	strb	r2, [r3, #0]
		  TxData[1] = (uint8_t)rand();
 8000928:	f00e f8c2 	bl	800eab0 <rand>
 800092c:	4603      	mov	r3, r0
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b39      	ldr	r3, [pc, #228]	; (8000a18 <main+0x344>)
 8000932:	705a      	strb	r2, [r3, #1]
		  //Try changing this value here back and forth from 0x111 to 0x100. First make sure it works.
		  if(TxHeader.Identifier == 0x111)
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <main+0x2c0>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f240 1211 	movw	r2, #273	; 0x111
 800093c:	4293      	cmp	r3, r2
 800093e:	d107      	bne.n	8000950 <main+0x27c>
		  {
			  printf("Changing Identifier to 0x111\r\n");
 8000940:	4838      	ldr	r0, [pc, #224]	; (8000a24 <main+0x350>)
 8000942:	f00e f87f 	bl	800ea44 <puts>
			  TxHeader.Identifier = 0x110;
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <main+0x2c0>)
 8000948:	f44f 7288 	mov.w	r2, #272	; 0x110
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	e006      	b.n	800095e <main+0x28a>
		  }
		  else
		  {
			  printf("Changing Identifier to 0x110\r\n");
 8000950:	4835      	ldr	r0, [pc, #212]	; (8000a28 <main+0x354>)
 8000952:	f00e f877 	bl	800ea44 <puts>
			  TxHeader.Identifier = 0x111;
 8000956:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <main+0x2c0>)
 8000958:	f240 1211 	movw	r2, #273	; 0x111
 800095c:	601a      	str	r2, [r3, #0]
		  }


		  check_button();
 800095e:	f7ff fe91 	bl	8000684 <check_button>

		  HAL_Delay(250);
 8000962:	20fa      	movs	r0, #250	; 0xfa
 8000964:	f001 f9e2 	bl	8001d2c <HAL_Delay>
	  if(OBC == 0)
 8000968:	e7b4      	b.n	80008d4 <main+0x200>
 800096a:	bf00      	nop
 800096c:	2400091c 	.word	0x2400091c
 8000970:	58020800 	.word	0x58020800
 8000974:	24000910 	.word	0x24000910
 8000978:	240002e0 	.word	0x240002e0
 800097c:	0800fa1c 	.word	0x0800fa1c
 8000980:	0800fa30 	.word	0x0800fa30
 8000984:	240008a0 	.word	0x240008a0
 8000988:	24000240 	.word	0x24000240
 800098c:	0800fa44 	.word	0x0800fa44
 8000990:	0800fa60 	.word	0x0800fa60
 8000994:	240008c0 	.word	0x240008c0
 8000998:	0800fa84 	.word	0x0800fa84
 800099c:	0800fa98 	.word	0x0800fa98
 80009a0:	0800fac8 	.word	0x0800fac8
 80009a4:	0800fae8 	.word	0x0800fae8
 80009a8:	0800feb0 	.word	0x0800feb0
 80009ac:	24000914 	.word	0x24000914
 80009b0:	0800fe90 	.word	0x0800fe90
 80009b4:	24000898 	.word	0x24000898
 80009b8:	0800fea0 	.word	0x0800fea0
 80009bc:	2400089c 	.word	0x2400089c
 80009c0:	0800fe78 	.word	0x0800fe78
 80009c4:	24000894 	.word	0x24000894
 80009c8:	0800fda0 	.word	0x0800fda0
 80009cc:	08001061 	.word	0x08001061
 80009d0:	2400087c 	.word	0x2400087c
 80009d4:	0800fdc4 	.word	0x0800fdc4
 80009d8:	0800119d 	.word	0x0800119d
 80009dc:	24000880 	.word	0x24000880
 80009e0:	0800fde8 	.word	0x0800fde8
 80009e4:	080011b9 	.word	0x080011b9
 80009e8:	24000884 	.word	0x24000884
 80009ec:	0800fe0c 	.word	0x0800fe0c
 80009f0:	08001265 	.word	0x08001265
 80009f4:	24000888 	.word	0x24000888
 80009f8:	0800fe30 	.word	0x0800fe30
 80009fc:	08001271 	.word	0x08001271
 8000a00:	2400088c 	.word	0x2400088c
 8000a04:	0800fe54 	.word	0x0800fe54
 8000a08:	0800131d 	.word	0x0800131d
 8000a0c:	24000890 	.word	0x24000890
 8000a10:	24000918 	.word	0x24000918
 8000a14:	0800fb0c 	.word	0x0800fb0c
 8000a18:	24000000 	.word	0x24000000
 8000a1c:	0800fb18 	.word	0x0800fb18
 8000a20:	0800fb58 	.word	0x0800fb58
 8000a24:	0800fb80 	.word	0x0800fb80
 8000a28:	0800fba0 	.word	0x0800fba0

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b09c      	sub	sp, #112	; 0x70
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	224c      	movs	r2, #76	; 0x4c
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f00d fedf 	bl	800e7fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2220      	movs	r2, #32
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f00d fed9 	bl	800e7fe <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a4c:	2002      	movs	r0, #2
 8000a4e:	f004 f98d 	bl	8004d6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b33      	ldr	r3, [pc, #204]	; (8000b24 <SystemClock_Config+0xf8>)
 8000a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a5a:	4a32      	ldr	r2, [pc, #200]	; (8000b24 <SystemClock_Config+0xf8>)
 8000a5c:	f023 0301 	bic.w	r3, r3, #1
 8000a60:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a62:	4b30      	ldr	r3, [pc, #192]	; (8000b24 <SystemClock_Config+0xf8>)
 8000a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <SystemClock_Config+0xfc>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a74:	4a2c      	ldr	r2, [pc, #176]	; (8000b28 <SystemClock_Config+0xfc>)
 8000a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a7a:	6193      	str	r3, [r2, #24]
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <SystemClock_Config+0xfc>)
 8000a7e:	699b      	ldr	r3, [r3, #24]
 8000a80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a88:	bf00      	nop
 8000a8a:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <SystemClock_Config+0xfc>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a96:	d1f8      	bne.n	8000a8a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a9c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa6:	2340      	movs	r3, #64	; 0x40
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000ab6:	2318      	movs	r3, #24
 8000ab8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000aba:	2302      	movs	r3, #2
 8000abc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ac6:	230c      	movs	r3, #12
 8000ac8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f004 f992 	bl	8004e00 <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000ae2:	f000 fc47 	bl	8001374 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	233f      	movs	r3, #63	; 0x3f
 8000ae8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2101      	movs	r1, #1
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f004 fda6 	bl	800565c <HAL_RCC_ClockConfig>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000b16:	f000 fc2d 	bl	8001374 <Error_Handler>
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3770      	adds	r7, #112	; 0x70
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	58000400 	.word	0x58000400
 8000b28:	58024800 	.word	0x58024800

08000b2c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b30:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <MX_ETH_Init+0x80>)
 8000b32:	4a1f      	ldr	r2, [pc, #124]	; (8000bb0 <MX_ETH_Init+0x84>)
 8000b34:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_ETH_Init+0x88>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <MX_ETH_Init+0x88>)
 8000b3e:	2280      	movs	r2, #128	; 0x80
 8000b40:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_ETH_Init+0x88>)
 8000b44:	22e1      	movs	r2, #225	; 0xe1
 8000b46:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_ETH_Init+0x88>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_ETH_Init+0x88>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_ETH_Init+0x88>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_ETH_Init+0x80>)
 8000b5c:	4a15      	ldr	r2, [pc, #84]	; (8000bb4 <MX_ETH_Init+0x88>)
 8000b5e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MX_ETH_Init+0x80>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_ETH_Init+0x80>)
 8000b68:	4a13      	ldr	r2, [pc, #76]	; (8000bb8 <MX_ETH_Init+0x8c>)
 8000b6a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_ETH_Init+0x80>)
 8000b6e:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <MX_ETH_Init+0x90>)
 8000b70:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_ETH_Init+0x80>)
 8000b74:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b78:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b7a:	480c      	ldr	r0, [pc, #48]	; (8000bac <MX_ETH_Init+0x80>)
 8000b7c:	f001 ff5e 	bl	8002a3c <HAL_ETH_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b86:	f000 fbf5 	bl	8001374 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b8a:	2238      	movs	r2, #56	; 0x38
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <MX_ETH_Init+0x94>)
 8000b90:	f00d fe35 	bl	800e7fe <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <MX_ETH_Init+0x94>)
 8000b96:	2221      	movs	r2, #33	; 0x21
 8000b98:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_ETH_Init+0x94>)
 8000b9c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ba0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <MX_ETH_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	24000190 	.word	0x24000190
 8000bb0:	40028000 	.word	0x40028000
 8000bb4:	24000924 	.word	0x24000924
 8000bb8:	240000dc 	.word	0x240000dc
 8000bbc:	2400007c 	.word	0x2400007c
 8000bc0:	24000158 	.word	0x24000158

08000bc4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000bc8:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000bca:	4a2f      	ldr	r2, [pc, #188]	; (8000c88 <MX_FDCAN1_Init+0xc4>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bce:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000bd4:	4b2b      	ldr	r3, [pc, #172]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000bda:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8000be0:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000be6:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000bec:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000bf4:	2210      	movs	r2, #16
 8000bf6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 63;
 8000bf8:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000bfa:	223f      	movs	r2, #63	; 0x3f
 8000bfc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c00:	2210      	movs	r2, #16
 8000c02:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c12:	2205      	movs	r2, #5
 8000c14:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c18:	2204      	movs	r2, #4
 8000c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c30:	2220      	movs	r2, #32
 8000c32:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c36:	2204      	movs	r2, #4
 8000c38:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 32;
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c3c:	2220      	movs	r2, #32
 8000c3e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c42:	2204      	movs	r2, #4
 8000c44:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 1;
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c4e:	2204      	movs	r2, #4
 8000c50:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 4;
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c54:	2204      	movs	r2, #4
 8000c56:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 4;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c60:	2220      	movs	r2, #32
 8000c62:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <MX_FDCAN1_Init+0xc0>)
 8000c72:	f002 fb07 	bl	8003284 <HAL_FDCAN_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000c7c:	f000 fb7a 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	24000240 	.word	0x24000240
 8000c88:	4000a000 	.word	0x4000a000

08000c8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c90:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000c92:	4a23      	ldr	r2, [pc, #140]	; (8000d20 <MX_USART3_UART_Init+0x94>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000c98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cd4:	4811      	ldr	r0, [pc, #68]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cd6:	f006 fed1 	bl	8007a7c <HAL_UART_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ce0:	f000 fb48 	bl	8001374 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000ce8:	f009 fa39 	bl	800a15e <HAL_UARTEx_SetTxFifoThreshold>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000cf2:	f000 fb3f 	bl	8001374 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4808      	ldr	r0, [pc, #32]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000cfa:	f009 fa6e 	bl	800a1da <HAL_UARTEx_SetRxFifoThreshold>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d04:	f000 fb36 	bl	8001374 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_USART3_UART_Init+0x90>)
 8000d0a:	f009 f9ef 	bl	800a0ec <HAL_UARTEx_DisableFifoMode>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d14:	f000 fb2e 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  /* USER CODE END USART3_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	240002e0 	.word	0x240002e0
 8000d20:	40004800 	.word	0x40004800

08000d24 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d2a:	4a16      	ldr	r2, [pc, #88]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d30:	2209      	movs	r2, #9
 8000d32:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d36:	2202      	movs	r2, #2
 8000d38:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d42:	2202      	movs	r2, #2
 8000d44:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000d6c:	f003 feb5 	bl	8004ada <HAL_PCD_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000d76:	f000 fafd 	bl	8001374 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	24000370 	.word	0x24000370
 8000d84:	40080000 	.word	0x40080000

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	; 0x30
 8000d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	4b62      	ldr	r3, [pc, #392]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	4a60      	ldr	r2, [pc, #384]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000da6:	f043 0304 	orr.w	r3, r3, #4
 8000daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dae:	4b5e      	ldr	r3, [pc, #376]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	61bb      	str	r3, [r7, #24]
 8000dba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dbc:	4b5a      	ldr	r3, [pc, #360]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc2:	4a59      	ldr	r2, [pc, #356]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dcc:	4b56      	ldr	r3, [pc, #344]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b53      	ldr	r3, [pc, #332]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de0:	4a51      	ldr	r2, [pc, #324]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dea:	4b4f      	ldr	r3, [pc, #316]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df8:	4b4b      	ldr	r3, [pc, #300]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfe:	4a4a      	ldr	r2, [pc, #296]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e08:	4b47      	ldr	r3, [pc, #284]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e16:	4b44      	ldr	r3, [pc, #272]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	4a42      	ldr	r2, [pc, #264]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000e1e:	f043 0308 	orr.w	r3, r3, #8
 8000e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e26:	4b40      	ldr	r3, [pc, #256]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2c:	f003 0308 	and.w	r3, r3, #8
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e34:	4b3c      	ldr	r3, [pc, #240]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	4a3b      	ldr	r2, [pc, #236]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e44:	4b38      	ldr	r3, [pc, #224]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e52:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e58:	4a33      	ldr	r2, [pc, #204]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e62:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <MX_GPIO_Init+0x1a0>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	603b      	str	r3, [r7, #0]
 8000e6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e76:	482d      	ldr	r0, [pc, #180]	; (8000f2c <MX_GPIO_Init+0x1a4>)
 8000e78:	f003 fe16 	bl	8004aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e82:	482b      	ldr	r0, [pc, #172]	; (8000f30 <MX_GPIO_Init+0x1a8>)
 8000e84:	f003 fe10 	bl	8004aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	4829      	ldr	r0, [pc, #164]	; (8000f34 <MX_GPIO_Init+0x1ac>)
 8000e8e:	f003 fe0b 	bl	8004aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4824      	ldr	r0, [pc, #144]	; (8000f38 <MX_GPIO_Init+0x1b0>)
 8000ea8:	f003 fc36 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000eac:	f244 0301 	movw	r3, #16385	; 0x4001
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4819      	ldr	r0, [pc, #100]	; (8000f2c <MX_GPIO_Init+0x1a4>)
 8000ec6:	f003 fc27 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ece:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4813      	ldr	r0, [pc, #76]	; (8000f30 <MX_GPIO_Init+0x1a8>)
 8000ee4:	f003 fc18 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ef0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4619      	mov	r1, r3
 8000efc:	480f      	ldr	r0, [pc, #60]	; (8000f3c <MX_GPIO_Init+0x1b4>)
 8000efe:	f003 fc0b 	bl	8004718 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f02:	2302      	movs	r3, #2
 8000f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4619      	mov	r1, r3
 8000f18:	4806      	ldr	r0, [pc, #24]	; (8000f34 <MX_GPIO_Init+0x1ac>)
 8000f1a:	f003 fbfd 	bl	8004718 <HAL_GPIO_Init>

}
 8000f1e:	bf00      	nop
 8000f20:	3730      	adds	r7, #48	; 0x30
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	58024400 	.word	0x58024400
 8000f2c:	58020400 	.word	0x58020400
 8000f30:	58020c00 	.word	0x58020c00
 8000f34:	58021000 	.word	0x58021000
 8000f38:	58020800 	.word	0x58020800
 8000f3c:	58021800 	.word	0x58021800

08000f40 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_WATERMARK) == RESET){
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d101      	bne.n	8000f58 <HAL_FDCAN_RxFifo0Callback+0x18>
		Error_Handler();
 8000f54:	f000 fa0e 	bl	8001374 <Error_Handler>
	}

	printf("hit the callback RXFifo0\n\r");
 8000f58:	4810      	ldr	r0, [pc, #64]	; (8000f9c <HAL_FDCAN_RxFifo0Callback+0x5c>)
 8000f5a:	f00d fced 	bl	800e938 <iprintf>

	// https://overiq.com/c-programming-101/local-global-and-static-variables-in-c/
	static int count = 0;	// retain the variable value between different function calls

	/* Retrieve Rx message from RX FIFO0 */
	if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK){
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <HAL_FDCAN_RxFifo0Callback+0x60>)
 8000f60:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <HAL_FDCAN_RxFifo0Callback+0x64>)
 8000f62:	2140      	movs	r1, #64	; 0x40
 8000f64:	4810      	ldr	r0, [pc, #64]	; (8000fa8 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8000f66:	f002 fce1 	bl	800392c <HAL_FDCAN_GetRxMessage>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <HAL_FDCAN_RxFifo0Callback+0x34>
	  Error_Handler();
 8000f70:	f000 fa00 	bl	8001374 <Error_Handler>
	}

	printf("count=%3d, received RxData[0]=%3d, RxData[1]=%d\r\n", count, RxData[0], RxData[1]);
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000f76:	6819      	ldr	r1, [r3, #0]
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_FDCAN_RxFifo0Callback+0x60>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_FDCAN_RxFifo0Callback+0x60>)
 8000f80:	785b      	ldrb	r3, [r3, #1]
 8000f82:	480b      	ldr	r0, [pc, #44]	; (8000fb0 <HAL_FDCAN_RxFifo0Callback+0x70>)
 8000f84:	f00d fcd8 	bl	800e938 <iprintf>
	count++;
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	4a07      	ldr	r2, [pc, #28]	; (8000fac <HAL_FDCAN_RxFifo0Callback+0x6c>)
 8000f90:	6013      	str	r3, [r2, #0]
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	0800fbc0 	.word	0x0800fbc0
 8000fa0:	2400090c 	.word	0x2400090c
 8000fa4:	240008e4 	.word	0x240008e4
 8000fa8:	24000240 	.word	0x24000240
 8000fac:	2400092c 	.word	0x2400092c
 8000fb0:	0800fbdc 	.word	0x0800fbdc

08000fb4 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000fbc:	1d39      	adds	r1, r7, #4
 8000fbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <__io_putchar+0x20>)
 8000fc6:	f006 fda9 	bl	8007b1c <HAL_UART_Transmit>

	return ch;
 8000fca:	687b      	ldr	r3, [r7, #4]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	240002e0 	.word	0x240002e0

08000fd8 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	/* Place your implementation of fgetc here */

	/* Clear the Overrun flag just before receiving the first character */
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <__io_getchar+0x38>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2208      	movs	r2, #8
 8000fe8:	621a      	str	r2, [r3, #32]

	/* Wait for reception of a character on the USART1 RX line
     and echo this character on console */
	HAL_UART_Receive(&huart3, (uint16_t *)&ch, 1, 0xFFFF);
 8000fea:	1df9      	adds	r1, r7, #7
 8000fec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4807      	ldr	r0, [pc, #28]	; (8001010 <__io_getchar+0x38>)
 8000ff4:	f006 fe28 	bl	8007c48 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart3, (uint16_t *)&ch, 1, 0xFFFF);
 8000ff8:	1df9      	adds	r1, r7, #7
 8000ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ffe:	2201      	movs	r2, #1
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <__io_getchar+0x38>)
 8001002:	f006 fd8b 	bl	8007b1c <HAL_UART_Transmit>
	return ch;
 8001006:	79fb      	ldrb	r3, [r7, #7]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	240002e0 	.word	0x240002e0

08001014 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart3)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	printf("HAL_UART_RxCpltCallback: %u\n", USART_DATA[0]);
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HAL_UART_RxCpltCallback+0x40>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	480d      	ldr	r0, [pc, #52]	; (8001058 <HAL_UART_RxCpltCallback+0x44>)
 8001024:	f00d fc88 	bl	800e938 <iprintf>
	uint16_t command = (uint16_t) USART_DATA[0];
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_UART_RxCpltCallback+0x40>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b29b      	uxth	r3, r3
 800102e:	81fb      	strh	r3, [r7, #14]
	osMessageQueuePut(CommandQueueHandle, (void*) &command, 0, 0);
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <HAL_UART_RxCpltCallback+0x48>)
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	f107 010e 	add.w	r1, r7, #14
 8001038:	2300      	movs	r3, #0
 800103a:	2200      	movs	r2, #0
 800103c:	f00a f828 	bl	800b090 <osMessageQueuePut>
	HAL_UART_Receive_IT(huart3, USART_DATA, 1);
 8001040:	2201      	movs	r2, #1
 8001042:	4904      	ldr	r1, [pc, #16]	; (8001054 <HAL_UART_RxCpltCallback+0x40>)
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f006 fed3 	bl	8007df0 <HAL_UART_Receive_IT>
}
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	24000910 	.word	0x24000910
 8001058:	0800fc10 	.word	0x0800fc10
 800105c:	24000894 	.word	0x24000894

08001060 <StartCommandHandler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCommandHandler */
void StartCommandHandler(void *argument)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t command;
  /* Infinite loop */
  while(1)
  {
  	if(osMessageQueueGet(CommandQueueHandle, (void*) &command, NULL, osWaitForever) == osOK)
 8001068:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <StartCommandHandler+0x100>)
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	f107 010e 	add.w	r1, r7, #14
 8001070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001074:	2200      	movs	r2, #0
 8001076:	f00a f86b 	bl	800b150 <osMessageQueueGet>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1f3      	bne.n	8001068 <StartCommandHandler+0x8>
  	{

  		command = command - 48; //From ASCII to int
 8001080:	89fb      	ldrh	r3, [r7, #14]
 8001082:	3b30      	subs	r3, #48	; 0x30
 8001084:	b29b      	uxth	r3, r3
 8001086:	81fb      	strh	r3, [r7, #14]

  		if(command < 0 || command > 9)
 8001088:	89fb      	ldrh	r3, [r7, #14]
 800108a:	2b09      	cmp	r3, #9
 800108c:	d903      	bls.n	8001096 <StartCommandHandler+0x36>
  		{
  			printf("Invalid INT. Try again\n");
 800108e:	4835      	ldr	r0, [pc, #212]	; (8001164 <StartCommandHandler+0x104>)
 8001090:	f00d fcd8 	bl	800ea44 <puts>
 8001094:	e7e8      	b.n	8001068 <StartCommandHandler+0x8>
  		}

  		else if(command == 1)
 8001096:	89fb      	ldrh	r3, [r7, #14]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d11c      	bne.n	80010d6 <StartCommandHandler+0x76>
  		{
  			if(osThreadGetState(Task1Handle) == osThreadInactive ||
 800109c:	4b32      	ldr	r3, [pc, #200]	; (8001168 <StartCommandHandler+0x108>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f009 fd51 	bl	800ab48 <osThreadGetState>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d007      	beq.n	80010bc <StartCommandHandler+0x5c>
  				 osThreadGetState(Task1Handle) == osThreadTerminated)
 80010ac:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <StartCommandHandler+0x108>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f009 fd49 	bl	800ab48 <osThreadGetState>
 80010b6:	4603      	mov	r3, r0
  			if(osThreadGetState(Task1Handle) == osThreadInactive ||
 80010b8:	2b04      	cmp	r3, #4
 80010ba:	d108      	bne.n	80010ce <StartCommandHandler+0x6e>
  			{
  				Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 80010bc:	4a2b      	ldr	r2, [pc, #172]	; (800116c <StartCommandHandler+0x10c>)
 80010be:	2100      	movs	r1, #0
 80010c0:	482b      	ldr	r0, [pc, #172]	; (8001170 <StartCommandHandler+0x110>)
 80010c2:	f009 fcaf 	bl	800aa24 <osThreadNew>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a27      	ldr	r2, [pc, #156]	; (8001168 <StartCommandHandler+0x108>)
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	e046      	b.n	800115c <StartCommandHandler+0xfc>
  			}
  			else
  			{
  				printf("Task1 Is Already Running\n");
 80010ce:	4829      	ldr	r0, [pc, #164]	; (8001174 <StartCommandHandler+0x114>)
 80010d0:	f00d fcb8 	bl	800ea44 <puts>
 80010d4:	e7c8      	b.n	8001068 <StartCommandHandler+0x8>
  			}
  		}

  		else if(command == 2)
 80010d6:	89fb      	ldrh	r3, [r7, #14]
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d11c      	bne.n	8001116 <StartCommandHandler+0xb6>
  		{
  			if(osThreadGetState(Task2Handle) == osThreadInactive ||
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <StartCommandHandler+0x118>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f009 fd31 	bl	800ab48 <osThreadGetState>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d007      	beq.n	80010fc <StartCommandHandler+0x9c>
  			   osThreadGetState(Task2Handle) == osThreadTerminated)
 80010ec:	4b22      	ldr	r3, [pc, #136]	; (8001178 <StartCommandHandler+0x118>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f009 fd29 	bl	800ab48 <osThreadGetState>
 80010f6:	4603      	mov	r3, r0
  			if(osThreadGetState(Task2Handle) == osThreadInactive ||
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d108      	bne.n	800110e <StartCommandHandler+0xae>
  			{
  				Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 80010fc:	4a1f      	ldr	r2, [pc, #124]	; (800117c <StartCommandHandler+0x11c>)
 80010fe:	2100      	movs	r1, #0
 8001100:	481f      	ldr	r0, [pc, #124]	; (8001180 <StartCommandHandler+0x120>)
 8001102:	f009 fc8f 	bl	800aa24 <osThreadNew>
 8001106:	4603      	mov	r3, r0
 8001108:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <StartCommandHandler+0x118>)
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	e026      	b.n	800115c <StartCommandHandler+0xfc>
  			}
  		  else
  			{
  			  printf("Task2 Is Already Running\n");
 800110e:	481d      	ldr	r0, [pc, #116]	; (8001184 <StartCommandHandler+0x124>)
 8001110:	f00d fc98 	bl	800ea44 <puts>
 8001114:	e7a8      	b.n	8001068 <StartCommandHandler+0x8>
  			}
  		}

  		else if(command == 3)
 8001116:	89fb      	ldrh	r3, [r7, #14]
 8001118:	2b03      	cmp	r3, #3
 800111a:	d11c      	bne.n	8001156 <StartCommandHandler+0xf6>
  		{
  			if(osThreadGetState(Task3Handle) == osThreadInactive ||
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <StartCommandHandler+0x128>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4618      	mov	r0, r3
 8001122:	f009 fd11 	bl	800ab48 <osThreadGetState>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d007      	beq.n	800113c <StartCommandHandler+0xdc>
  			   osThreadGetState(Task3Handle) == osThreadTerminated)
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <StartCommandHandler+0x128>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f009 fd09 	bl	800ab48 <osThreadGetState>
 8001136:	4603      	mov	r3, r0
  			if(osThreadGetState(Task3Handle) == osThreadInactive ||
 8001138:	2b04      	cmp	r3, #4
 800113a:	d108      	bne.n	800114e <StartCommandHandler+0xee>
  			{
  				Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 800113c:	4a13      	ldr	r2, [pc, #76]	; (800118c <StartCommandHandler+0x12c>)
 800113e:	2100      	movs	r1, #0
 8001140:	4813      	ldr	r0, [pc, #76]	; (8001190 <StartCommandHandler+0x130>)
 8001142:	f009 fc6f 	bl	800aa24 <osThreadNew>
 8001146:	4603      	mov	r3, r0
 8001148:	4a0f      	ldr	r2, [pc, #60]	; (8001188 <StartCommandHandler+0x128>)
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	e006      	b.n	800115c <StartCommandHandler+0xfc>
  			}
  			else
  			{
  				printf("Task3 Is Already Running\n");
 800114e:	4811      	ldr	r0, [pc, #68]	; (8001194 <StartCommandHandler+0x134>)
 8001150:	f00d fc78 	bl	800ea44 <puts>
 8001154:	e788      	b.n	8001068 <StartCommandHandler+0x8>
  			}
  		}
  		else
  		{
  			printf("Command not implemented\n");
 8001156:	4810      	ldr	r0, [pc, #64]	; (8001198 <StartCommandHandler+0x138>)
 8001158:	f00d fc74 	bl	800ea44 <puts>
  	if(osMessageQueueGet(CommandQueueHandle, (void*) &command, NULL, osWaitForever) == osOK)
 800115c:	e784      	b.n	8001068 <StartCommandHandler+0x8>
 800115e:	bf00      	nop
 8001160:	24000894 	.word	0x24000894
 8001164:	0800fc30 	.word	0x0800fc30
 8001168:	24000880 	.word	0x24000880
 800116c:	0800fdc4 	.word	0x0800fdc4
 8001170:	0800119d 	.word	0x0800119d
 8001174:	0800fc48 	.word	0x0800fc48
 8001178:	24000884 	.word	0x24000884
 800117c:	0800fde8 	.word	0x0800fde8
 8001180:	080011b9 	.word	0x080011b9
 8001184:	0800fc64 	.word	0x0800fc64
 8001188:	2400088c 	.word	0x2400088c
 800118c:	0800fe30 	.word	0x0800fe30
 8001190:	08001271 	.word	0x08001271
 8001194:	0800fc80 	.word	0x0800fc80
 8001198:	0800fc9c 	.word	0x0800fc9c

0800119c <StartTask1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask1 */
  /* Infinite loop */
  for(;;)
  {
  	printf("Task 1 is running\n");
 80011a4:	4803      	ldr	r0, [pc, #12]	; (80011b4 <StartTask1+0x18>)
 80011a6:	f00d fc4d 	bl	800ea44 <puts>
    osDelay(100);
 80011aa:	2064      	movs	r0, #100	; 0x64
 80011ac:	f009 fd3b 	bl	800ac26 <osDelay>
  	printf("Task 1 is running\n");
 80011b0:	e7f8      	b.n	80011a4 <StartTask1+0x8>
 80011b2:	bf00      	nop
 80011b4:	0800fcb4 	.word	0x0800fcb4

080011b8 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */

	if(osSemaphoreAcquire(FollowThroughSemHandle, osWaitForever) == osOK)
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <StartTask2+0x94>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011c8:	4618      	mov	r0, r3
 80011ca:	f009 fe57 	bl	800ae7c <osSemaphoreAcquire>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d133      	bne.n	800123c <StartTask2+0x84>
	{

		printf("Task 2 is running\n");
 80011d4:	481e      	ldr	r0, [pc, #120]	; (8001250 <StartTask2+0x98>)
 80011d6:	f00d fc35 	bl	800ea44 <puts>

		/* Non-Infinite loop */
		for(int i = -1 ; i < 1000; ++ i)
 80011da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	e028      	b.n	8001234 <StartTask2+0x7c>
		{
			for(int d = 0; d < 30000; ++d)
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	e002      	b.n	80011ee <StartTask2+0x36>
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	3301      	adds	r3, #1
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	f247 522f 	movw	r2, #29999	; 0x752f
 80011f4:	4293      	cmp	r3, r2
 80011f6:	ddf7      	ble.n	80011e8 <StartTask2+0x30>
			{
				;
			}

			if((i+1) % 250 == 0)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <StartTask2+0x9c>)
 80011fe:	fb83 1302 	smull	r1, r3, r3, r2
 8001202:	1119      	asrs	r1, r3, #4
 8001204:	17d3      	asrs	r3, r2, #31
 8001206:	1acb      	subs	r3, r1, r3
 8001208:	21fa      	movs	r1, #250	; 0xfa
 800120a:	fb01 f303 	mul.w	r3, r1, r3
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10c      	bne.n	800122e <StartTask2+0x76>
				printf("Task 2 is %u %% finished\n", (uint16_t)((i+1) / 10));
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3301      	adds	r3, #1
 8001218:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <StartTask2+0xa0>)
 800121a:	fb82 1203 	smull	r1, r2, r2, r3
 800121e:	1092      	asrs	r2, r2, #2
 8001220:	17db      	asrs	r3, r3, #31
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	b29b      	uxth	r3, r3
 8001226:	4619      	mov	r1, r3
 8001228:	480c      	ldr	r0, [pc, #48]	; (800125c <StartTask2+0xa4>)
 800122a:	f00d fb85 	bl	800e938 <iprintf>
		for(int i = -1 ; i < 1000; ++ i)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3301      	adds	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800123a:	dbd2      	blt.n	80011e2 <StartTask2+0x2a>

		}
	}
	osSemaphoreRelease(ThreadExitSemHandle);
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <StartTask2+0xa8>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f009 fe6d 	bl	800af20 <osSemaphoreRelease>
  osThreadExit(); //This releases Mutex (Or it should)
 8001246:	f009 fcbb 	bl	800abc0 <osThreadExit>
 800124a:	bf00      	nop
 800124c:	24000898 	.word	0x24000898
 8001250:	0800fcc8 	.word	0x0800fcc8
 8001254:	10624dd3 	.word	0x10624dd3
 8001258:	66666667 	.word	0x66666667
 800125c:	0800fcdc 	.word	0x0800fcdc
 8001260:	2400089c 	.word	0x2400089c

08001264 <StartCommandIdle>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommandIdle */
void StartCommandIdle(void *argument)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandIdle */
  /* Infinite loop */
  for(;;)
 800126c:	e7fe      	b.n	800126c <StartCommandIdle+0x8>
	...

08001270 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */

	if(osSemaphoreAcquire(FollowThroughSemHandle, osWaitForever) == osOK)
 8001278:	4b22      	ldr	r3, [pc, #136]	; (8001304 <StartTask3+0x94>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001280:	4618      	mov	r0, r3
 8001282:	f009 fdfb 	bl	800ae7c <osSemaphoreAcquire>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d133      	bne.n	80012f4 <StartTask3+0x84>
	{
		printf("Task 3 is running\n");
 800128c:	481e      	ldr	r0, [pc, #120]	; (8001308 <StartTask3+0x98>)
 800128e:	f00d fbd9 	bl	800ea44 <puts>

		/* Non-Infinite loop */
		for(int i = -1 ; i < 1000; ++ i)
 8001292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	e028      	b.n	80012ec <StartTask3+0x7c>
		{
			for(int d = 0; d < 30000; ++d)
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	e002      	b.n	80012a6 <StartTask3+0x36>
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	3301      	adds	r3, #1
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	f247 522f 	movw	r2, #29999	; 0x752f
 80012ac:	4293      	cmp	r3, r2
 80012ae:	ddf7      	ble.n	80012a0 <StartTask3+0x30>
			{
				;
			}
			if((i+1) % 250 == 0)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <StartTask3+0x9c>)
 80012b6:	fb83 1302 	smull	r1, r3, r3, r2
 80012ba:	1119      	asrs	r1, r3, #4
 80012bc:	17d3      	asrs	r3, r2, #31
 80012be:	1acb      	subs	r3, r1, r3
 80012c0:	21fa      	movs	r1, #250	; 0xfa
 80012c2:	fb01 f303 	mul.w	r3, r1, r3
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10c      	bne.n	80012e6 <StartTask3+0x76>
				printf("Task 3 is %u %% finished\n", (uint16_t)((i+1) / 10));
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3301      	adds	r3, #1
 80012d0:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <StartTask3+0xa0>)
 80012d2:	fb82 1203 	smull	r1, r2, r2, r3
 80012d6:	1092      	asrs	r2, r2, #2
 80012d8:	17db      	asrs	r3, r3, #31
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b29b      	uxth	r3, r3
 80012de:	4619      	mov	r1, r3
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <StartTask3+0xa4>)
 80012e2:	f00d fb29 	bl	800e938 <iprintf>
		for(int i = -1 ; i < 1000; ++ i)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3301      	adds	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012f2:	dbd2      	blt.n	800129a <StartTask3+0x2a>

		}
	}
	osSemaphoreRelease(ThreadExitSemHandle);
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <StartTask3+0xa8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f009 fe11 	bl	800af20 <osSemaphoreRelease>
	osThreadExit(); //This releases Mutex (Or it should)
 80012fe:	f009 fc5f 	bl	800abc0 <osThreadExit>
 8001302:	bf00      	nop
 8001304:	24000898 	.word	0x24000898
 8001308:	0800fcf8 	.word	0x0800fcf8
 800130c:	10624dd3 	.word	0x10624dd3
 8001310:	66666667 	.word	0x66666667
 8001314:	0800fd0c 	.word	0x0800fd0c
 8001318:	2400089c 	.word	0x2400089c

0800131c <StartThreadTerminator>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartThreadTerminator */
void StartThreadTerminator(void *argument)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartThreadTerminator */
  /* Infinite loop */
  for(;;)
  {
    while(osSemaphoreAcquire(ThreadExitSemHandle, osWaitForever) == osOK)
 8001324:	e004      	b.n	8001330 <StartThreadTerminator+0x14>
    {
    	osSemaphoreRelease(FollowThroughSemHandle);
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <StartThreadTerminator+0x2c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f009 fdf8 	bl	800af20 <osSemaphoreRelease>
    while(osSemaphoreAcquire(ThreadExitSemHandle, osWaitForever) == osOK)
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <StartThreadTerminator+0x30>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001338:	4618      	mov	r0, r3
 800133a:	f009 fd9f 	bl	800ae7c <osSemaphoreAcquire>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f0      	beq.n	8001326 <StartThreadTerminator+0xa>
 8001344:	e7f4      	b.n	8001330 <StartThreadTerminator+0x14>
 8001346:	bf00      	nop
 8001348:	24000898 	.word	0x24000898
 800134c:	2400089c 	.word	0x2400089c

08001350 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001362:	f000 fcc3 	bl	8001cec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40001000 	.word	0x40001000

08001374 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001378:	b672      	cpsid	i
}
 800137a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001382:	4809      	ldr	r0, [pc, #36]	; (80013a8 <Error_Handler+0x34>)
 8001384:	f003 fb90 	bl	8004aa8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8001388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800138c:	f000 fcce 	bl	8001d2c <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001396:	4804      	ldr	r0, [pc, #16]	; (80013a8 <Error_Handler+0x34>)
 8001398:	f003 fb86 	bl	8004aa8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800139c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a0:	f000 fcc4 	bl	8001d2c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80013a4:	e7ea      	b.n	800137c <Error_Handler+0x8>
 80013a6:	bf00      	nop
 80013a8:	58020400 	.word	0x58020400

080013ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b2:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_MspInit+0x38>)
 80013b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013b8:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <HAL_MspInit+0x38>)
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_MspInit+0x38>)
 80013c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	210f      	movs	r1, #15
 80013d4:	f06f 0001 	mvn.w	r0, #1
 80013d8:	f000 fda4 	bl	8001f24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	58024400 	.word	0x58024400

080013e8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	; 0x38
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a59      	ldr	r2, [pc, #356]	; (800156c <HAL_ETH_MspInit+0x184>)
 8001406:	4293      	cmp	r3, r2
 8001408:	f040 80ab 	bne.w	8001562 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800140c:	4b58      	ldr	r3, [pc, #352]	; (8001570 <HAL_ETH_MspInit+0x188>)
 800140e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001412:	4a57      	ldr	r2, [pc, #348]	; (8001570 <HAL_ETH_MspInit+0x188>)
 8001414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001418:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800141c:	4b54      	ldr	r3, [pc, #336]	; (8001570 <HAL_ETH_MspInit+0x188>)
 800141e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001422:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001426:	623b      	str	r3, [r7, #32]
 8001428:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800142a:	4b51      	ldr	r3, [pc, #324]	; (8001570 <HAL_ETH_MspInit+0x188>)
 800142c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001430:	4a4f      	ldr	r2, [pc, #316]	; (8001570 <HAL_ETH_MspInit+0x188>)
 8001432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001436:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800143a:	4b4d      	ldr	r3, [pc, #308]	; (8001570 <HAL_ETH_MspInit+0x188>)
 800143c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001448:	4b49      	ldr	r3, [pc, #292]	; (8001570 <HAL_ETH_MspInit+0x188>)
 800144a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800144e:	4a48      	ldr	r2, [pc, #288]	; (8001570 <HAL_ETH_MspInit+0x188>)
 8001450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001454:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001458:	4b45      	ldr	r3, [pc, #276]	; (8001570 <HAL_ETH_MspInit+0x188>)
 800145a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	61bb      	str	r3, [r7, #24]
 8001464:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	4b42      	ldr	r3, [pc, #264]	; (8001570 <HAL_ETH_MspInit+0x188>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146c:	4a40      	ldr	r2, [pc, #256]	; (8001570 <HAL_ETH_MspInit+0x188>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001476:	4b3e      	ldr	r3, [pc, #248]	; (8001570 <HAL_ETH_MspInit+0x188>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <HAL_ETH_MspInit+0x188>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148a:	4a39      	ldr	r2, [pc, #228]	; (8001570 <HAL_ETH_MspInit+0x188>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001494:	4b36      	ldr	r3, [pc, #216]	; (8001570 <HAL_ETH_MspInit+0x188>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	4b33      	ldr	r3, [pc, #204]	; (8001570 <HAL_ETH_MspInit+0x188>)
 80014a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a8:	4a31      	ldr	r2, [pc, #196]	; (8001570 <HAL_ETH_MspInit+0x188>)
 80014aa:	f043 0302 	orr.w	r3, r3, #2
 80014ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b2:	4b2f      	ldr	r3, [pc, #188]	; (8001570 <HAL_ETH_MspInit+0x188>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014c0:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_ETH_MspInit+0x188>)
 80014c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c6:	4a2a      	ldr	r2, [pc, #168]	; (8001570 <HAL_ETH_MspInit+0x188>)
 80014c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <HAL_ETH_MspInit+0x188>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80014de:	2332      	movs	r3, #50	; 0x32
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014ee:	230b      	movs	r3, #11
 80014f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	481e      	ldr	r0, [pc, #120]	; (8001574 <HAL_ETH_MspInit+0x18c>)
 80014fa:	f003 f90d 	bl	8004718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80014fe:	2386      	movs	r3, #134	; 0x86
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
 8001504:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800150e:	230b      	movs	r3, #11
 8001510:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001516:	4619      	mov	r1, r3
 8001518:	4817      	ldr	r0, [pc, #92]	; (8001578 <HAL_ETH_MspInit+0x190>)
 800151a:	f003 f8fd 	bl	8004718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800151e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001530:	230b      	movs	r3, #11
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001538:	4619      	mov	r1, r3
 800153a:	4810      	ldr	r0, [pc, #64]	; (800157c <HAL_ETH_MspInit+0x194>)
 800153c:	f003 f8ec 	bl	8004718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001540:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001552:	230b      	movs	r3, #11
 8001554:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155a:	4619      	mov	r1, r3
 800155c:	4808      	ldr	r0, [pc, #32]	; (8001580 <HAL_ETH_MspInit+0x198>)
 800155e:	f003 f8db 	bl	8004718 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	3738      	adds	r7, #56	; 0x38
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40028000 	.word	0x40028000
 8001570:	58024400 	.word	0x58024400
 8001574:	58020800 	.word	0x58020800
 8001578:	58020000 	.word	0x58020000
 800157c:	58020400 	.word	0x58020400
 8001580:	58021800 	.word	0x58021800

08001584 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b0b8      	sub	sp, #224	; 0xe0
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	22bc      	movs	r2, #188	; 0xbc
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f00d f92a 	bl	800e7fe <memset>
  if(hfdcan->Instance==FDCAN1)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a29      	ldr	r2, [pc, #164]	; (8001654 <HAL_FDCAN_MspInit+0xd0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d14a      	bne.n	800164a <HAL_FDCAN_MspInit+0xc6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80015b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015b8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80015ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80015be:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	4618      	mov	r0, r3
 80015c6:	f004 fc17 	bl	8005df8 <HAL_RCCEx_PeriphCLKConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80015d0:	f7ff fed0 	bl	8001374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80015d4:	4b20      	ldr	r3, [pc, #128]	; (8001658 <HAL_FDCAN_MspInit+0xd4>)
 80015d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80015da:	4a1f      	ldr	r2, [pc, #124]	; (8001658 <HAL_FDCAN_MspInit+0xd4>)
 80015dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80015e4:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <HAL_FDCAN_MspInit+0xd4>)
 80015e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80015ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f2:	4b19      	ldr	r3, [pc, #100]	; (8001658 <HAL_FDCAN_MspInit+0xd4>)
 80015f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f8:	4a17      	ldr	r2, [pc, #92]	; (8001658 <HAL_FDCAN_MspInit+0xd4>)
 80015fa:	f043 0308 	orr.w	r3, r3, #8
 80015fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_FDCAN_MspInit+0xd4>)
 8001604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001610:	2303      	movs	r3, #3
 8001612:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001628:	2309      	movs	r3, #9
 800162a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001632:	4619      	mov	r1, r3
 8001634:	4809      	ldr	r0, [pc, #36]	; (800165c <HAL_FDCAN_MspInit+0xd8>)
 8001636:	f003 f86f 	bl	8004718 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2105      	movs	r1, #5
 800163e:	2013      	movs	r0, #19
 8001640:	f000 fc70 	bl	8001f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001644:	2013      	movs	r0, #19
 8001646:	f000 fc87 	bl	8001f58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800164a:	bf00      	nop
 800164c:	37e0      	adds	r7, #224	; 0xe0
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	4000a000 	.word	0x4000a000
 8001658:	58024400 	.word	0x58024400
 800165c:	58020c00 	.word	0x58020c00

08001660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b0b8      	sub	sp, #224	; 0xe0
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	22bc      	movs	r2, #188	; 0xbc
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f00d f8bc 	bl	800e7fe <memset>
  if(huart->Instance==USART3)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a29      	ldr	r2, [pc, #164]	; (8001730 <HAL_UART_MspInit+0xd0>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d14a      	bne.n	8001726 <HAL_UART_MspInit+0xc6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001690:	2302      	movs	r3, #2
 8001692:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169a:	f107 0310 	add.w	r3, r7, #16
 800169e:	4618      	mov	r0, r3
 80016a0:	f004 fbaa 	bl	8005df8 <HAL_RCCEx_PeriphCLKConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016aa:	f7ff fe63 	bl	8001374 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016ae:	4b21      	ldr	r3, [pc, #132]	; (8001734 <HAL_UART_MspInit+0xd4>)
 80016b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016b4:	4a1f      	ldr	r2, [pc, #124]	; (8001734 <HAL_UART_MspInit+0xd4>)
 80016b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016be:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <HAL_UART_MspInit+0xd4>)
 80016c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_UART_MspInit+0xd4>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d2:	4a18      	ldr	r2, [pc, #96]	; (8001734 <HAL_UART_MspInit+0xd4>)
 80016d4:	f043 0308 	orr.w	r3, r3, #8
 80016d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_UART_MspInit+0xd4>)
 80016de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	2302      	movs	r3, #2
 80016f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001704:	2307      	movs	r3, #7
 8001706:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800170a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800170e:	4619      	mov	r1, r3
 8001710:	4809      	ldr	r0, [pc, #36]	; (8001738 <HAL_UART_MspInit+0xd8>)
 8001712:	f003 f801 	bl	8004718 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2105      	movs	r1, #5
 800171a:	2027      	movs	r0, #39	; 0x27
 800171c:	f000 fc02 	bl	8001f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001720:	2027      	movs	r0, #39	; 0x27
 8001722:	f000 fc19 	bl	8001f58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	37e0      	adds	r7, #224	; 0xe0
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40004800 	.word	0x40004800
 8001734:	58024400 	.word	0x58024400
 8001738:	58020c00 	.word	0x58020c00

0800173c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b0b8      	sub	sp, #224	; 0xe0
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	22bc      	movs	r2, #188	; 0xbc
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f00d f84e 	bl	800e7fe <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a2f      	ldr	r2, [pc, #188]	; (8001824 <HAL_PCD_MspInit+0xe8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d156      	bne.n	800181a <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800176c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001770:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001772:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001776:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177a:	f107 0310 	add.w	r3, r7, #16
 800177e:	4618      	mov	r0, r3
 8001780:	f004 fb3a 	bl	8005df8 <HAL_RCCEx_PeriphCLKConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800178a:	f7ff fdf3 	bl	8001374 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800178e:	f003 fb27 	bl	8004de0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	4b25      	ldr	r3, [pc, #148]	; (8001828 <HAL_PCD_MspInit+0xec>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001798:	4a23      	ldr	r2, [pc, #140]	; (8001828 <HAL_PCD_MspInit+0xec>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017a2:	4b21      	ldr	r3, [pc, #132]	; (8001828 <HAL_PCD_MspInit+0xec>)
 80017a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80017b0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80017b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80017ca:	230a      	movs	r3, #10
 80017cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017d4:	4619      	mov	r1, r3
 80017d6:	4815      	ldr	r0, [pc, #84]	; (800182c <HAL_PCD_MspInit+0xf0>)
 80017d8:	f002 ff9e 	bl	8004718 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80017f4:	4619      	mov	r1, r3
 80017f6:	480d      	ldr	r0, [pc, #52]	; (800182c <HAL_PCD_MspInit+0xf0>)
 80017f8:	f002 ff8e 	bl	8004718 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_PCD_MspInit+0xec>)
 80017fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <HAL_PCD_MspInit+0xec>)
 8001804:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001808:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_PCD_MspInit+0xec>)
 800180e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001812:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800181a:	bf00      	nop
 800181c:	37e0      	adds	r7, #224	; 0xe0
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40080000 	.word	0x40080000
 8001828:	58024400 	.word	0x58024400
 800182c:	58020000 	.word	0x58020000

08001830 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b090      	sub	sp, #64	; 0x40
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b0f      	cmp	r3, #15
 800183c:	d827      	bhi.n	800188e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800183e:	2200      	movs	r2, #0
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	2036      	movs	r0, #54	; 0x36
 8001844:	f000 fb6e 	bl	8001f24 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001848:	2036      	movs	r0, #54	; 0x36
 800184a:	f000 fb85 	bl	8001f58 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800184e:	4a29      	ldr	r2, [pc, #164]	; (80018f4 <HAL_InitTick+0xc4>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001854:	4b28      	ldr	r3, [pc, #160]	; (80018f8 <HAL_InitTick+0xc8>)
 8001856:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800185a:	4a27      	ldr	r2, [pc, #156]	; (80018f8 <HAL_InitTick+0xc8>)
 800185c:	f043 0310 	orr.w	r3, r3, #16
 8001860:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001864:	4b24      	ldr	r3, [pc, #144]	; (80018f8 <HAL_InitTick+0xc8>)
 8001866:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800186a:	f003 0310 	and.w	r3, r3, #16
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001872:	f107 0210 	add.w	r2, r7, #16
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f004 fa79 	bl	8005d74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001888:	2b00      	cmp	r3, #0
 800188a:	d106      	bne.n	800189a <HAL_InitTick+0x6a>
 800188c:	e001      	b.n	8001892 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e02b      	b.n	80018ea <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001892:	f004 fa43 	bl	8005d1c <HAL_RCC_GetPCLK1Freq>
 8001896:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001898:	e004      	b.n	80018a4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800189a:	f004 fa3f 	bl	8005d1c <HAL_RCC_GetPCLK1Freq>
 800189e:	4603      	mov	r3, r0
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a6:	4a15      	ldr	r2, [pc, #84]	; (80018fc <HAL_InitTick+0xcc>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	0c9b      	lsrs	r3, r3, #18
 80018ae:	3b01      	subs	r3, #1
 80018b0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018b2:	4b13      	ldr	r3, [pc, #76]	; (8001900 <HAL_InitTick+0xd0>)
 80018b4:	4a13      	ldr	r2, [pc, #76]	; (8001904 <HAL_InitTick+0xd4>)
 80018b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_InitTick+0xd0>)
 80018ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018be:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018c0:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <HAL_InitTick+0xd0>)
 80018c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018c4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_InitTick+0xd0>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <HAL_InitTick+0xd0>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018d2:	480b      	ldr	r0, [pc, #44]	; (8001900 <HAL_InitTick+0xd0>)
 80018d4:	f005 fdf8 	bl	80074c8 <HAL_TIM_Base_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d104      	bne.n	80018e8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018de:	4808      	ldr	r0, [pc, #32]	; (8001900 <HAL_InitTick+0xd0>)
 80018e0:	f005 fe54 	bl	800758c <HAL_TIM_Base_Start_IT>
 80018e4:	4603      	mov	r3, r0
 80018e6:	e000      	b.n	80018ea <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3740      	adds	r7, #64	; 0x40
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2400000c 	.word	0x2400000c
 80018f8:	58024400 	.word	0x58024400
 80018fc:	431bde83 	.word	0x431bde83
 8001900:	24000930 	.word	0x24000930
 8001904:	40001000 	.word	0x40001000

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800190c:	e7fe      	b.n	800190c <NMI_Handler+0x4>

0800190e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <HardFault_Handler+0x4>

08001914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <MemManage_Handler+0x4>

0800191a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <UsageFault_Handler+0x4>

08001926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001938:	4802      	ldr	r0, [pc, #8]	; (8001944 <FDCAN1_IT0_IRQHandler+0x10>)
 800193a:	f002 f9df 	bl	8003cfc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	24000240 	.word	0x24000240

08001948 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	//printf("In IRQ Handler\n");
	printf("IRQ Handler: %u\n", USART_DATA[0]);
 800194c:	4b05      	ldr	r3, [pc, #20]	; (8001964 <USART3_IRQHandler+0x1c>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	4805      	ldr	r0, [pc, #20]	; (8001968 <USART3_IRQHandler+0x20>)
 8001954:	f00c fff0 	bl	800e938 <iprintf>

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001958:	4804      	ldr	r0, [pc, #16]	; (800196c <USART3_IRQHandler+0x24>)
 800195a:	f006 fa9f 	bl	8007e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	24000910 	.word	0x24000910
 8001968:	0800fd28 	.word	0x0800fd28
 800196c:	240002e0 	.word	0x240002e0

08001970 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <TIM6_DAC_IRQHandler+0x10>)
 8001976:	f005 fe81 	bl	800767c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	24000930 	.word	0x24000930

08001984 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
	return 1;
 8001988:	2301      	movs	r3, #1
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_kill>:

int _kill(int pid, int sig)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800199e:	f00c fdfd 	bl	800e59c <__errno>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2216      	movs	r2, #22
 80019a6:	601a      	str	r2, [r3, #0]
	return -1;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_exit>:

void _exit (int status)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ffe7 	bl	8001994 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019c6:	e7fe      	b.n	80019c6 <_exit+0x12>

080019c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	e00a      	b.n	80019f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019da:	f7ff fafd 	bl	8000fd8 <__io_getchar>
 80019de:	4601      	mov	r1, r0
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	60ba      	str	r2, [r7, #8]
 80019e6:	b2ca      	uxtb	r2, r1
 80019e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dbf0      	blt.n	80019da <_read+0x12>
	}

return len;
 80019f8:	687b      	ldr	r3, [r7, #4]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	e009      	b.n	8001a28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	60ba      	str	r2, [r7, #8]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fac9 	bl	8000fb4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbf1      	blt.n	8001a14 <_write+0x12>
	}
	return len;
 8001a30:	687b      	ldr	r3, [r7, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_close>:

int _close(int file)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
	return -1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a62:	605a      	str	r2, [r3, #4]
	return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_isatty>:

int _isatty(int file)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
	return 1;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
	return 0;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aac:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <_sbrk+0x5c>)
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <_sbrk+0x60>)
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <_sbrk+0x64>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <_sbrk+0x68>)
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d207      	bcs.n	8001ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad4:	f00c fd62 	bl	800e59c <__errno>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	220c      	movs	r2, #12
 8001adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ae2:	e009      	b.n	8001af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <_sbrk+0x64>)
 8001af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	24080000 	.word	0x24080000
 8001b04:	00000400 	.word	0x00000400
 8001b08:	2400097c 	.word	0x2400097c
 8001b0c:	240053a8 	.word	0x240053a8

08001b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b14:	4b37      	ldr	r3, [pc, #220]	; (8001bf4 <SystemInit+0xe4>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1a:	4a36      	ldr	r2, [pc, #216]	; (8001bf4 <SystemInit+0xe4>)
 8001b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b24:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <SystemInit+0xe8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 030f 	and.w	r3, r3, #15
 8001b2c:	2b06      	cmp	r3, #6
 8001b2e:	d807      	bhi.n	8001b40 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b30:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <SystemInit+0xe8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f023 030f 	bic.w	r3, r3, #15
 8001b38:	4a2f      	ldr	r2, [pc, #188]	; (8001bf8 <SystemInit+0xe8>)
 8001b3a:	f043 0307 	orr.w	r3, r3, #7
 8001b3e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b40:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <SystemInit+0xec>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a2d      	ldr	r2, [pc, #180]	; (8001bfc <SystemInit+0xec>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b4c:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <SystemInit+0xec>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b52:	4b2a      	ldr	r3, [pc, #168]	; (8001bfc <SystemInit+0xec>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4929      	ldr	r1, [pc, #164]	; (8001bfc <SystemInit+0xec>)
 8001b58:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <SystemInit+0xf0>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b5e:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <SystemInit+0xe8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d007      	beq.n	8001b7a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b6a:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <SystemInit+0xe8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 030f 	bic.w	r3, r3, #15
 8001b72:	4a21      	ldr	r2, [pc, #132]	; (8001bf8 <SystemInit+0xe8>)
 8001b74:	f043 0307 	orr.w	r3, r3, #7
 8001b78:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <SystemInit+0xec>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <SystemInit+0xec>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <SystemInit+0xec>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <SystemInit+0xec>)
 8001b8e:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <SystemInit+0xf4>)
 8001b90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <SystemInit+0xec>)
 8001b94:	4a1c      	ldr	r2, [pc, #112]	; (8001c08 <SystemInit+0xf8>)
 8001b96:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b98:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <SystemInit+0xec>)
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <SystemInit+0xfc>)
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <SystemInit+0xec>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <SystemInit+0xec>)
 8001ba6:	4a19      	ldr	r2, [pc, #100]	; (8001c0c <SystemInit+0xfc>)
 8001ba8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <SystemInit+0xec>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <SystemInit+0xec>)
 8001bb2:	4a16      	ldr	r2, [pc, #88]	; (8001c0c <SystemInit+0xfc>)
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <SystemInit+0xec>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <SystemInit+0xec>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <SystemInit+0xec>)
 8001bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <SystemInit+0xec>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <SystemInit+0x100>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <SystemInit+0x104>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bda:	d202      	bcs.n	8001be2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001bdc:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <SystemInit+0x108>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <SystemInit+0x10c>)
 8001be4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001be8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00
 8001bf8:	52002000 	.word	0x52002000
 8001bfc:	58024400 	.word	0x58024400
 8001c00:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c04:	02020200 	.word	0x02020200
 8001c08:	01ff0000 	.word	0x01ff0000
 8001c0c:	01010280 	.word	0x01010280
 8001c10:	5c001000 	.word	0x5c001000
 8001c14:	ffff0000 	.word	0xffff0000
 8001c18:	51008108 	.word	0x51008108
 8001c1c:	52004000 	.word	0x52004000

08001c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c24:	f7ff ff74 	bl	8001b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c28:	480c      	ldr	r0, [pc, #48]	; (8001c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c2a:	490d      	ldr	r1, [pc, #52]	; (8001c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c30:	e002      	b.n	8001c38 <LoopCopyDataInit>

08001c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c36:	3304      	adds	r3, #4

08001c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c3c:	d3f9      	bcc.n	8001c32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c40:	4c0a      	ldr	r4, [pc, #40]	; (8001c6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c44:	e001      	b.n	8001c4a <LoopFillZerobss>

08001c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c48:	3204      	adds	r2, #4

08001c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c4c:	d3fb      	bcc.n	8001c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c4e:	f00c fda1 	bl	800e794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c52:	f7fe fd3f 	bl	80006d4 <main>
  bx  lr
 8001c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c58:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c60:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8001c64:	08010060 	.word	0x08010060
  ldr r2, =_sbss
 8001c68:	2400013c 	.word	0x2400013c
  ldr r4, =_ebss
 8001c6c:	240053a4 	.word	0x240053a4

08001c70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c70:	e7fe      	b.n	8001c70 <ADC3_IRQHandler>
	...

08001c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c7a:	2003      	movs	r0, #3
 8001c7c:	f000 f947 	bl	8001f0e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c80:	f003 fea2 	bl	80059c8 <HAL_RCC_GetSysClockFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <HAL_Init+0x68>)
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	0a1b      	lsrs	r3, r3, #8
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	4913      	ldr	r1, [pc, #76]	; (8001ce0 <HAL_Init+0x6c>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_Init+0x68>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <HAL_Init+0x6c>)
 8001ca8:	5cd3      	ldrb	r3, [r2, r3]
 8001caa:	f003 031f 	and.w	r3, r3, #31
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb4:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <HAL_Init+0x70>)
 8001cb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <HAL_Init+0x74>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cbe:	200f      	movs	r0, #15
 8001cc0:	f7ff fdb6 	bl	8001830 <HAL_InitTick>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e002      	b.n	8001cd4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cce:	f7ff fb6d 	bl	80013ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	58024400 	.word	0x58024400
 8001ce0:	0800fec0 	.word	0x0800fec0
 8001ce4:	24000008 	.word	0x24000008
 8001ce8:	24000004 	.word	0x24000004

08001cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_IncTick+0x20>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_IncTick+0x24>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <HAL_IncTick+0x24>)
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	24000010 	.word	0x24000010
 8001d10:	24000980 	.word	0x24000980

08001d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return uwTick;
 8001d18:	4b03      	ldr	r3, [pc, #12]	; (8001d28 <HAL_GetTick+0x14>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	24000980 	.word	0x24000980

08001d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d34:	f7ff ffee 	bl	8001d14 <HAL_GetTick>
 8001d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d44:	d005      	beq.n	8001d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_Delay+0x44>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4413      	add	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d52:	bf00      	nop
 8001d54:	f7ff ffde 	bl	8001d14 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d8f7      	bhi.n	8001d54 <HAL_Delay+0x28>
  {
  }
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	24000010 	.word	0x24000010

08001d74 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d78:	4b03      	ldr	r3, [pc, #12]	; (8001d88 <HAL_GetREVID+0x14>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	0c1b      	lsrs	r3, r3, #16
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	5c001000 	.word	0x5c001000

08001d8c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001d9c:	4904      	ldr	r1, [pc, #16]	; (8001db0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	58000400 	.word	0x58000400

08001db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <__NVIC_SetPriorityGrouping+0x40>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de2:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <__NVIC_SetPriorityGrouping+0x40>)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	60d3      	str	r3, [r2, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00
 8001df8:	05fa0000 	.word	0x05fa0000

08001dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e00:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <__NVIC_GetPriorityGrouping+0x18>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	f003 0307 	and.w	r3, r3, #7
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	db0b      	blt.n	8001e42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e2a:	88fb      	ldrh	r3, [r7, #6]
 8001e2c:	f003 021f 	and.w	r2, r3, #31
 8001e30:	4907      	ldr	r1, [pc, #28]	; (8001e50 <__NVIC_EnableIRQ+0x38>)
 8001e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	2001      	movs	r0, #1
 8001e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000e100 	.word	0xe000e100

08001e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	6039      	str	r1, [r7, #0]
 8001e5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db0a      	blt.n	8001e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	490c      	ldr	r1, [pc, #48]	; (8001ea0 <__NVIC_SetPriority+0x4c>)
 8001e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e72:	0112      	lsls	r2, r2, #4
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	440b      	add	r3, r1
 8001e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e7c:	e00a      	b.n	8001e94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	4908      	ldr	r1, [pc, #32]	; (8001ea4 <__NVIC_SetPriority+0x50>)
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	3b04      	subs	r3, #4
 8001e8c:	0112      	lsls	r2, r2, #4
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	440b      	add	r3, r1
 8001e92:	761a      	strb	r2, [r3, #24]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000e100 	.word	0xe000e100
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b089      	sub	sp, #36	; 0x24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f1c3 0307 	rsb	r3, r3, #7
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	bf28      	it	cs
 8001ec6:	2304      	movcs	r3, #4
 8001ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d902      	bls.n	8001ed8 <NVIC_EncodePriority+0x30>
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3b03      	subs	r3, #3
 8001ed6:	e000      	b.n	8001eda <NVIC_EncodePriority+0x32>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	401a      	ands	r2, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8001efa:	43d9      	mvns	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f00:	4313      	orrs	r3, r2
         );
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3724      	adds	r7, #36	; 0x24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ff4c 	bl	8001db4 <__NVIC_SetPriorityGrouping>
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f32:	f7ff ff63 	bl	8001dfc <__NVIC_GetPriorityGrouping>
 8001f36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	68b9      	ldr	r1, [r7, #8]
 8001f3c:	6978      	ldr	r0, [r7, #20]
 8001f3e:	f7ff ffb3 	bl	8001ea8 <NVIC_EncodePriority>
 8001f42:	4602      	mov	r2, r0
 8001f44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff82 	bl	8001e54 <__NVIC_SetPriority>
}
 8001f50:	bf00      	nop
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ff56 	bl	8001e18 <__NVIC_EnableIRQ>
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001f7c:	f7ff feca 	bl	8001d14 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e2dc      	b.n	8002546 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d008      	beq.n	8001faa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2280      	movs	r2, #128	; 0x80
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e2cd      	b.n	8002546 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a76      	ldr	r2, [pc, #472]	; (8002188 <HAL_DMA_Abort+0x214>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d04a      	beq.n	800204a <HAL_DMA_Abort+0xd6>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a74      	ldr	r2, [pc, #464]	; (800218c <HAL_DMA_Abort+0x218>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d045      	beq.n	800204a <HAL_DMA_Abort+0xd6>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a73      	ldr	r2, [pc, #460]	; (8002190 <HAL_DMA_Abort+0x21c>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d040      	beq.n	800204a <HAL_DMA_Abort+0xd6>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a71      	ldr	r2, [pc, #452]	; (8002194 <HAL_DMA_Abort+0x220>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d03b      	beq.n	800204a <HAL_DMA_Abort+0xd6>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a70      	ldr	r2, [pc, #448]	; (8002198 <HAL_DMA_Abort+0x224>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d036      	beq.n	800204a <HAL_DMA_Abort+0xd6>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a6e      	ldr	r2, [pc, #440]	; (800219c <HAL_DMA_Abort+0x228>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d031      	beq.n	800204a <HAL_DMA_Abort+0xd6>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a6d      	ldr	r2, [pc, #436]	; (80021a0 <HAL_DMA_Abort+0x22c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d02c      	beq.n	800204a <HAL_DMA_Abort+0xd6>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a6b      	ldr	r2, [pc, #428]	; (80021a4 <HAL_DMA_Abort+0x230>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d027      	beq.n	800204a <HAL_DMA_Abort+0xd6>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a6a      	ldr	r2, [pc, #424]	; (80021a8 <HAL_DMA_Abort+0x234>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d022      	beq.n	800204a <HAL_DMA_Abort+0xd6>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a68      	ldr	r2, [pc, #416]	; (80021ac <HAL_DMA_Abort+0x238>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d01d      	beq.n	800204a <HAL_DMA_Abort+0xd6>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a67      	ldr	r2, [pc, #412]	; (80021b0 <HAL_DMA_Abort+0x23c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d018      	beq.n	800204a <HAL_DMA_Abort+0xd6>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a65      	ldr	r2, [pc, #404]	; (80021b4 <HAL_DMA_Abort+0x240>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_DMA_Abort+0xd6>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a64      	ldr	r2, [pc, #400]	; (80021b8 <HAL_DMA_Abort+0x244>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d00e      	beq.n	800204a <HAL_DMA_Abort+0xd6>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a62      	ldr	r2, [pc, #392]	; (80021bc <HAL_DMA_Abort+0x248>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d009      	beq.n	800204a <HAL_DMA_Abort+0xd6>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a61      	ldr	r2, [pc, #388]	; (80021c0 <HAL_DMA_Abort+0x24c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d004      	beq.n	800204a <HAL_DMA_Abort+0xd6>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a5f      	ldr	r2, [pc, #380]	; (80021c4 <HAL_DMA_Abort+0x250>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_DMA_Abort+0xda>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_DMA_Abort+0xdc>
 800204e:	2300      	movs	r3, #0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d013      	beq.n	800207c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 021e 	bic.w	r2, r2, #30
 8002062:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	695a      	ldr	r2, [r3, #20]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002072:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	e00a      	b.n	8002092 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 020e 	bic.w	r2, r2, #14
 800208a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a3c      	ldr	r2, [pc, #240]	; (8002188 <HAL_DMA_Abort+0x214>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d072      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a3a      	ldr	r2, [pc, #232]	; (800218c <HAL_DMA_Abort+0x218>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d06d      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a39      	ldr	r2, [pc, #228]	; (8002190 <HAL_DMA_Abort+0x21c>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d068      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a37      	ldr	r2, [pc, #220]	; (8002194 <HAL_DMA_Abort+0x220>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d063      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a36      	ldr	r2, [pc, #216]	; (8002198 <HAL_DMA_Abort+0x224>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d05e      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a34      	ldr	r2, [pc, #208]	; (800219c <HAL_DMA_Abort+0x228>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d059      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a33      	ldr	r2, [pc, #204]	; (80021a0 <HAL_DMA_Abort+0x22c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d054      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a31      	ldr	r2, [pc, #196]	; (80021a4 <HAL_DMA_Abort+0x230>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d04f      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a30      	ldr	r2, [pc, #192]	; (80021a8 <HAL_DMA_Abort+0x234>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d04a      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a2e      	ldr	r2, [pc, #184]	; (80021ac <HAL_DMA_Abort+0x238>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d045      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a2d      	ldr	r2, [pc, #180]	; (80021b0 <HAL_DMA_Abort+0x23c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d040      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a2b      	ldr	r2, [pc, #172]	; (80021b4 <HAL_DMA_Abort+0x240>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d03b      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a2a      	ldr	r2, [pc, #168]	; (80021b8 <HAL_DMA_Abort+0x244>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d036      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a28      	ldr	r2, [pc, #160]	; (80021bc <HAL_DMA_Abort+0x248>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d031      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a27      	ldr	r2, [pc, #156]	; (80021c0 <HAL_DMA_Abort+0x24c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d02c      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a25      	ldr	r2, [pc, #148]	; (80021c4 <HAL_DMA_Abort+0x250>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d027      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a24      	ldr	r2, [pc, #144]	; (80021c8 <HAL_DMA_Abort+0x254>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d022      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a22      	ldr	r2, [pc, #136]	; (80021cc <HAL_DMA_Abort+0x258>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d01d      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a21      	ldr	r2, [pc, #132]	; (80021d0 <HAL_DMA_Abort+0x25c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d018      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a1f      	ldr	r2, [pc, #124]	; (80021d4 <HAL_DMA_Abort+0x260>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1e      	ldr	r2, [pc, #120]	; (80021d8 <HAL_DMA_Abort+0x264>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00e      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <HAL_DMA_Abort+0x268>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d009      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <HAL_DMA_Abort+0x26c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d004      	beq.n	8002182 <HAL_DMA_Abort+0x20e>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a19      	ldr	r2, [pc, #100]	; (80021e4 <HAL_DMA_Abort+0x270>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d132      	bne.n	80021e8 <HAL_DMA_Abort+0x274>
 8002182:	2301      	movs	r3, #1
 8002184:	e031      	b.n	80021ea <HAL_DMA_Abort+0x276>
 8002186:	bf00      	nop
 8002188:	40020010 	.word	0x40020010
 800218c:	40020028 	.word	0x40020028
 8002190:	40020040 	.word	0x40020040
 8002194:	40020058 	.word	0x40020058
 8002198:	40020070 	.word	0x40020070
 800219c:	40020088 	.word	0x40020088
 80021a0:	400200a0 	.word	0x400200a0
 80021a4:	400200b8 	.word	0x400200b8
 80021a8:	40020410 	.word	0x40020410
 80021ac:	40020428 	.word	0x40020428
 80021b0:	40020440 	.word	0x40020440
 80021b4:	40020458 	.word	0x40020458
 80021b8:	40020470 	.word	0x40020470
 80021bc:	40020488 	.word	0x40020488
 80021c0:	400204a0 	.word	0x400204a0
 80021c4:	400204b8 	.word	0x400204b8
 80021c8:	58025408 	.word	0x58025408
 80021cc:	5802541c 	.word	0x5802541c
 80021d0:	58025430 	.word	0x58025430
 80021d4:	58025444 	.word	0x58025444
 80021d8:	58025458 	.word	0x58025458
 80021dc:	5802546c 	.word	0x5802546c
 80021e0:	58025480 	.word	0x58025480
 80021e4:	58025494 	.word	0x58025494
 80021e8:	2300      	movs	r3, #0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d007      	beq.n	80021fe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a6d      	ldr	r2, [pc, #436]	; (80023b8 <HAL_DMA_Abort+0x444>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d04a      	beq.n	800229e <HAL_DMA_Abort+0x32a>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a6b      	ldr	r2, [pc, #428]	; (80023bc <HAL_DMA_Abort+0x448>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d045      	beq.n	800229e <HAL_DMA_Abort+0x32a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a6a      	ldr	r2, [pc, #424]	; (80023c0 <HAL_DMA_Abort+0x44c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d040      	beq.n	800229e <HAL_DMA_Abort+0x32a>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a68      	ldr	r2, [pc, #416]	; (80023c4 <HAL_DMA_Abort+0x450>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d03b      	beq.n	800229e <HAL_DMA_Abort+0x32a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a67      	ldr	r2, [pc, #412]	; (80023c8 <HAL_DMA_Abort+0x454>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d036      	beq.n	800229e <HAL_DMA_Abort+0x32a>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a65      	ldr	r2, [pc, #404]	; (80023cc <HAL_DMA_Abort+0x458>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d031      	beq.n	800229e <HAL_DMA_Abort+0x32a>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a64      	ldr	r2, [pc, #400]	; (80023d0 <HAL_DMA_Abort+0x45c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d02c      	beq.n	800229e <HAL_DMA_Abort+0x32a>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a62      	ldr	r2, [pc, #392]	; (80023d4 <HAL_DMA_Abort+0x460>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d027      	beq.n	800229e <HAL_DMA_Abort+0x32a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a61      	ldr	r2, [pc, #388]	; (80023d8 <HAL_DMA_Abort+0x464>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d022      	beq.n	800229e <HAL_DMA_Abort+0x32a>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a5f      	ldr	r2, [pc, #380]	; (80023dc <HAL_DMA_Abort+0x468>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d01d      	beq.n	800229e <HAL_DMA_Abort+0x32a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a5e      	ldr	r2, [pc, #376]	; (80023e0 <HAL_DMA_Abort+0x46c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d018      	beq.n	800229e <HAL_DMA_Abort+0x32a>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a5c      	ldr	r2, [pc, #368]	; (80023e4 <HAL_DMA_Abort+0x470>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d013      	beq.n	800229e <HAL_DMA_Abort+0x32a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a5b      	ldr	r2, [pc, #364]	; (80023e8 <HAL_DMA_Abort+0x474>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d00e      	beq.n	800229e <HAL_DMA_Abort+0x32a>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a59      	ldr	r2, [pc, #356]	; (80023ec <HAL_DMA_Abort+0x478>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d009      	beq.n	800229e <HAL_DMA_Abort+0x32a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a58      	ldr	r2, [pc, #352]	; (80023f0 <HAL_DMA_Abort+0x47c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d004      	beq.n	800229e <HAL_DMA_Abort+0x32a>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a56      	ldr	r2, [pc, #344]	; (80023f4 <HAL_DMA_Abort+0x480>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d108      	bne.n	80022b0 <HAL_DMA_Abort+0x33c>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0201 	bic.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	e007      	b.n	80022c0 <HAL_DMA_Abort+0x34c>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80022c0:	e013      	b.n	80022ea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022c2:	f7ff fd27 	bl	8001d14 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b05      	cmp	r3, #5
 80022ce:	d90c      	bls.n	80022ea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2220      	movs	r2, #32
 80022d4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2203      	movs	r2, #3
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e12d      	b.n	8002546 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1e5      	bne.n	80022c2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a2f      	ldr	r2, [pc, #188]	; (80023b8 <HAL_DMA_Abort+0x444>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d04a      	beq.n	8002396 <HAL_DMA_Abort+0x422>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a2d      	ldr	r2, [pc, #180]	; (80023bc <HAL_DMA_Abort+0x448>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d045      	beq.n	8002396 <HAL_DMA_Abort+0x422>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a2c      	ldr	r2, [pc, #176]	; (80023c0 <HAL_DMA_Abort+0x44c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d040      	beq.n	8002396 <HAL_DMA_Abort+0x422>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a2a      	ldr	r2, [pc, #168]	; (80023c4 <HAL_DMA_Abort+0x450>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d03b      	beq.n	8002396 <HAL_DMA_Abort+0x422>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a29      	ldr	r2, [pc, #164]	; (80023c8 <HAL_DMA_Abort+0x454>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d036      	beq.n	8002396 <HAL_DMA_Abort+0x422>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a27      	ldr	r2, [pc, #156]	; (80023cc <HAL_DMA_Abort+0x458>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d031      	beq.n	8002396 <HAL_DMA_Abort+0x422>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a26      	ldr	r2, [pc, #152]	; (80023d0 <HAL_DMA_Abort+0x45c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d02c      	beq.n	8002396 <HAL_DMA_Abort+0x422>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a24      	ldr	r2, [pc, #144]	; (80023d4 <HAL_DMA_Abort+0x460>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d027      	beq.n	8002396 <HAL_DMA_Abort+0x422>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a23      	ldr	r2, [pc, #140]	; (80023d8 <HAL_DMA_Abort+0x464>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d022      	beq.n	8002396 <HAL_DMA_Abort+0x422>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a21      	ldr	r2, [pc, #132]	; (80023dc <HAL_DMA_Abort+0x468>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d01d      	beq.n	8002396 <HAL_DMA_Abort+0x422>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a20      	ldr	r2, [pc, #128]	; (80023e0 <HAL_DMA_Abort+0x46c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d018      	beq.n	8002396 <HAL_DMA_Abort+0x422>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1e      	ldr	r2, [pc, #120]	; (80023e4 <HAL_DMA_Abort+0x470>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d013      	beq.n	8002396 <HAL_DMA_Abort+0x422>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a1d      	ldr	r2, [pc, #116]	; (80023e8 <HAL_DMA_Abort+0x474>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00e      	beq.n	8002396 <HAL_DMA_Abort+0x422>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1b      	ldr	r2, [pc, #108]	; (80023ec <HAL_DMA_Abort+0x478>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d009      	beq.n	8002396 <HAL_DMA_Abort+0x422>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a1a      	ldr	r2, [pc, #104]	; (80023f0 <HAL_DMA_Abort+0x47c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d004      	beq.n	8002396 <HAL_DMA_Abort+0x422>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <HAL_DMA_Abort+0x480>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d101      	bne.n	800239a <HAL_DMA_Abort+0x426>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_DMA_Abort+0x428>
 800239a:	2300      	movs	r3, #0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d02b      	beq.n	80023f8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	223f      	movs	r2, #63	; 0x3f
 80023b0:	409a      	lsls	r2, r3
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	e02a      	b.n	800240e <HAL_DMA_Abort+0x49a>
 80023b8:	40020010 	.word	0x40020010
 80023bc:	40020028 	.word	0x40020028
 80023c0:	40020040 	.word	0x40020040
 80023c4:	40020058 	.word	0x40020058
 80023c8:	40020070 	.word	0x40020070
 80023cc:	40020088 	.word	0x40020088
 80023d0:	400200a0 	.word	0x400200a0
 80023d4:	400200b8 	.word	0x400200b8
 80023d8:	40020410 	.word	0x40020410
 80023dc:	40020428 	.word	0x40020428
 80023e0:	40020440 	.word	0x40020440
 80023e4:	40020458 	.word	0x40020458
 80023e8:	40020470 	.word	0x40020470
 80023ec:	40020488 	.word	0x40020488
 80023f0:	400204a0 	.word	0x400204a0
 80023f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002402:	f003 031f 	and.w	r3, r3, #31
 8002406:	2201      	movs	r2, #1
 8002408:	409a      	lsls	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a4f      	ldr	r2, [pc, #316]	; (8002550 <HAL_DMA_Abort+0x5dc>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d072      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a4d      	ldr	r2, [pc, #308]	; (8002554 <HAL_DMA_Abort+0x5e0>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d06d      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a4c      	ldr	r2, [pc, #304]	; (8002558 <HAL_DMA_Abort+0x5e4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d068      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a4a      	ldr	r2, [pc, #296]	; (800255c <HAL_DMA_Abort+0x5e8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d063      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a49      	ldr	r2, [pc, #292]	; (8002560 <HAL_DMA_Abort+0x5ec>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d05e      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a47      	ldr	r2, [pc, #284]	; (8002564 <HAL_DMA_Abort+0x5f0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d059      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a46      	ldr	r2, [pc, #280]	; (8002568 <HAL_DMA_Abort+0x5f4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d054      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a44      	ldr	r2, [pc, #272]	; (800256c <HAL_DMA_Abort+0x5f8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d04f      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a43      	ldr	r2, [pc, #268]	; (8002570 <HAL_DMA_Abort+0x5fc>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d04a      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a41      	ldr	r2, [pc, #260]	; (8002574 <HAL_DMA_Abort+0x600>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d045      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a40      	ldr	r2, [pc, #256]	; (8002578 <HAL_DMA_Abort+0x604>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d040      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a3e      	ldr	r2, [pc, #248]	; (800257c <HAL_DMA_Abort+0x608>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d03b      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a3d      	ldr	r2, [pc, #244]	; (8002580 <HAL_DMA_Abort+0x60c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d036      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a3b      	ldr	r2, [pc, #236]	; (8002584 <HAL_DMA_Abort+0x610>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d031      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a3a      	ldr	r2, [pc, #232]	; (8002588 <HAL_DMA_Abort+0x614>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d02c      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a38      	ldr	r2, [pc, #224]	; (800258c <HAL_DMA_Abort+0x618>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d027      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a37      	ldr	r2, [pc, #220]	; (8002590 <HAL_DMA_Abort+0x61c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d022      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a35      	ldr	r2, [pc, #212]	; (8002594 <HAL_DMA_Abort+0x620>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d01d      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a34      	ldr	r2, [pc, #208]	; (8002598 <HAL_DMA_Abort+0x624>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d018      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a32      	ldr	r2, [pc, #200]	; (800259c <HAL_DMA_Abort+0x628>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a31      	ldr	r2, [pc, #196]	; (80025a0 <HAL_DMA_Abort+0x62c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00e      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a2f      	ldr	r2, [pc, #188]	; (80025a4 <HAL_DMA_Abort+0x630>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d009      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a2e      	ldr	r2, [pc, #184]	; (80025a8 <HAL_DMA_Abort+0x634>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d004      	beq.n	80024fe <HAL_DMA_Abort+0x58a>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a2c      	ldr	r2, [pc, #176]	; (80025ac <HAL_DMA_Abort+0x638>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <HAL_DMA_Abort+0x58e>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <HAL_DMA_Abort+0x590>
 8002502:	2300      	movs	r3, #0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d015      	beq.n	8002534 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002510:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00c      	beq.n	8002534 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002524:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002528:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002532:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40020010 	.word	0x40020010
 8002554:	40020028 	.word	0x40020028
 8002558:	40020040 	.word	0x40020040
 800255c:	40020058 	.word	0x40020058
 8002560:	40020070 	.word	0x40020070
 8002564:	40020088 	.word	0x40020088
 8002568:	400200a0 	.word	0x400200a0
 800256c:	400200b8 	.word	0x400200b8
 8002570:	40020410 	.word	0x40020410
 8002574:	40020428 	.word	0x40020428
 8002578:	40020440 	.word	0x40020440
 800257c:	40020458 	.word	0x40020458
 8002580:	40020470 	.word	0x40020470
 8002584:	40020488 	.word	0x40020488
 8002588:	400204a0 	.word	0x400204a0
 800258c:	400204b8 	.word	0x400204b8
 8002590:	58025408 	.word	0x58025408
 8002594:	5802541c 	.word	0x5802541c
 8002598:	58025430 	.word	0x58025430
 800259c:	58025444 	.word	0x58025444
 80025a0:	58025458 	.word	0x58025458
 80025a4:	5802546c 	.word	0x5802546c
 80025a8:	58025480 	.word	0x58025480
 80025ac:	58025494 	.word	0x58025494

080025b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e237      	b.n	8002a32 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d004      	beq.n	80025d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2280      	movs	r2, #128	; 0x80
 80025d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e22c      	b.n	8002a32 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a5c      	ldr	r2, [pc, #368]	; (8002750 <HAL_DMA_Abort_IT+0x1a0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d04a      	beq.n	8002678 <HAL_DMA_Abort_IT+0xc8>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a5b      	ldr	r2, [pc, #364]	; (8002754 <HAL_DMA_Abort_IT+0x1a4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d045      	beq.n	8002678 <HAL_DMA_Abort_IT+0xc8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a59      	ldr	r2, [pc, #356]	; (8002758 <HAL_DMA_Abort_IT+0x1a8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d040      	beq.n	8002678 <HAL_DMA_Abort_IT+0xc8>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a58      	ldr	r2, [pc, #352]	; (800275c <HAL_DMA_Abort_IT+0x1ac>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d03b      	beq.n	8002678 <HAL_DMA_Abort_IT+0xc8>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a56      	ldr	r2, [pc, #344]	; (8002760 <HAL_DMA_Abort_IT+0x1b0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d036      	beq.n	8002678 <HAL_DMA_Abort_IT+0xc8>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a55      	ldr	r2, [pc, #340]	; (8002764 <HAL_DMA_Abort_IT+0x1b4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d031      	beq.n	8002678 <HAL_DMA_Abort_IT+0xc8>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a53      	ldr	r2, [pc, #332]	; (8002768 <HAL_DMA_Abort_IT+0x1b8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d02c      	beq.n	8002678 <HAL_DMA_Abort_IT+0xc8>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a52      	ldr	r2, [pc, #328]	; (800276c <HAL_DMA_Abort_IT+0x1bc>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d027      	beq.n	8002678 <HAL_DMA_Abort_IT+0xc8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a50      	ldr	r2, [pc, #320]	; (8002770 <HAL_DMA_Abort_IT+0x1c0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d022      	beq.n	8002678 <HAL_DMA_Abort_IT+0xc8>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a4f      	ldr	r2, [pc, #316]	; (8002774 <HAL_DMA_Abort_IT+0x1c4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d01d      	beq.n	8002678 <HAL_DMA_Abort_IT+0xc8>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a4d      	ldr	r2, [pc, #308]	; (8002778 <HAL_DMA_Abort_IT+0x1c8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d018      	beq.n	8002678 <HAL_DMA_Abort_IT+0xc8>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a4c      	ldr	r2, [pc, #304]	; (800277c <HAL_DMA_Abort_IT+0x1cc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d013      	beq.n	8002678 <HAL_DMA_Abort_IT+0xc8>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a4a      	ldr	r2, [pc, #296]	; (8002780 <HAL_DMA_Abort_IT+0x1d0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00e      	beq.n	8002678 <HAL_DMA_Abort_IT+0xc8>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a49      	ldr	r2, [pc, #292]	; (8002784 <HAL_DMA_Abort_IT+0x1d4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d009      	beq.n	8002678 <HAL_DMA_Abort_IT+0xc8>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a47      	ldr	r2, [pc, #284]	; (8002788 <HAL_DMA_Abort_IT+0x1d8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d004      	beq.n	8002678 <HAL_DMA_Abort_IT+0xc8>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a46      	ldr	r2, [pc, #280]	; (800278c <HAL_DMA_Abort_IT+0x1dc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d101      	bne.n	800267c <HAL_DMA_Abort_IT+0xcc>
 8002678:	2301      	movs	r3, #1
 800267a:	e000      	b.n	800267e <HAL_DMA_Abort_IT+0xce>
 800267c:	2300      	movs	r3, #0
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8086 	beq.w	8002790 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2204      	movs	r2, #4
 8002688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a2f      	ldr	r2, [pc, #188]	; (8002750 <HAL_DMA_Abort_IT+0x1a0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d04a      	beq.n	800272c <HAL_DMA_Abort_IT+0x17c>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a2e      	ldr	r2, [pc, #184]	; (8002754 <HAL_DMA_Abort_IT+0x1a4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d045      	beq.n	800272c <HAL_DMA_Abort_IT+0x17c>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a2c      	ldr	r2, [pc, #176]	; (8002758 <HAL_DMA_Abort_IT+0x1a8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d040      	beq.n	800272c <HAL_DMA_Abort_IT+0x17c>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2b      	ldr	r2, [pc, #172]	; (800275c <HAL_DMA_Abort_IT+0x1ac>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d03b      	beq.n	800272c <HAL_DMA_Abort_IT+0x17c>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a29      	ldr	r2, [pc, #164]	; (8002760 <HAL_DMA_Abort_IT+0x1b0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d036      	beq.n	800272c <HAL_DMA_Abort_IT+0x17c>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a28      	ldr	r2, [pc, #160]	; (8002764 <HAL_DMA_Abort_IT+0x1b4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d031      	beq.n	800272c <HAL_DMA_Abort_IT+0x17c>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a26      	ldr	r2, [pc, #152]	; (8002768 <HAL_DMA_Abort_IT+0x1b8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d02c      	beq.n	800272c <HAL_DMA_Abort_IT+0x17c>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a25      	ldr	r2, [pc, #148]	; (800276c <HAL_DMA_Abort_IT+0x1bc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d027      	beq.n	800272c <HAL_DMA_Abort_IT+0x17c>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a23      	ldr	r2, [pc, #140]	; (8002770 <HAL_DMA_Abort_IT+0x1c0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d022      	beq.n	800272c <HAL_DMA_Abort_IT+0x17c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a22      	ldr	r2, [pc, #136]	; (8002774 <HAL_DMA_Abort_IT+0x1c4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d01d      	beq.n	800272c <HAL_DMA_Abort_IT+0x17c>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a20      	ldr	r2, [pc, #128]	; (8002778 <HAL_DMA_Abort_IT+0x1c8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d018      	beq.n	800272c <HAL_DMA_Abort_IT+0x17c>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1f      	ldr	r2, [pc, #124]	; (800277c <HAL_DMA_Abort_IT+0x1cc>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d013      	beq.n	800272c <HAL_DMA_Abort_IT+0x17c>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1d      	ldr	r2, [pc, #116]	; (8002780 <HAL_DMA_Abort_IT+0x1d0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00e      	beq.n	800272c <HAL_DMA_Abort_IT+0x17c>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1c      	ldr	r2, [pc, #112]	; (8002784 <HAL_DMA_Abort_IT+0x1d4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d009      	beq.n	800272c <HAL_DMA_Abort_IT+0x17c>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1a      	ldr	r2, [pc, #104]	; (8002788 <HAL_DMA_Abort_IT+0x1d8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d004      	beq.n	800272c <HAL_DMA_Abort_IT+0x17c>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a19      	ldr	r2, [pc, #100]	; (800278c <HAL_DMA_Abort_IT+0x1dc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d108      	bne.n	800273e <HAL_DMA_Abort_IT+0x18e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	e178      	b.n	8002a30 <HAL_DMA_Abort_IT+0x480>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0201 	bic.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	e16f      	b.n	8002a30 <HAL_DMA_Abort_IT+0x480>
 8002750:	40020010 	.word	0x40020010
 8002754:	40020028 	.word	0x40020028
 8002758:	40020040 	.word	0x40020040
 800275c:	40020058 	.word	0x40020058
 8002760:	40020070 	.word	0x40020070
 8002764:	40020088 	.word	0x40020088
 8002768:	400200a0 	.word	0x400200a0
 800276c:	400200b8 	.word	0x400200b8
 8002770:	40020410 	.word	0x40020410
 8002774:	40020428 	.word	0x40020428
 8002778:	40020440 	.word	0x40020440
 800277c:	40020458 	.word	0x40020458
 8002780:	40020470 	.word	0x40020470
 8002784:	40020488 	.word	0x40020488
 8002788:	400204a0 	.word	0x400204a0
 800278c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 020e 	bic.w	r2, r2, #14
 800279e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a6c      	ldr	r2, [pc, #432]	; (8002958 <HAL_DMA_Abort_IT+0x3a8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d04a      	beq.n	8002840 <HAL_DMA_Abort_IT+0x290>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a6b      	ldr	r2, [pc, #428]	; (800295c <HAL_DMA_Abort_IT+0x3ac>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d045      	beq.n	8002840 <HAL_DMA_Abort_IT+0x290>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a69      	ldr	r2, [pc, #420]	; (8002960 <HAL_DMA_Abort_IT+0x3b0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d040      	beq.n	8002840 <HAL_DMA_Abort_IT+0x290>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a68      	ldr	r2, [pc, #416]	; (8002964 <HAL_DMA_Abort_IT+0x3b4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d03b      	beq.n	8002840 <HAL_DMA_Abort_IT+0x290>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a66      	ldr	r2, [pc, #408]	; (8002968 <HAL_DMA_Abort_IT+0x3b8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d036      	beq.n	8002840 <HAL_DMA_Abort_IT+0x290>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a65      	ldr	r2, [pc, #404]	; (800296c <HAL_DMA_Abort_IT+0x3bc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d031      	beq.n	8002840 <HAL_DMA_Abort_IT+0x290>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a63      	ldr	r2, [pc, #396]	; (8002970 <HAL_DMA_Abort_IT+0x3c0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d02c      	beq.n	8002840 <HAL_DMA_Abort_IT+0x290>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a62      	ldr	r2, [pc, #392]	; (8002974 <HAL_DMA_Abort_IT+0x3c4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d027      	beq.n	8002840 <HAL_DMA_Abort_IT+0x290>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a60      	ldr	r2, [pc, #384]	; (8002978 <HAL_DMA_Abort_IT+0x3c8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d022      	beq.n	8002840 <HAL_DMA_Abort_IT+0x290>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a5f      	ldr	r2, [pc, #380]	; (800297c <HAL_DMA_Abort_IT+0x3cc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d01d      	beq.n	8002840 <HAL_DMA_Abort_IT+0x290>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a5d      	ldr	r2, [pc, #372]	; (8002980 <HAL_DMA_Abort_IT+0x3d0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d018      	beq.n	8002840 <HAL_DMA_Abort_IT+0x290>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a5c      	ldr	r2, [pc, #368]	; (8002984 <HAL_DMA_Abort_IT+0x3d4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d013      	beq.n	8002840 <HAL_DMA_Abort_IT+0x290>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a5a      	ldr	r2, [pc, #360]	; (8002988 <HAL_DMA_Abort_IT+0x3d8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00e      	beq.n	8002840 <HAL_DMA_Abort_IT+0x290>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a59      	ldr	r2, [pc, #356]	; (800298c <HAL_DMA_Abort_IT+0x3dc>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d009      	beq.n	8002840 <HAL_DMA_Abort_IT+0x290>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a57      	ldr	r2, [pc, #348]	; (8002990 <HAL_DMA_Abort_IT+0x3e0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d004      	beq.n	8002840 <HAL_DMA_Abort_IT+0x290>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a56      	ldr	r2, [pc, #344]	; (8002994 <HAL_DMA_Abort_IT+0x3e4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d108      	bne.n	8002852 <HAL_DMA_Abort_IT+0x2a2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	e007      	b.n	8002862 <HAL_DMA_Abort_IT+0x2b2>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0201 	bic.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a3c      	ldr	r2, [pc, #240]	; (8002958 <HAL_DMA_Abort_IT+0x3a8>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d072      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a3a      	ldr	r2, [pc, #232]	; (800295c <HAL_DMA_Abort_IT+0x3ac>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d06d      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a39      	ldr	r2, [pc, #228]	; (8002960 <HAL_DMA_Abort_IT+0x3b0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d068      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a37      	ldr	r2, [pc, #220]	; (8002964 <HAL_DMA_Abort_IT+0x3b4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d063      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a36      	ldr	r2, [pc, #216]	; (8002968 <HAL_DMA_Abort_IT+0x3b8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d05e      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a34      	ldr	r2, [pc, #208]	; (800296c <HAL_DMA_Abort_IT+0x3bc>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d059      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a33      	ldr	r2, [pc, #204]	; (8002970 <HAL_DMA_Abort_IT+0x3c0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d054      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a31      	ldr	r2, [pc, #196]	; (8002974 <HAL_DMA_Abort_IT+0x3c4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d04f      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a30      	ldr	r2, [pc, #192]	; (8002978 <HAL_DMA_Abort_IT+0x3c8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d04a      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a2e      	ldr	r2, [pc, #184]	; (800297c <HAL_DMA_Abort_IT+0x3cc>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d045      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a2d      	ldr	r2, [pc, #180]	; (8002980 <HAL_DMA_Abort_IT+0x3d0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d040      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a2b      	ldr	r2, [pc, #172]	; (8002984 <HAL_DMA_Abort_IT+0x3d4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d03b      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a2a      	ldr	r2, [pc, #168]	; (8002988 <HAL_DMA_Abort_IT+0x3d8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d036      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a28      	ldr	r2, [pc, #160]	; (800298c <HAL_DMA_Abort_IT+0x3dc>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d031      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a27      	ldr	r2, [pc, #156]	; (8002990 <HAL_DMA_Abort_IT+0x3e0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d02c      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a25      	ldr	r2, [pc, #148]	; (8002994 <HAL_DMA_Abort_IT+0x3e4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d027      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a24      	ldr	r2, [pc, #144]	; (8002998 <HAL_DMA_Abort_IT+0x3e8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d022      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a22      	ldr	r2, [pc, #136]	; (800299c <HAL_DMA_Abort_IT+0x3ec>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d01d      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a21      	ldr	r2, [pc, #132]	; (80029a0 <HAL_DMA_Abort_IT+0x3f0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d018      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a1f      	ldr	r2, [pc, #124]	; (80029a4 <HAL_DMA_Abort_IT+0x3f4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d013      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a1e      	ldr	r2, [pc, #120]	; (80029a8 <HAL_DMA_Abort_IT+0x3f8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d00e      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <HAL_DMA_Abort_IT+0x3fc>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d009      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a1b      	ldr	r2, [pc, #108]	; (80029b0 <HAL_DMA_Abort_IT+0x400>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d004      	beq.n	8002952 <HAL_DMA_Abort_IT+0x3a2>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a19      	ldr	r2, [pc, #100]	; (80029b4 <HAL_DMA_Abort_IT+0x404>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d132      	bne.n	80029b8 <HAL_DMA_Abort_IT+0x408>
 8002952:	2301      	movs	r3, #1
 8002954:	e031      	b.n	80029ba <HAL_DMA_Abort_IT+0x40a>
 8002956:	bf00      	nop
 8002958:	40020010 	.word	0x40020010
 800295c:	40020028 	.word	0x40020028
 8002960:	40020040 	.word	0x40020040
 8002964:	40020058 	.word	0x40020058
 8002968:	40020070 	.word	0x40020070
 800296c:	40020088 	.word	0x40020088
 8002970:	400200a0 	.word	0x400200a0
 8002974:	400200b8 	.word	0x400200b8
 8002978:	40020410 	.word	0x40020410
 800297c:	40020428 	.word	0x40020428
 8002980:	40020440 	.word	0x40020440
 8002984:	40020458 	.word	0x40020458
 8002988:	40020470 	.word	0x40020470
 800298c:	40020488 	.word	0x40020488
 8002990:	400204a0 	.word	0x400204a0
 8002994:	400204b8 	.word	0x400204b8
 8002998:	58025408 	.word	0x58025408
 800299c:	5802541c 	.word	0x5802541c
 80029a0:	58025430 	.word	0x58025430
 80029a4:	58025444 	.word	0x58025444
 80029a8:	58025458 	.word	0x58025458
 80029ac:	5802546c 	.word	0x5802546c
 80029b0:	58025480 	.word	0x58025480
 80029b4:	58025494 	.word	0x58025494
 80029b8:	2300      	movs	r3, #0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d028      	beq.n	8002a10 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	2201      	movs	r2, #1
 80029de:	409a      	lsls	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80029ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00c      	beq.n	8002a10 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a04:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a0e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d003      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop

08002a3c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e0cf      	b.n	8002bee <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d106      	bne.n	8002a66 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2223      	movs	r2, #35	; 0x23
 8002a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7fe fcc1 	bl	80013e8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a66:	4b64      	ldr	r3, [pc, #400]	; (8002bf8 <HAL_ETH_Init+0x1bc>)
 8002a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a6c:	4a62      	ldr	r2, [pc, #392]	; (8002bf8 <HAL_ETH_Init+0x1bc>)
 8002a6e:	f043 0302 	orr.w	r3, r3, #2
 8002a72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a76:	4b60      	ldr	r3, [pc, #384]	; (8002bf8 <HAL_ETH_Init+0x1bc>)
 8002a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	7a1b      	ldrb	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d103      	bne.n	8002a94 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f7ff f97d 	bl	8001d8c <HAL_SYSCFG_ETHInterfaceSelect>
 8002a92:	e003      	b.n	8002a9c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002a94:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002a98:	f7ff f978 	bl	8001d8c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002a9c:	4b57      	ldr	r3, [pc, #348]	; (8002bfc <HAL_ETH_Init+0x1c0>)
 8002a9e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ab6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ab8:	f7ff f92c 	bl	8001d14 <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002abe:	e011      	b.n	8002ae4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002ac0:	f7ff f928 	bl	8001d14 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ace:	d909      	bls.n	8002ae4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	22e0      	movs	r2, #224	; 0xe0
 8002adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e084      	b.n	8002bee <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1e4      	bne.n	8002ac0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f886 	bl	8002c08 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002afc:	f003 f8de 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4a3f      	ldr	r2, [pc, #252]	; (8002c00 <HAL_ETH_Init+0x1c4>)
 8002b04:	fba2 2303 	umull	r2, r3, r2, r3
 8002b08:	0c9a      	lsrs	r2, r3, #18
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3a01      	subs	r2, #1
 8002b10:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fa71 	bl	8002ffc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b22:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002b26:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b36:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	22e0      	movs	r2, #224	; 0xe0
 8002b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e049      	b.n	8002bee <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b62:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002b66:	4b27      	ldr	r3, [pc, #156]	; (8002c04 <HAL_ETH_Init+0x1c8>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6952      	ldr	r2, [r2, #20]
 8002b6e:	0051      	lsls	r1, r2, #1
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	430b      	orrs	r3, r1
 8002b76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b7a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fad9 	bl	8003136 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fb1f 	bl	80031c8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	3305      	adds	r3, #5
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	021a      	lsls	r2, r3, #8
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	3303      	adds	r3, #3
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	061a      	lsls	r2, r3, #24
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	041b      	lsls	r3, r3, #16
 8002bbc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002bc8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002bd6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002bd8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2210      	movs	r2, #16
 8002be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	58024400 	.word	0x58024400
 8002bfc:	58000400 	.word	0x58000400
 8002c00:	431bde83 	.word	0x431bde83
 8002c04:	ffff8001 	.word	0xffff8001

08002c08 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c18:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002c22:	f003 f84b 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 8002c26:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ca4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d908      	bls.n	8002c42 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d804      	bhi.n	8002c42 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	e027      	b.n	8002c92 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d908      	bls.n	8002c5c <HAL_ETH_SetMDIOClockRange+0x54>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	4a17      	ldr	r2, [pc, #92]	; (8002cac <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d204      	bcs.n	8002c5c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	e01a      	b.n	8002c92 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	4a13      	ldr	r2, [pc, #76]	; (8002cac <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d303      	bcc.n	8002c6c <HAL_ETH_SetMDIOClockRange+0x64>
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d911      	bls.n	8002c90 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4a10      	ldr	r2, [pc, #64]	; (8002cb0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d908      	bls.n	8002c86 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4a0f      	ldr	r2, [pc, #60]	; (8002cb4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d804      	bhi.n	8002c86 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	e005      	b.n	8002c92 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	e000      	b.n	8002c92 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002c90:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002c9c:	bf00      	nop
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	01312cff 	.word	0x01312cff
 8002ca8:	02160ebf 	.word	0x02160ebf
 8002cac:	03938700 	.word	0x03938700
 8002cb0:	05f5e0ff 	.word	0x05f5e0ff
 8002cb4:	08f0d17f 	.word	0x08f0d17f

08002cb8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002cca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	791b      	ldrb	r3, [r3, #4]
 8002cd0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002cd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	7b1b      	ldrb	r3, [r3, #12]
 8002cd8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002cda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	7b5b      	ldrb	r3, [r3, #13]
 8002ce0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002ce2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	7b9b      	ldrb	r3, [r3, #14]
 8002ce8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002cea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	7bdb      	ldrb	r3, [r3, #15]
 8002cf0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002cf2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	7c12      	ldrb	r2, [r2, #16]
 8002cf8:	2a00      	cmp	r2, #0
 8002cfa:	d102      	bne.n	8002d02 <ETH_SetMACConfig+0x4a>
 8002cfc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d00:	e000      	b.n	8002d04 <ETH_SetMACConfig+0x4c>
 8002d02:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002d04:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	7c52      	ldrb	r2, [r2, #17]
 8002d0a:	2a00      	cmp	r2, #0
 8002d0c:	d102      	bne.n	8002d14 <ETH_SetMACConfig+0x5c>
 8002d0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d12:	e000      	b.n	8002d16 <ETH_SetMACConfig+0x5e>
 8002d14:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002d16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	7c9b      	ldrb	r3, [r3, #18]
 8002d1c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002d1e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002d24:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002d2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	7f1b      	ldrb	r3, [r3, #28]
 8002d30:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002d32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	7f5b      	ldrb	r3, [r3, #29]
 8002d38:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002d3a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	7f92      	ldrb	r2, [r2, #30]
 8002d40:	2a00      	cmp	r2, #0
 8002d42:	d102      	bne.n	8002d4a <ETH_SetMACConfig+0x92>
 8002d44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d48:	e000      	b.n	8002d4c <ETH_SetMACConfig+0x94>
 8002d4a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002d4c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	7fdb      	ldrb	r3, [r3, #31]
 8002d52:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002d54:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d5c:	2a00      	cmp	r2, #0
 8002d5e:	d102      	bne.n	8002d66 <ETH_SetMACConfig+0xae>
 8002d60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d64:	e000      	b.n	8002d68 <ETH_SetMACConfig+0xb0>
 8002d66:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002d68:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002d6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d76:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002d78:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b56      	ldr	r3, [pc, #344]	; (8002ee4 <ETH_SetMACConfig+0x22c>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6812      	ldr	r2, [r2, #0]
 8002d90:	68f9      	ldr	r1, [r7, #12]
 8002d92:	430b      	orrs	r3, r1
 8002d94:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002da2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002da4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dac:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002dae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002db6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002db8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002dc0:	2a00      	cmp	r2, #0
 8002dc2:	d102      	bne.n	8002dca <ETH_SetMACConfig+0x112>
 8002dc4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002dc8:	e000      	b.n	8002dcc <ETH_SetMACConfig+0x114>
 8002dca:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002dcc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	4b42      	ldr	r3, [pc, #264]	; (8002ee8 <ETH_SetMACConfig+0x230>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	68f9      	ldr	r1, [r7, #12]
 8002de6:	430b      	orrs	r3, r1
 8002de8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002df0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	4b3a      	ldr	r3, [pc, #232]	; (8002eec <ETH_SetMACConfig+0x234>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	68f9      	ldr	r1, [r7, #12]
 8002e0a:	430b      	orrs	r3, r1
 8002e0c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002e14:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e1a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002e22:	2a00      	cmp	r2, #0
 8002e24:	d101      	bne.n	8002e2a <ETH_SetMACConfig+0x172>
 8002e26:	2280      	movs	r2, #128	; 0x80
 8002e28:	e000      	b.n	8002e2c <ETH_SetMACConfig+0x174>
 8002e2a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002e2c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e32:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e3e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002e42:	4013      	ands	r3, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	68f9      	ldr	r1, [r7, #12]
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002e54:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002e5c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	f023 0103 	bic.w	r1, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002e82:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002e9e:	2a00      	cmp	r2, #0
 8002ea0:	d101      	bne.n	8002ea6 <ETH_SetMACConfig+0x1ee>
 8002ea2:	2240      	movs	r2, #64	; 0x40
 8002ea4:	e000      	b.n	8002ea8 <ETH_SetMACConfig+0x1f0>
 8002ea6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002ea8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002eb0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002eb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002eba:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002ec8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	00048083 	.word	0x00048083
 8002ee8:	c0f88000 	.word	0xc0f88000
 8002eec:	fffffef0 	.word	0xfffffef0

08002ef0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4b38      	ldr	r3, [pc, #224]	; (8002fe8 <ETH_SetDMAConfig+0xf8>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	6811      	ldr	r1, [r2, #0]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f16:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	791b      	ldrb	r3, [r3, #4]
 8002f1c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f22:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	7b1b      	ldrb	r3, [r3, #12]
 8002f28:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <ETH_SetDMAConfig+0xfc>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	68f9      	ldr	r1, [r7, #12]
 8002f42:	430b      	orrs	r3, r1
 8002f44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f48:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	7b5b      	ldrb	r3, [r3, #13]
 8002f4e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f60:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002f64:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <ETH_SetDMAConfig+0x100>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	68f9      	ldr	r1, [r7, #12]
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f74:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	7d1b      	ldrb	r3, [r3, #20]
 8002f80:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f82:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	7f5b      	ldrb	r3, [r3, #29]
 8002f88:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f96:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002f9a:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <ETH_SetDMAConfig+0x104>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	68f9      	ldr	r1, [r7, #12]
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002faa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	7f1b      	ldrb	r3, [r3, #28]
 8002fb2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <ETH_SetDMAConfig+0x108>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	68f9      	ldr	r1, [r7, #12]
 8002fd2:	430b      	orrs	r3, r1
 8002fd4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fd8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	ffff87fd 	.word	0xffff87fd
 8002fec:	ffff2ffe 	.word	0xffff2ffe
 8002ff0:	fffec000 	.word	0xfffec000
 8002ff4:	ffc0efef 	.word	0xffc0efef
 8002ff8:	7fc0ffff 	.word	0x7fc0ffff

08002ffc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b0a4      	sub	sp, #144	; 0x90
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003004:	2301      	movs	r3, #1
 8003006:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800300a:	2300      	movs	r3, #0
 800300c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800300e:	2300      	movs	r3, #0
 8003010:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003014:	2300      	movs	r3, #0
 8003016:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003020:	2301      	movs	r3, #1
 8003022:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003026:	2301      	movs	r3, #1
 8003028:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800302c:	2300      	movs	r3, #0
 800302e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003032:	2301      	movs	r3, #1
 8003034:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800303c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800303e:	2300      	movs	r3, #0
 8003040:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003044:	2300      	movs	r3, #0
 8003046:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003048:	2300      	movs	r3, #0
 800304a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800304e:	2300      	movs	r3, #0
 8003050:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003054:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003058:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800305a:	2300      	movs	r3, #0
 800305c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003060:	2300      	movs	r3, #0
 8003062:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003064:	2301      	movs	r3, #1
 8003066:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800306a:	2300      	movs	r3, #0
 800306c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003070:	2300      	movs	r3, #0
 8003072:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8003076:	2300      	movs	r3, #0
 8003078:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800307a:	2300      	movs	r3, #0
 800307c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800307e:	2300      	movs	r3, #0
 8003080:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003082:	2300      	movs	r3, #0
 8003084:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003088:	2300      	movs	r3, #0
 800308a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003094:	2320      	movs	r3, #32
 8003096:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800309a:	2301      	movs	r3, #1
 800309c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80030a6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80030aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80030ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030b0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80030b8:	2302      	movs	r3, #2
 80030ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80030be:	2300      	movs	r3, #0
 80030c0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80030d6:	2300      	movs	r3, #0
 80030d8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80030da:	2301      	movs	r3, #1
 80030dc:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80030e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030e4:	4619      	mov	r1, r3
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff fde6 	bl	8002cb8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80030ec:	2301      	movs	r3, #1
 80030ee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80030f0:	2301      	movs	r3, #1
 80030f2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80030fe:	2300      	movs	r3, #0
 8003100:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003102:	2300      	movs	r3, #0
 8003104:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003106:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800310a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800310c:	2300      	movs	r3, #0
 800310e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003110:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003114:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003116:	2300      	movs	r3, #0
 8003118:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800311c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003122:	f107 0308 	add.w	r3, r7, #8
 8003126:	4619      	mov	r1, r3
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff fee1 	bl	8002ef0 <ETH_SetDMAConfig>
}
 800312e:	bf00      	nop
 8003130:	3790      	adds	r7, #144	; 0x90
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003136:	b480      	push	{r7}
 8003138:	b085      	sub	sp, #20
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	e01d      	b.n	8003180 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68d9      	ldr	r1, [r3, #12]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4613      	mov	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4413      	add	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	440b      	add	r3, r1
 8003154:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2200      	movs	r2, #0
 8003160:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2200      	movs	r2, #0
 8003166:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2200      	movs	r2, #0
 800316c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800316e:	68b9      	ldr	r1, [r7, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	3206      	adds	r2, #6
 8003176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	3301      	adds	r3, #1
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b03      	cmp	r3, #3
 8003184:	d9de      	bls.n	8003144 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003194:	461a      	mov	r2, r3
 8003196:	2303      	movs	r3, #3
 8003198:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031a8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031b8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	e023      	b.n	800321e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6919      	ldr	r1, [r3, #16]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	440b      	add	r3, r1
 80031e6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2200      	movs	r2, #0
 80031f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2200      	movs	r2, #0
 80031fe:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2200      	movs	r2, #0
 8003204:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2200      	movs	r2, #0
 800320a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	3212      	adds	r2, #18
 8003214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	3301      	adds	r3, #1
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b03      	cmp	r3, #3
 8003222:	d9d8      	bls.n	80031d6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800324a:	461a      	mov	r2, r3
 800324c:	2303      	movs	r3, #3
 800324e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800325e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003272:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003276:	bf00      	nop
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b098      	sub	sp, #96	; 0x60
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800328c:	4a84      	ldr	r2, [pc, #528]	; (80034a0 <HAL_FDCAN_Init+0x21c>)
 800328e:	f107 030c 	add.w	r3, r7, #12
 8003292:	4611      	mov	r1, r2
 8003294:	224c      	movs	r2, #76	; 0x4c
 8003296:	4618      	mov	r0, r3
 8003298:	f00b faa3 	bl	800e7e2 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e1c6      	b.n	8003634 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a7e      	ldr	r2, [pc, #504]	; (80034a4 <HAL_FDCAN_Init+0x220>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d106      	bne.n	80032be <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80032b8:	461a      	mov	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fe f956 	bl	8001584 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0210 	bic.w	r2, r2, #16
 80032e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032e8:	f7fe fd14 	bl	8001d14 <HAL_GetTick>
 80032ec:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80032ee:	e014      	b.n	800331a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80032f0:	f7fe fd10 	bl	8001d14 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b0a      	cmp	r3, #10
 80032fc:	d90d      	bls.n	800331a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003304:	f043 0201 	orr.w	r2, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2203      	movs	r2, #3
 8003312:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e18c      	b.n	8003634 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b08      	cmp	r3, #8
 8003326:	d0e3      	beq.n	80032f0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003338:	f7fe fcec 	bl	8001d14 <HAL_GetTick>
 800333c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800333e:	e014      	b.n	800336a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003340:	f7fe fce8 	bl	8001d14 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b0a      	cmp	r3, #10
 800334c:	d90d      	bls.n	800336a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003354:	f043 0201 	orr.w	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2203      	movs	r2, #3
 8003362:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e164      	b.n	8003634 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0e3      	beq.n	8003340 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0202 	orr.w	r2, r2, #2
 8003386:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	7c1b      	ldrb	r3, [r3, #16]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d108      	bne.n	80033a2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800339e:	619a      	str	r2, [r3, #24]
 80033a0:	e007      	b.n	80033b2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699a      	ldr	r2, [r3, #24]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033b0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	7c5b      	ldrb	r3, [r3, #17]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d108      	bne.n	80033cc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699a      	ldr	r2, [r3, #24]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033c8:	619a      	str	r2, [r3, #24]
 80033ca:	e007      	b.n	80033dc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033da:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	7c9b      	ldrb	r3, [r3, #18]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d108      	bne.n	80033f6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033f2:	619a      	str	r2, [r3, #24]
 80033f4:	e007      	b.n	8003406 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003404:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699a      	ldr	r2, [r3, #24]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800342a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0210 	bic.w	r2, r2, #16
 800343a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d108      	bne.n	8003456 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0204 	orr.w	r2, r2, #4
 8003452:	619a      	str	r2, [r3, #24]
 8003454:	e030      	b.n	80034b8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d02c      	beq.n	80034b8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d020      	beq.n	80034a8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699a      	ldr	r2, [r3, #24]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003474:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691a      	ldr	r2, [r3, #16]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0210 	orr.w	r2, r2, #16
 8003484:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	2b03      	cmp	r3, #3
 800348c:	d114      	bne.n	80034b8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699a      	ldr	r2, [r3, #24]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0220 	orr.w	r2, r2, #32
 800349c:	619a      	str	r2, [r3, #24]
 800349e:	e00b      	b.n	80034b8 <HAL_FDCAN_Init+0x234>
 80034a0:	0800fd3c 	.word	0x0800fd3c
 80034a4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0220 	orr.w	r2, r2, #32
 80034b6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	3b01      	subs	r3, #1
 80034be:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034c8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80034d0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	3b01      	subs	r3, #1
 80034da:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80034e0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80034e2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ec:	d115      	bne.n	800351a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	3b01      	subs	r3, #1
 80034fa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80034fc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	3b01      	subs	r3, #1
 8003504:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003506:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	3b01      	subs	r3, #1
 8003510:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003516:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003518:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003540:	4413      	add	r3, r2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d011      	beq.n	800356a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800354e:	f023 0107 	bic.w	r1, r3, #7
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	3360      	adds	r3, #96	; 0x60
 800355a:	443b      	add	r3, r7
 800355c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d011      	beq.n	8003596 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800357a:	f023 0107 	bic.w	r1, r3, #7
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	3360      	adds	r3, #96	; 0x60
 8003586:	443b      	add	r3, r7
 8003588:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800359a:	2b00      	cmp	r3, #0
 800359c:	d012      	beq.n	80035c4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80035a6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	3360      	adds	r3, #96	; 0x60
 80035b2:	443b      	add	r3, r7
 80035b4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80035b8:	011a      	lsls	r2, r3, #4
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d012      	beq.n	80035f2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80035d4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	3360      	adds	r3, #96	; 0x60
 80035e0:	443b      	add	r3, r7
 80035e2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80035e6:	021a      	lsls	r2, r3, #8
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a11      	ldr	r2, [pc, #68]	; (800363c <HAL_FDCAN_Init+0x3b8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d107      	bne.n	800360c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f022 0203 	bic.w	r2, r2, #3
 800360a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fe73 	bl	8004310 <FDCAN_CalcultateRamBlockAddresses>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003630:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003634:	4618      	mov	r0, r3
 8003636:	3760      	adds	r7, #96	; 0x60
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	4000a000 	.word	0x4000a000

08003640 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003650:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003652:	7bfb      	ldrb	r3, [r7, #15]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d002      	beq.n	800365e <HAL_FDCAN_ConfigFilter+0x1e>
 8003658:	7bfb      	ldrb	r3, [r7, #15]
 800365a:	2b02      	cmp	r3, #2
 800365c:	d157      	bne.n	800370e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d12b      	bne.n	80036be <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2b07      	cmp	r3, #7
 800366c:	d10d      	bne.n	800368a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800367a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003680:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8003682:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	e00e      	b.n	80036a8 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003696:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800369e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80036a4:	4313      	orrs	r3, r2
 80036a6:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	e025      	b.n	800370a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	075a      	lsls	r2, r3, #29
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b07      	cmp	r3, #7
 80036d2:	d103      	bne.n	80036dc <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	e006      	b.n	80036ea <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	079a      	lsls	r2, r3, #30
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	4413      	add	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	3304      	adds	r3, #4
 8003702:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	e008      	b.n	8003720 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003714:	f043 0202 	orr.w	r2, r3, #2
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
  }
}
 8003720:	4618      	mov	r0, r3
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b01      	cmp	r3, #1
 8003744:	d110      	bne.n	8003768 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800374e:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003754:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	e008      	b.n	800377a <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800376e:	f043 0204 	orr.w	r2, r3, #4
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
  }
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <HAL_FDCAN_ConfigFifoWatermark>:
  *           - 0 and 32, if FIFO is FDCAN_CFG_TX_EVENT_FIFO
  *           - 0 and 64, if FIFO is FDCAN_CFG_RX_FIFO0 or FDCAN_CFG_RX_FIFO1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFifoWatermark(FDCAN_HandleTypeDef *hfdcan, uint32_t FIFO, uint32_t Watermark)
{
 8003786:	b480      	push	{r7}
 8003788:	b085      	sub	sp, #20
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
  else /* (FIFO == FDCAN_CFG_RX_FIFO0) || (FIFO == FDCAN_CFG_RX_FIFO1) */
  {
    assert_param(IS_FDCAN_MAX_VALUE(Watermark, 64U));
  }

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b01      	cmp	r3, #1
 800379c:	d130      	bne.n	8003800 <HAL_FDCAN_ConfigFifoWatermark+0x7a>
  {
    /* Set the level for FIFO watermark interrupt */
    if (FIFO == FDCAN_CFG_TX_EVENT_FIFO)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10d      	bne.n	80037c0 <HAL_FDCAN_ConfigFifoWatermark+0x3a>
    {
      MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFWM, (Watermark << FDCAN_TXEFC_EFWM_Pos));
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80037ac:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	061a      	lsls	r2, r3, #24
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80037be:	e01d      	b.n	80037fc <HAL_FDCAN_ConfigFifoWatermark+0x76>
    }
    else if (FIFO == FDCAN_CFG_RX_FIFO0)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d10d      	bne.n	80037e2 <HAL_FDCAN_ConfigFifoWatermark+0x5c>
    {
      MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0WM, (Watermark << FDCAN_RXF0C_F0WM_Pos));
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037ce:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	061a      	lsls	r2, r3, #24
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80037e0:	e00c      	b.n	80037fc <HAL_FDCAN_ConfigFifoWatermark+0x76>
    }
    else /* FIFO == FDCAN_CFG_RX_FIFO1 */
    {
      MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1WM, (Watermark << FDCAN_RXF1C_F1WM_Pos));
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037ea:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	061a      	lsls	r2, r3, #24
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Return function status */
    return HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e008      	b.n	8003812 <HAL_FDCAN_ConfigFifoWatermark+0x8c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003806:	f043 0204 	orr.w	r2, r3, #4
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
  }
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	d111      	bne.n	8003856 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2202      	movs	r2, #2
 8003836:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0201 	bic.w	r2, r2, #1
 8003848:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	e008      	b.n	8003868 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800385c:	f043 0204 	orr.w	r2, r3, #4
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
  }
}
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d141      	bne.n	8003910 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003894:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d109      	bne.n	80038b0 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038a2:	f043 0220 	orr.w	r2, r3, #32
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e038      	b.n	8003922 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80038b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d009      	beq.n	80038d4 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e026      	b.n	8003922 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80038dc:	0c1b      	lsrs	r3, r3, #16
 80038de:	f003 031f 	and.w	r3, r3, #31
 80038e2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 fe96 	bl	800461c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2101      	movs	r1, #1
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	fa01 f202 	lsl.w	r2, r1, r2
 80038fc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003900:	2201      	movs	r2, #1
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	409a      	lsls	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	e008      	b.n	8003922 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003916:	f043 0208 	orr.w	r2, r3, #8
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
  }
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800392c:	b480      	push	{r7}
 800392e:	b08b      	sub	sp, #44	; 0x2c
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800393a:	2300      	movs	r3, #0
 800393c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003944:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8003946:	7efb      	ldrb	r3, [r7, #27]
 8003948:	2b02      	cmp	r3, #2
 800394a:	f040 814b 	bne.w	8003be4 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d14d      	bne.n	80039f0 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800395c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d109      	bne.n	8003978 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e13e      	b.n	8003bf6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003984:	2b00      	cmp	r3, #0
 8003986:	d109      	bne.n	800399c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800398e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e12c      	b.n	8003bf6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039a4:	0e1b      	lsrs	r3, r3, #24
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d10b      	bne.n	80039c6 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80039b6:	0fdb      	lsrs	r3, r3, #31
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039c0:	d101      	bne.n	80039c6 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80039c2:	2301      	movs	r3, #1
 80039c4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039ce:	0a1b      	lsrs	r3, r3, #8
 80039d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	4413      	add	r3, r2
 80039d8:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	69f9      	ldr	r1, [r7, #28]
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
 80039ee:	e069      	b.n	8003ac4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b41      	cmp	r3, #65	; 0x41
 80039f4:	d14d      	bne.n	8003a92 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80039fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a0c:	f043 0220 	orr.w	r2, r3, #32
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e0ed      	b.n	8003bf6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e0db      	b.n	8003bf6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a46:	0e1b      	lsrs	r3, r3, #24
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d10b      	bne.n	8003a68 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a58:	0fdb      	lsrs	r3, r3, #31
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a62:	d101      	bne.n	8003a68 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003a64:	2301      	movs	r3, #1
 8003a66:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a70:	0a1b      	lsrs	r3, r3, #8
 8003a72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a76:	69fa      	ldr	r2, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a84:	69f9      	ldr	r1, [r7, #28]
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a90:	e018      	b.n	8003ac4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d309      	bcc.n	8003ab0 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003aa2:	f043 0220 	orr.w	r2, r3, #32
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e0a2      	b.n	8003bf6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	fb01 f303 	mul.w	r3, r1, r3
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d107      	bne.n	8003ae8 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	0c9b      	lsrs	r3, r3, #18
 8003ade:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	e005      	b.n	8003af4 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	3304      	adds	r3, #4
 8003b10:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	0e1b      	lsrs	r3, r3, #24
 8003b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	0fda      	lsrs	r2, r3, #31
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	623b      	str	r3, [r7, #32]
 8003b66:	e00a      	b.n	8003b7e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	441a      	add	r2, r3
 8003b6e:	6839      	ldr	r1, [r7, #0]
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	440b      	add	r3, r1
 8003b74:	7812      	ldrb	r2, [r2, #0]
 8003b76:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	623b      	str	r3, [r7, #32]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	0c1b      	lsrs	r3, r3, #16
 8003b84:	4a1f      	ldr	r2, [pc, #124]	; (8003c04 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8003b86:	5cd3      	ldrb	r3, [r2, r3]
 8003b88:	461a      	mov	r2, r3
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d3eb      	bcc.n	8003b68 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b40      	cmp	r3, #64	; 0x40
 8003b94:	d105      	bne.n	8003ba2 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003ba0:	e01e      	b.n	8003be0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b41      	cmp	r3, #65	; 0x41
 8003ba6:	d105      	bne.n	8003bb4 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	69fa      	ldr	r2, [r7, #28]
 8003bae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003bb2:	e015      	b.n	8003be0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b1f      	cmp	r3, #31
 8003bb8:	d808      	bhi.n	8003bcc <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003bca:	e009      	b.n	8003be0 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	f003 021f 	and.w	r2, r3, #31
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bdc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e008      	b.n	8003bf6 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bea:	f043 0208 	orr.w	r2, r3, #8
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
  }
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	372c      	adds	r7, #44	; 0x2c
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	0800fed0 	.word	0x0800fed0

08003c08 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003c1a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003c1c:	7dfb      	ldrb	r3, [r7, #23]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d002      	beq.n	8003c28 <HAL_FDCAN_ActivateNotification+0x20>
 8003c22:	7dfb      	ldrb	r3, [r7, #23]
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d155      	bne.n	8003cd4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d108      	bne.n	8003c48 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0201 	orr.w	r2, r2, #1
 8003c44:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c46:	e014      	b.n	8003c72 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	4013      	ands	r3, r2
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d108      	bne.n	8003c6a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0202 	orr.w	r2, r2, #2
 8003c66:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c68:	e003      	b.n	8003c72 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2203      	movs	r2, #3
 8003c70:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d009      	beq.n	8003c90 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	4b0f      	ldr	r3, [pc, #60]	; (8003cf4 <HAL_FDCAN_ActivateNotification+0xec>)
 8003cb8:	4013      	ands	r3, r2
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	6812      	ldr	r2, [r2, #0]
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	6553      	str	r3, [r2, #84]	; 0x54
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	; (8003cf8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	0f9b      	lsrs	r3, r3, #30
 8003cca:	490b      	ldr	r1, [pc, #44]	; (8003cf8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e008      	b.n	8003ce6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cda:	f043 0202 	orr.w	r2, r3, #2
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
  }
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	3fcfffff 	.word	0x3fcfffff
 8003cf8:	4000a800 	.word	0x4000a800

08003cfc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b096      	sub	sp, #88	; 0x58
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8003d04:	4b9a      	ldr	r3, [pc, #616]	; (8003f70 <HAL_FDCAN_IRQHandler+0x274>)
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	079b      	lsls	r3, r3, #30
 8003d0a:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8003d0c:	4b98      	ldr	r3, [pc, #608]	; (8003f70 <HAL_FDCAN_IRQHandler+0x274>)
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	079b      	lsls	r3, r3, #30
 8003d12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d14:	4013      	ands	r3, r2
 8003d16:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003d22:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d36:	f003 030f 	and.w	r3, r3, #15
 8003d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d44:	4013      	ands	r3, r2
 8003d46:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d52:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d66:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8003d6a:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d74:	4013      	ands	r3, r2
 8003d76:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8003d82:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003da2:	0a1b      	lsrs	r3, r3, #8
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d010      	beq.n	8003dce <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dae:	0a1b      	lsrs	r3, r3, #8
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dc0:	651a      	str	r2, [r3, #80]	; 0x50
 8003dc2:	4b6b      	ldr	r3, [pc, #428]	; (8003f70 <HAL_FDCAN_IRQHandler+0x274>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fa54 	bl	8004276 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dd0:	0a9b      	lsrs	r3, r3, #10
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d01d      	beq.n	8003e16 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ddc:	0a9b      	lsrs	r3, r3, #10
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d017      	beq.n	8003e16 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003dee:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003df8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e06:	651a      	str	r2, [r3, #80]	; 0x50
 8003e08:	4b59      	ldr	r3, [pc, #356]	; (8003f70 <HAL_FDCAN_IRQHandler+0x274>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003e0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 fa07 	bl	8004224 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8003e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00d      	beq.n	8003e38 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e22:	4b54      	ldr	r3, [pc, #336]	; (8003f74 <HAL_FDCAN_IRQHandler+0x278>)
 8003e24:	400b      	ands	r3, r1
 8003e26:	6513      	str	r3, [r2, #80]	; 0x50
 8003e28:	4a51      	ldr	r2, [pc, #324]	; (8003f70 <HAL_FDCAN_IRQHandler+0x274>)
 8003e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e2c:	0f9b      	lsrs	r3, r3, #30
 8003e2e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8003e30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f9c0 	bl	80041b8 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00d      	beq.n	8003e5a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003e44:	4b4b      	ldr	r3, [pc, #300]	; (8003f74 <HAL_FDCAN_IRQHandler+0x278>)
 8003e46:	400b      	ands	r3, r1
 8003e48:	6513      	str	r3, [r2, #80]	; 0x50
 8003e4a:	4a49      	ldr	r2, [pc, #292]	; (8003f70 <HAL_FDCAN_IRQHandler+0x274>)
 8003e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e4e:	0f9b      	lsrs	r3, r3, #30
 8003e50:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003e52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f9ba 	bl	80041ce <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00d      	beq.n	8003e7c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003e66:	4b43      	ldr	r3, [pc, #268]	; (8003f74 <HAL_FDCAN_IRQHandler+0x278>)
 8003e68:	400b      	ands	r3, r1
 8003e6a:	6513      	str	r3, [r2, #80]	; 0x50
 8003e6c:	4a40      	ldr	r2, [pc, #256]	; (8003f70 <HAL_FDCAN_IRQHandler+0x274>)
 8003e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e70:	0f9b      	lsrs	r3, r3, #30
 8003e72:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003e74:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f7fd f862 	bl	8000f40 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00d      	beq.n	8003e9e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003e88:	4b3a      	ldr	r3, [pc, #232]	; (8003f74 <HAL_FDCAN_IRQHandler+0x278>)
 8003e8a:	400b      	ands	r3, r1
 8003e8c:	6513      	str	r3, [r2, #80]	; 0x50
 8003e8e:	4a38      	ldr	r2, [pc, #224]	; (8003f70 <HAL_FDCAN_IRQHandler+0x274>)
 8003e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e92:	0f9b      	lsrs	r3, r3, #30
 8003e94:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003e96:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 f9a3 	bl	80041e4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea0:	0adb      	lsrs	r3, r3, #11
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d010      	beq.n	8003ecc <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	0adb      	lsrs	r3, r3, #11
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ebe:	651a      	str	r2, [r3, #80]	; 0x50
 8003ec0:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <HAL_FDCAN_IRQHandler+0x274>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f997 	bl	80041fa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8003ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ece:	0a5b      	lsrs	r3, r3, #9
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01d      	beq.n	8003f14 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eda:	0a5b      	lsrs	r3, r3, #9
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d017      	beq.n	8003f14 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003eec:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef8:	4013      	ands	r3, r2
 8003efa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f04:	651a      	str	r2, [r3, #80]	; 0x50
 8003f06:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <HAL_FDCAN_IRQHandler+0x274>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003f0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f97d 	bl	800420e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f16:	0cdb      	lsrs	r3, r3, #19
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d010      	beq.n	8003f42 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8003f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f22:	0cdb      	lsrs	r3, r3, #19
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003f34:	651a      	str	r2, [r3, #80]	; 0x50
 8003f36:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <HAL_FDCAN_IRQHandler+0x274>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f97c 	bl	800423a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f44:	0c1b      	lsrs	r3, r3, #16
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d016      	beq.n	8003f7c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	0c1b      	lsrs	r3, r3, #16
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d010      	beq.n	8003f7c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f62:	651a      	str	r2, [r3, #80]	; 0x50
 8003f64:	4b02      	ldr	r3, [pc, #8]	; (8003f70 <HAL_FDCAN_IRQHandler+0x274>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	e004      	b.n	8003f78 <HAL_FDCAN_IRQHandler+0x27c>
 8003f6e:	bf00      	nop
 8003f70:	4000a800 	.word	0x4000a800
 8003f74:	3fcfffff 	.word	0x3fcfffff
 8003f78:	f000 f969 	bl	800424e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f7e:	0c9b      	lsrs	r3, r3, #18
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d010      	beq.n	8003faa <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8a:	0c9b      	lsrs	r3, r3, #18
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003f9c:	651a      	str	r2, [r3, #80]	; 0x50
 8003f9e:	4b83      	ldr	r3, [pc, #524]	; (80041ac <HAL_FDCAN_IRQHandler+0x4b0>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f95c 	bl	8004262 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fac:	0c5b      	lsrs	r3, r3, #17
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d015      	beq.n	8003fe2 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb8:	0c5b      	lsrs	r3, r3, #17
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00f      	beq.n	8003fe2 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fca:	651a      	str	r2, [r3, #80]	; 0x50
 8003fcc:	4b77      	ldr	r3, [pc, #476]	; (80041ac <HAL_FDCAN_IRQHandler+0x4b0>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fd8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00d      	beq.n	8004004 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fee:	4b70      	ldr	r3, [pc, #448]	; (80041b0 <HAL_FDCAN_IRQHandler+0x4b4>)
 8003ff0:	400b      	ands	r3, r1
 8003ff2:	6513      	str	r3, [r2, #80]	; 0x50
 8003ff4:	4a6d      	ldr	r2, [pc, #436]	; (80041ac <HAL_FDCAN_IRQHandler+0x4b0>)
 8003ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff8:	0f9b      	lsrs	r3, r3, #30
 8003ffa:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003ffc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f94d 	bl	800429e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004006:	2b00      	cmp	r3, #0
 8004008:	d011      	beq.n	800402e <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004010:	4b67      	ldr	r3, [pc, #412]	; (80041b0 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004012:	400b      	ands	r3, r1
 8004014:	6513      	str	r3, [r2, #80]	; 0x50
 8004016:	4a65      	ldr	r2, [pc, #404]	; (80041ac <HAL_FDCAN_IRQHandler+0x4b0>)
 8004018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800401a:	0f9b      	lsrs	r3, r3, #30
 800401c:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a60      	ldr	r2, [pc, #384]	; (80041b4 <HAL_FDCAN_IRQHandler+0x4b8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	f040 80ac 	bne.w	8004192 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80a4 	beq.w	8004192 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800405e:	4013      	ands	r3, r2
 8004060:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800406c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004076:	4013      	ands	r3, r2
 8004078:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800408e:	4013      	ands	r3, r2
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800409c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	6a3a      	ldr	r2, [r7, #32]
 80040a6:	4013      	ands	r3, r2
 80040a8:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80040b4:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	4013      	ands	r3, r2
 80040c0:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80040d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040de:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80040e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f8e6 	bl	80042b4 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040f4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80040f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f8e6 	bl	80042ca <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	099b      	lsrs	r3, r3, #6
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d01a      	beq.n	8004140 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	099b      	lsrs	r3, r3, #6
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d014      	beq.n	8004140 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411c:	0c1b      	lsrs	r3, r3, #16
 800411e:	b29b      	uxth	r3, r3
 8004120:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800412c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2240      	movs	r2, #64	; 0x40
 8004134:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	6939      	ldr	r1, [r7, #16]
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f8d0 	bl	80042e0 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	2b00      	cmp	r3, #0
 8004144:	d007      	beq.n	8004156 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800414e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f8d1 	bl	80042f8 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00b      	beq.n	8004174 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	6a3a      	ldr	r2, [r7, #32]
 8004162:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00b      	beq.n	8004192 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	69fa      	ldr	r2, [r7, #28]
 8004180:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f874 	bl	800428a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80041a2:	bf00      	nop
 80041a4:	3758      	adds	r7, #88	; 0x58
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	4000a800 	.word	0x4000a800
 80041b0:	3fcfffff 	.word	0x3fcfffff
 80041b4:	4000a000 	.word	0x4000a000

080041b8 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004326:	4ba7      	ldr	r3, [pc, #668]	; (80045c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004328:	4013      	ands	r3, r2
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	0091      	lsls	r1, r2, #2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	430b      	orrs	r3, r1
 8004334:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004340:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	041a      	lsls	r2, r3, #16
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	4413      	add	r3, r2
 800435c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004366:	4b97      	ldr	r3, [pc, #604]	; (80045c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004368:	4013      	ands	r3, r2
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	0091      	lsls	r1, r2, #2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	430b      	orrs	r3, r1
 8004374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004380:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004388:	041a      	lsls	r2, r3, #16
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	4413      	add	r3, r2
 800439e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80043a8:	4b86      	ldr	r3, [pc, #536]	; (80045c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	0091      	lsls	r1, r2, #2
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	430b      	orrs	r3, r1
 80043b6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043c2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	041a      	lsls	r2, r3, #16
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80043de:	fb02 f303 	mul.w	r3, r2, r3
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	4413      	add	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80043f0:	4b74      	ldr	r3, [pc, #464]	; (80045c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80043f2:	4013      	ands	r3, r2
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	0091      	lsls	r1, r2, #2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	430b      	orrs	r3, r1
 80043fe:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800440a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004412:	041a      	lsls	r2, r3, #16
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	4413      	add	r3, r2
 800442e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004438:	4b62      	ldr	r3, [pc, #392]	; (80045c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800443a:	4013      	ands	r3, r2
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	0091      	lsls	r1, r2, #2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6812      	ldr	r2, [r2, #0]
 8004444:	430b      	orrs	r3, r1
 8004446:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004452:	fb02 f303 	mul.w	r3, r2, r3
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	4413      	add	r3, r2
 800445a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004464:	4b57      	ldr	r3, [pc, #348]	; (80045c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004466:	4013      	ands	r3, r2
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	0091      	lsls	r1, r2, #2
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	430b      	orrs	r3, r1
 8004472:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800447e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004486:	041a      	lsls	r2, r3, #16
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	4413      	add	r3, r2
 800449c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80044a6:	4b47      	ldr	r3, [pc, #284]	; (80045c4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	0091      	lsls	r1, r2, #2
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	430b      	orrs	r3, r1
 80044b4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80044c0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c8:	041a      	lsls	r2, r3, #16
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80044dc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e4:	061a      	lsls	r2, r3, #24
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044f4:	4b34      	ldr	r3, [pc, #208]	; (80045c8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80044f6:	4413      	add	r3, r2
 80044f8:	009a      	lsls	r2, r3, #2
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	441a      	add	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	441a      	add	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800452a:	fb01 f303 	mul.w	r3, r1, r3
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	441a      	add	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8004542:	fb01 f303 	mul.w	r3, r1, r3
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	441a      	add	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	441a      	add	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	441a      	add	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800458a:	fb01 f303 	mul.w	r3, r1, r3
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	441a      	add	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80045a6:	fb01 f303 	mul.w	r3, r1, r3
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	441a      	add	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ba:	4a04      	ldr	r2, [pc, #16]	; (80045cc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d915      	bls.n	80045ec <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80045c0:	e006      	b.n	80045d0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80045c2:	bf00      	nop
 80045c4:	ffff0003 	.word	0xffff0003
 80045c8:	10002b00 	.word	0x10002b00
 80045cc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045d6:	f043 0220 	orr.w	r2, r3, #32
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2203      	movs	r2, #3
 80045e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e010      	b.n	800460e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	e005      	b.n	8004600 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3304      	adds	r3, #4
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	429a      	cmp	r2, r3
 800460a:	d3f3      	bcc.n	80045f4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop

0800461c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800461c:	b480      	push	{r7}
 800461e:	b089      	sub	sp, #36	; 0x24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10a      	bne.n	8004648 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800463a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004642:	4313      	orrs	r3, r2
 8004644:	61fb      	str	r3, [r7, #28]
 8004646:	e00a      	b.n	800465e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004650:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8004656:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004658:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800465c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8004668:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800466e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8004674:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800467a:	4313      	orrs	r3, r2
 800467c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004688:	6839      	ldr	r1, [r7, #0]
 800468a:	fb01 f303 	mul.w	r3, r1, r3
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	69fa      	ldr	r2, [r7, #28]
 8004698:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	3304      	adds	r3, #4
 800469e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	3304      	adds	r3, #4
 80046aa:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80046ac:	2300      	movs	r3, #0
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	e020      	b.n	80046f4 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	3303      	adds	r3, #3
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	4413      	add	r3, r2
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	3302      	adds	r3, #2
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	440b      	add	r3, r1
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80046ca:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	3301      	adds	r3, #1
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	440b      	add	r3, r1
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80046d8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	697a      	ldr	r2, [r7, #20]
 80046de:	440a      	add	r2, r1
 80046e0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80046e2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	3304      	adds	r3, #4
 80046ec:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	3304      	adds	r3, #4
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	0c1b      	lsrs	r3, r3, #16
 80046fa:	4a06      	ldr	r2, [pc, #24]	; (8004714 <FDCAN_CopyMessageToRAM+0xf8>)
 80046fc:	5cd3      	ldrb	r3, [r2, r3]
 80046fe:	461a      	mov	r2, r3
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	4293      	cmp	r3, r2
 8004704:	d3d5      	bcc.n	80046b2 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8004706:	bf00      	nop
 8004708:	bf00      	nop
 800470a:	3724      	adds	r7, #36	; 0x24
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	0800fed0 	.word	0x0800fed0

08004718 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004718:	b480      	push	{r7}
 800471a:	b089      	sub	sp, #36	; 0x24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004726:	4b89      	ldr	r3, [pc, #548]	; (800494c <HAL_GPIO_Init+0x234>)
 8004728:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800472a:	e194      	b.n	8004a56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	2101      	movs	r1, #1
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	fa01 f303 	lsl.w	r3, r1, r3
 8004738:	4013      	ands	r3, r2
 800473a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 8186 	beq.w	8004a50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	2b01      	cmp	r3, #1
 800474e:	d005      	beq.n	800475c <HAL_GPIO_Init+0x44>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f003 0303 	and.w	r3, r3, #3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d130      	bne.n	80047be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	2203      	movs	r2, #3
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	43db      	mvns	r3, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4013      	ands	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4313      	orrs	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004792:	2201      	movs	r2, #1
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43db      	mvns	r3, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4013      	ands	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	091b      	lsrs	r3, r3, #4
 80047a8:	f003 0201 	and.w	r2, r3, #1
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d017      	beq.n	80047fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	2203      	movs	r2, #3
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	43db      	mvns	r3, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4013      	ands	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d123      	bne.n	800484e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	08da      	lsrs	r2, r3, #3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	3208      	adds	r2, #8
 800480e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	220f      	movs	r2, #15
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	fa02 f303 	lsl.w	r3, r2, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	08da      	lsrs	r2, r3, #3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3208      	adds	r2, #8
 8004848:	69b9      	ldr	r1, [r7, #24]
 800484a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	2203      	movs	r2, #3
 800485a:	fa02 f303 	lsl.w	r3, r2, r3
 800485e:	43db      	mvns	r3, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4013      	ands	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f003 0203 	and.w	r2, r3, #3
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4313      	orrs	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 80e0 	beq.w	8004a50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004890:	4b2f      	ldr	r3, [pc, #188]	; (8004950 <HAL_GPIO_Init+0x238>)
 8004892:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004896:	4a2e      	ldr	r2, [pc, #184]	; (8004950 <HAL_GPIO_Init+0x238>)
 8004898:	f043 0302 	orr.w	r3, r3, #2
 800489c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80048a0:	4b2b      	ldr	r3, [pc, #172]	; (8004950 <HAL_GPIO_Init+0x238>)
 80048a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048ae:	4a29      	ldr	r2, [pc, #164]	; (8004954 <HAL_GPIO_Init+0x23c>)
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	089b      	lsrs	r3, r3, #2
 80048b4:	3302      	adds	r3, #2
 80048b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	220f      	movs	r2, #15
 80048c6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ca:	43db      	mvns	r3, r3
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4013      	ands	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a20      	ldr	r2, [pc, #128]	; (8004958 <HAL_GPIO_Init+0x240>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d052      	beq.n	8004980 <HAL_GPIO_Init+0x268>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a1f      	ldr	r2, [pc, #124]	; (800495c <HAL_GPIO_Init+0x244>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d031      	beq.n	8004946 <HAL_GPIO_Init+0x22e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a1e      	ldr	r2, [pc, #120]	; (8004960 <HAL_GPIO_Init+0x248>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d02b      	beq.n	8004942 <HAL_GPIO_Init+0x22a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a1d      	ldr	r2, [pc, #116]	; (8004964 <HAL_GPIO_Init+0x24c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d025      	beq.n	800493e <HAL_GPIO_Init+0x226>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a1c      	ldr	r2, [pc, #112]	; (8004968 <HAL_GPIO_Init+0x250>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01f      	beq.n	800493a <HAL_GPIO_Init+0x222>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a1b      	ldr	r2, [pc, #108]	; (800496c <HAL_GPIO_Init+0x254>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d019      	beq.n	8004936 <HAL_GPIO_Init+0x21e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a1a      	ldr	r2, [pc, #104]	; (8004970 <HAL_GPIO_Init+0x258>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <HAL_GPIO_Init+0x21a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a19      	ldr	r2, [pc, #100]	; (8004974 <HAL_GPIO_Init+0x25c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00d      	beq.n	800492e <HAL_GPIO_Init+0x216>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a18      	ldr	r2, [pc, #96]	; (8004978 <HAL_GPIO_Init+0x260>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d007      	beq.n	800492a <HAL_GPIO_Init+0x212>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a17      	ldr	r2, [pc, #92]	; (800497c <HAL_GPIO_Init+0x264>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d101      	bne.n	8004926 <HAL_GPIO_Init+0x20e>
 8004922:	2309      	movs	r3, #9
 8004924:	e02d      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 8004926:	230a      	movs	r3, #10
 8004928:	e02b      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 800492a:	2308      	movs	r3, #8
 800492c:	e029      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 800492e:	2307      	movs	r3, #7
 8004930:	e027      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 8004932:	2306      	movs	r3, #6
 8004934:	e025      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 8004936:	2305      	movs	r3, #5
 8004938:	e023      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 800493a:	2304      	movs	r3, #4
 800493c:	e021      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 800493e:	2303      	movs	r3, #3
 8004940:	e01f      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 8004942:	2302      	movs	r3, #2
 8004944:	e01d      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 8004946:	2301      	movs	r3, #1
 8004948:	e01b      	b.n	8004982 <HAL_GPIO_Init+0x26a>
 800494a:	bf00      	nop
 800494c:	58000080 	.word	0x58000080
 8004950:	58024400 	.word	0x58024400
 8004954:	58000400 	.word	0x58000400
 8004958:	58020000 	.word	0x58020000
 800495c:	58020400 	.word	0x58020400
 8004960:	58020800 	.word	0x58020800
 8004964:	58020c00 	.word	0x58020c00
 8004968:	58021000 	.word	0x58021000
 800496c:	58021400 	.word	0x58021400
 8004970:	58021800 	.word	0x58021800
 8004974:	58021c00 	.word	0x58021c00
 8004978:	58022000 	.word	0x58022000
 800497c:	58022400 	.word	0x58022400
 8004980:	2300      	movs	r3, #0
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	f002 0203 	and.w	r2, r2, #3
 8004988:	0092      	lsls	r2, r2, #2
 800498a:	4093      	lsls	r3, r2
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	4313      	orrs	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004992:	4938      	ldr	r1, [pc, #224]	; (8004a74 <HAL_GPIO_Init+0x35c>)
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	089b      	lsrs	r3, r3, #2
 8004998:	3302      	adds	r3, #2
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	43db      	mvns	r3, r3
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4013      	ands	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80049c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80049ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	43db      	mvns	r3, r3
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	4013      	ands	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80049f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	43db      	mvns	r3, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	4013      	ands	r3, r2
 8004a34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	3301      	adds	r3, #1
 8004a54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f47f ae63 	bne.w	800472c <HAL_GPIO_Init+0x14>
  }
}
 8004a66:	bf00      	nop
 8004a68:	bf00      	nop
 8004a6a:	3724      	adds	r7, #36	; 0x24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	58000400 	.word	0x58000400

08004a78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691a      	ldr	r2, [r3, #16]
 8004a88:	887b      	ldrh	r3, [r7, #2]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a90:	2301      	movs	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
 8004a94:	e001      	b.n	8004a9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a96:	2300      	movs	r3, #0
 8004a98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	807b      	strh	r3, [r7, #2]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ab8:	787b      	ldrb	r3, [r7, #1]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004abe:	887a      	ldrh	r2, [r7, #2]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004ac4:	e003      	b.n	8004ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004ac6:	887b      	ldrh	r3, [r7, #2]
 8004ac8:	041a      	lsls	r2, r3, #16
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	619a      	str	r2, [r3, #24]
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ada:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004adc:	b08f      	sub	sp, #60	; 0x3c
 8004ade:	af0a      	add	r7, sp, #40	; 0x28
 8004ae0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e116      	b.n	8004d1a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fc fe18 	bl	800173c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2203      	movs	r2, #3
 8004b10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d102      	bne.n	8004b26 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f005 fc50 	bl	800a3d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	603b      	str	r3, [r7, #0]
 8004b36:	687e      	ldr	r6, [r7, #4]
 8004b38:	466d      	mov	r5, sp
 8004b3a:	f106 0410 	add.w	r4, r6, #16
 8004b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b4e:	1d33      	adds	r3, r6, #4
 8004b50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b52:	6838      	ldr	r0, [r7, #0]
 8004b54:	f005 fbce 	bl	800a2f4 <USB_CoreInit>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e0d7      	b.n	8004d1a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2100      	movs	r1, #0
 8004b70:	4618      	mov	r0, r3
 8004b72:	f005 fc3e 	bl	800a3f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b76:	2300      	movs	r3, #0
 8004b78:	73fb      	strb	r3, [r7, #15]
 8004b7a:	e04a      	b.n	8004c12 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b7c:	7bfa      	ldrb	r2, [r7, #15]
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	4613      	mov	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	333d      	adds	r3, #61	; 0x3d
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b90:	7bfa      	ldrb	r2, [r7, #15]
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	333c      	adds	r3, #60	; 0x3c
 8004ba0:	7bfa      	ldrb	r2, [r7, #15]
 8004ba2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ba4:	7bfa      	ldrb	r2, [r7, #15]
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	b298      	uxth	r0, r3
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	3344      	adds	r3, #68	; 0x44
 8004bb8:	4602      	mov	r2, r0
 8004bba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004bbc:	7bfa      	ldrb	r2, [r7, #15]
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	3340      	adds	r3, #64	; 0x40
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004bd0:	7bfa      	ldrb	r2, [r7, #15]
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	3348      	adds	r3, #72	; 0x48
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004be4:	7bfa      	ldrb	r2, [r7, #15]
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4613      	mov	r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	334c      	adds	r3, #76	; 0x4c
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004bf8:	7bfa      	ldrb	r2, [r7, #15]
 8004bfa:	6879      	ldr	r1, [r7, #4]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	440b      	add	r3, r1
 8004c06:	3354      	adds	r3, #84	; 0x54
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	73fb      	strb	r3, [r7, #15]
 8004c12:	7bfa      	ldrb	r2, [r7, #15]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d3af      	bcc.n	8004b7c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	e044      	b.n	8004cac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c22:	7bfa      	ldrb	r2, [r7, #15]
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4613      	mov	r3, r2
 8004c28:	00db      	lsls	r3, r3, #3
 8004c2a:	4413      	add	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	440b      	add	r3, r1
 8004c30:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c38:	7bfa      	ldrb	r2, [r7, #15]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	4413      	add	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004c4a:	7bfa      	ldrb	r2, [r7, #15]
 8004c4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c4e:	7bfa      	ldrb	r2, [r7, #15]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	4413      	add	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c64:	7bfa      	ldrb	r2, [r7, #15]
 8004c66:	6879      	ldr	r1, [r7, #4]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	440b      	add	r3, r1
 8004c72:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c7a:	7bfa      	ldrb	r2, [r7, #15]
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	4413      	add	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c90:	7bfa      	ldrb	r2, [r7, #15]
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	4613      	mov	r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	4413      	add	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
 8004cac:	7bfa      	ldrb	r2, [r7, #15]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d3b5      	bcc.n	8004c22 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	687e      	ldr	r6, [r7, #4]
 8004cbe:	466d      	mov	r5, sp
 8004cc0:	f106 0410 	add.w	r4, r6, #16
 8004cc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ccc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004cd4:	1d33      	adds	r3, r6, #4
 8004cd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cd8:	6838      	ldr	r0, [r7, #0]
 8004cda:	f005 fbd7 	bl	800a48c <USB_DevInit>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e014      	b.n	8004d1a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d102      	bne.n	8004d0e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f80b 	bl	8004d24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f005 fd95 	bl	800a842 <USB_DevDisconnect>

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004d24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d52:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <HAL_PCDEx_ActivateLPM+0x44>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	10000003 	.word	0x10000003

08004d6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004d74:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <HAL_PWREx_ConfigSupply+0x70>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d00a      	beq.n	8004d96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004d80:	4b16      	ldr	r3, [pc, #88]	; (8004ddc <HAL_PWREx_ConfigSupply+0x70>)
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0307 	and.w	r3, r3, #7
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d001      	beq.n	8004d92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e01f      	b.n	8004dd2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e01d      	b.n	8004dd2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004d96:	4b11      	ldr	r3, [pc, #68]	; (8004ddc <HAL_PWREx_ConfigSupply+0x70>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f023 0207 	bic.w	r2, r3, #7
 8004d9e:	490f      	ldr	r1, [pc, #60]	; (8004ddc <HAL_PWREx_ConfigSupply+0x70>)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004da6:	f7fc ffb5 	bl	8001d14 <HAL_GetTick>
 8004daa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004dac:	e009      	b.n	8004dc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004dae:	f7fc ffb1 	bl	8001d14 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dbc:	d901      	bls.n	8004dc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e007      	b.n	8004dd2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004dc2:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <HAL_PWREx_ConfigSupply+0x70>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dce:	d1ee      	bne.n	8004dae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	58024800 	.word	0x58024800

08004de0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004de4:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	4a04      	ldr	r2, [pc, #16]	; (8004dfc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dee:	60d3      	str	r3, [r2, #12]
}
 8004df0:	bf00      	nop
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	58024800 	.word	0x58024800

08004e00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08c      	sub	sp, #48	; 0x30
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d102      	bne.n	8004e14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f000 bc1d 	b.w	800564e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8087 	beq.w	8004f30 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e22:	4b99      	ldr	r3, [pc, #612]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e2c:	4b96      	ldr	r3, [pc, #600]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	d007      	beq.n	8004e48 <HAL_RCC_OscConfig+0x48>
 8004e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3a:	2b18      	cmp	r3, #24
 8004e3c:	d110      	bne.n	8004e60 <HAL_RCC_OscConfig+0x60>
 8004e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d10b      	bne.n	8004e60 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e48:	4b8f      	ldr	r3, [pc, #572]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d06c      	beq.n	8004f2e <HAL_RCC_OscConfig+0x12e>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d168      	bne.n	8004f2e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e3f6      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e68:	d106      	bne.n	8004e78 <HAL_RCC_OscConfig+0x78>
 8004e6a:	4b87      	ldr	r3, [pc, #540]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a86      	ldr	r2, [pc, #536]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e02e      	b.n	8004ed6 <HAL_RCC_OscConfig+0xd6>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10c      	bne.n	8004e9a <HAL_RCC_OscConfig+0x9a>
 8004e80:	4b81      	ldr	r3, [pc, #516]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a80      	ldr	r2, [pc, #512]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	4b7e      	ldr	r3, [pc, #504]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a7d      	ldr	r2, [pc, #500]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	e01d      	b.n	8004ed6 <HAL_RCC_OscConfig+0xd6>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ea2:	d10c      	bne.n	8004ebe <HAL_RCC_OscConfig+0xbe>
 8004ea4:	4b78      	ldr	r3, [pc, #480]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a77      	ldr	r2, [pc, #476]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004eaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eae:	6013      	str	r3, [r2, #0]
 8004eb0:	4b75      	ldr	r3, [pc, #468]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a74      	ldr	r2, [pc, #464]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	e00b      	b.n	8004ed6 <HAL_RCC_OscConfig+0xd6>
 8004ebe:	4b72      	ldr	r3, [pc, #456]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a71      	ldr	r2, [pc, #452]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	4b6f      	ldr	r3, [pc, #444]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a6e      	ldr	r2, [pc, #440]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ed4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d013      	beq.n	8004f06 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ede:	f7fc ff19 	bl	8001d14 <HAL_GetTick>
 8004ee2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ee6:	f7fc ff15 	bl	8001d14 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b64      	cmp	r3, #100	; 0x64
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e3aa      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ef8:	4b63      	ldr	r3, [pc, #396]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCC_OscConfig+0xe6>
 8004f04:	e014      	b.n	8004f30 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f06:	f7fc ff05 	bl	8001d14 <HAL_GetTick>
 8004f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f0e:	f7fc ff01 	bl	8001d14 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b64      	cmp	r3, #100	; 0x64
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e396      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f20:	4b59      	ldr	r3, [pc, #356]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f0      	bne.n	8004f0e <HAL_RCC_OscConfig+0x10e>
 8004f2c:	e000      	b.n	8004f30 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f2e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 80cb 	beq.w	80050d4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f3e:	4b52      	ldr	r3, [pc, #328]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f46:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f48:	4b4f      	ldr	r3, [pc, #316]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d007      	beq.n	8004f64 <HAL_RCC_OscConfig+0x164>
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	2b18      	cmp	r3, #24
 8004f58:	d156      	bne.n	8005008 <HAL_RCC_OscConfig+0x208>
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d151      	bne.n	8005008 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f64:	4b48      	ldr	r3, [pc, #288]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0304 	and.w	r3, r3, #4
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_RCC_OscConfig+0x17c>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e368      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004f7c:	4b42      	ldr	r3, [pc, #264]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f023 0219 	bic.w	r2, r3, #25
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	493f      	ldr	r1, [pc, #252]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f8e:	f7fc fec1 	bl	8001d14 <HAL_GetTick>
 8004f92:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f96:	f7fc febd 	bl	8001d14 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e352      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fa8:	4b37      	ldr	r3, [pc, #220]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0f0      	beq.n	8004f96 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb4:	f7fc fede 	bl	8001d74 <HAL_GetREVID>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	f241 0203 	movw	r2, #4099	; 0x1003
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d817      	bhi.n	8004ff2 <HAL_RCC_OscConfig+0x1f2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	2b40      	cmp	r3, #64	; 0x40
 8004fc8:	d108      	bne.n	8004fdc <HAL_RCC_OscConfig+0x1dc>
 8004fca:	4b2f      	ldr	r3, [pc, #188]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004fd2:	4a2d      	ldr	r2, [pc, #180]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fd8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fda:	e07b      	b.n	80050d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fdc:	4b2a      	ldr	r3, [pc, #168]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	031b      	lsls	r3, r3, #12
 8004fea:	4927      	ldr	r1, [pc, #156]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ff0:	e070      	b.n	80050d4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff2:	4b25      	ldr	r3, [pc, #148]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	061b      	lsls	r3, r3, #24
 8005000:	4921      	ldr	r1, [pc, #132]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8005002:	4313      	orrs	r3, r2
 8005004:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005006:	e065      	b.n	80050d4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d048      	beq.n	80050a2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005010:	4b1d      	ldr	r3, [pc, #116]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f023 0219 	bic.w	r2, r3, #25
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	491a      	ldr	r1, [pc, #104]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 800501e:	4313      	orrs	r3, r2
 8005020:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005022:	f7fc fe77 	bl	8001d14 <HAL_GetTick>
 8005026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800502a:	f7fc fe73 	bl	8001d14 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e308      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800503c:	4b12      	ldr	r3, [pc, #72]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0f0      	beq.n	800502a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005048:	f7fc fe94 	bl	8001d74 <HAL_GetREVID>
 800504c:	4603      	mov	r3, r0
 800504e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005052:	4293      	cmp	r3, r2
 8005054:	d81a      	bhi.n	800508c <HAL_RCC_OscConfig+0x28c>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	2b40      	cmp	r3, #64	; 0x40
 800505c:	d108      	bne.n	8005070 <HAL_RCC_OscConfig+0x270>
 800505e:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005066:	4a08      	ldr	r2, [pc, #32]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8005068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800506c:	6053      	str	r3, [r2, #4]
 800506e:	e031      	b.n	80050d4 <HAL_RCC_OscConfig+0x2d4>
 8005070:	4b05      	ldr	r3, [pc, #20]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	031b      	lsls	r3, r3, #12
 800507e:	4902      	ldr	r1, [pc, #8]	; (8005088 <HAL_RCC_OscConfig+0x288>)
 8005080:	4313      	orrs	r3, r2
 8005082:	604b      	str	r3, [r1, #4]
 8005084:	e026      	b.n	80050d4 <HAL_RCC_OscConfig+0x2d4>
 8005086:	bf00      	nop
 8005088:	58024400 	.word	0x58024400
 800508c:	4b9a      	ldr	r3, [pc, #616]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	061b      	lsls	r3, r3, #24
 800509a:	4997      	ldr	r1, [pc, #604]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 800509c:	4313      	orrs	r3, r2
 800509e:	604b      	str	r3, [r1, #4]
 80050a0:	e018      	b.n	80050d4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050a2:	4b95      	ldr	r3, [pc, #596]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a94      	ldr	r2, [pc, #592]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ae:	f7fc fe31 	bl	8001d14 <HAL_GetTick>
 80050b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050b4:	e008      	b.n	80050c8 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050b6:	f7fc fe2d 	bl	8001d14 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e2c2      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050c8:	4b8b      	ldr	r3, [pc, #556]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f0      	bne.n	80050b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 80a9 	beq.w	8005234 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050e2:	4b85      	ldr	r3, [pc, #532]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050ec:	4b82      	ldr	r3, [pc, #520]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 80050ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d007      	beq.n	8005108 <HAL_RCC_OscConfig+0x308>
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	2b18      	cmp	r3, #24
 80050fc:	d13a      	bne.n	8005174 <HAL_RCC_OscConfig+0x374>
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	2b01      	cmp	r3, #1
 8005106:	d135      	bne.n	8005174 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005108:	4b7b      	ldr	r3, [pc, #492]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <HAL_RCC_OscConfig+0x320>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	2b80      	cmp	r3, #128	; 0x80
 800511a:	d001      	beq.n	8005120 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e296      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005120:	f7fc fe28 	bl	8001d74 <HAL_GetREVID>
 8005124:	4603      	mov	r3, r0
 8005126:	f241 0203 	movw	r2, #4099	; 0x1003
 800512a:	4293      	cmp	r3, r2
 800512c:	d817      	bhi.n	800515e <HAL_RCC_OscConfig+0x35e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	2b20      	cmp	r3, #32
 8005134:	d108      	bne.n	8005148 <HAL_RCC_OscConfig+0x348>
 8005136:	4b70      	ldr	r3, [pc, #448]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800513e:	4a6e      	ldr	r2, [pc, #440]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 8005140:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005144:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005146:	e075      	b.n	8005234 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005148:	4b6b      	ldr	r3, [pc, #428]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	069b      	lsls	r3, r3, #26
 8005156:	4968      	ldr	r1, [pc, #416]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 8005158:	4313      	orrs	r3, r2
 800515a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800515c:	e06a      	b.n	8005234 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800515e:	4b66      	ldr	r3, [pc, #408]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	061b      	lsls	r3, r3, #24
 800516c:	4962      	ldr	r1, [pc, #392]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 800516e:	4313      	orrs	r3, r2
 8005170:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005172:	e05f      	b.n	8005234 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d042      	beq.n	8005202 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800517c:	4b5e      	ldr	r3, [pc, #376]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a5d      	ldr	r2, [pc, #372]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 8005182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005188:	f7fc fdc4 	bl	8001d14 <HAL_GetTick>
 800518c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800518e:	e008      	b.n	80051a2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005190:	f7fc fdc0 	bl	8001d14 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e255      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80051a2:	4b55      	ldr	r3, [pc, #340]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d0f0      	beq.n	8005190 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051ae:	f7fc fde1 	bl	8001d74 <HAL_GetREVID>
 80051b2:	4603      	mov	r3, r0
 80051b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d817      	bhi.n	80051ec <HAL_RCC_OscConfig+0x3ec>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	2b20      	cmp	r3, #32
 80051c2:	d108      	bne.n	80051d6 <HAL_RCC_OscConfig+0x3d6>
 80051c4:	4b4c      	ldr	r3, [pc, #304]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80051cc:	4a4a      	ldr	r2, [pc, #296]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 80051ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d2:	6053      	str	r3, [r2, #4]
 80051d4:	e02e      	b.n	8005234 <HAL_RCC_OscConfig+0x434>
 80051d6:	4b48      	ldr	r3, [pc, #288]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	069b      	lsls	r3, r3, #26
 80051e4:	4944      	ldr	r1, [pc, #272]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	604b      	str	r3, [r1, #4]
 80051ea:	e023      	b.n	8005234 <HAL_RCC_OscConfig+0x434>
 80051ec:	4b42      	ldr	r3, [pc, #264]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	061b      	lsls	r3, r3, #24
 80051fa:	493f      	ldr	r1, [pc, #252]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60cb      	str	r3, [r1, #12]
 8005200:	e018      	b.n	8005234 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005202:	4b3d      	ldr	r3, [pc, #244]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a3c      	ldr	r2, [pc, #240]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 8005208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800520c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520e:	f7fc fd81 	bl	8001d14 <HAL_GetTick>
 8005212:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005214:	e008      	b.n	8005228 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005216:	f7fc fd7d 	bl	8001d14 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e212      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005228:	4b33      	ldr	r3, [pc, #204]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1f0      	bne.n	8005216 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b00      	cmp	r3, #0
 800523e:	d036      	beq.n	80052ae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d019      	beq.n	800527c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005248:	4b2b      	ldr	r3, [pc, #172]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 800524a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800524c:	4a2a      	ldr	r2, [pc, #168]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 800524e:	f043 0301 	orr.w	r3, r3, #1
 8005252:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005254:	f7fc fd5e 	bl	8001d14 <HAL_GetTick>
 8005258:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800525c:	f7fc fd5a 	bl	8001d14 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e1ef      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800526e:	4b22      	ldr	r3, [pc, #136]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 8005270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0f0      	beq.n	800525c <HAL_RCC_OscConfig+0x45c>
 800527a:	e018      	b.n	80052ae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800527c:	4b1e      	ldr	r3, [pc, #120]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 800527e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005280:	4a1d      	ldr	r2, [pc, #116]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 8005282:	f023 0301 	bic.w	r3, r3, #1
 8005286:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005288:	f7fc fd44 	bl	8001d14 <HAL_GetTick>
 800528c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800528e:	e008      	b.n	80052a2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005290:	f7fc fd40 	bl	8001d14 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e1d5      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052a2:	4b15      	ldr	r3, [pc, #84]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 80052a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d039      	beq.n	800532e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d01c      	beq.n	80052fc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052c2:	4b0d      	ldr	r3, [pc, #52]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a0c      	ldr	r2, [pc, #48]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 80052c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80052ce:	f7fc fd21 	bl	8001d14 <HAL_GetTick>
 80052d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052d4:	e008      	b.n	80052e8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80052d6:	f7fc fd1d 	bl	8001d14 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e1b2      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80052e8:	4b03      	ldr	r3, [pc, #12]	; (80052f8 <HAL_RCC_OscConfig+0x4f8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0f0      	beq.n	80052d6 <HAL_RCC_OscConfig+0x4d6>
 80052f4:	e01b      	b.n	800532e <HAL_RCC_OscConfig+0x52e>
 80052f6:	bf00      	nop
 80052f8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052fc:	4b9b      	ldr	r3, [pc, #620]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a9a      	ldr	r2, [pc, #616]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005306:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005308:	f7fc fd04 	bl	8001d14 <HAL_GetTick>
 800530c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005310:	f7fc fd00 	bl	8001d14 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e195      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005322:	4b92      	ldr	r3, [pc, #584]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1f0      	bne.n	8005310 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	f000 8081 	beq.w	800543e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800533c:	4b8c      	ldr	r3, [pc, #560]	; (8005570 <HAL_RCC_OscConfig+0x770>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a8b      	ldr	r2, [pc, #556]	; (8005570 <HAL_RCC_OscConfig+0x770>)
 8005342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005346:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005348:	f7fc fce4 	bl	8001d14 <HAL_GetTick>
 800534c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005350:	f7fc fce0 	bl	8001d14 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e175      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005362:	4b83      	ldr	r3, [pc, #524]	; (8005570 <HAL_RCC_OscConfig+0x770>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f0      	beq.n	8005350 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d106      	bne.n	8005384 <HAL_RCC_OscConfig+0x584>
 8005376:	4b7d      	ldr	r3, [pc, #500]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800537a:	4a7c      	ldr	r2, [pc, #496]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	6713      	str	r3, [r2, #112]	; 0x70
 8005382:	e02d      	b.n	80053e0 <HAL_RCC_OscConfig+0x5e0>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10c      	bne.n	80053a6 <HAL_RCC_OscConfig+0x5a6>
 800538c:	4b77      	ldr	r3, [pc, #476]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 800538e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005390:	4a76      	ldr	r2, [pc, #472]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005392:	f023 0301 	bic.w	r3, r3, #1
 8005396:	6713      	str	r3, [r2, #112]	; 0x70
 8005398:	4b74      	ldr	r3, [pc, #464]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 800539a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539c:	4a73      	ldr	r2, [pc, #460]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 800539e:	f023 0304 	bic.w	r3, r3, #4
 80053a2:	6713      	str	r3, [r2, #112]	; 0x70
 80053a4:	e01c      	b.n	80053e0 <HAL_RCC_OscConfig+0x5e0>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b05      	cmp	r3, #5
 80053ac:	d10c      	bne.n	80053c8 <HAL_RCC_OscConfig+0x5c8>
 80053ae:	4b6f      	ldr	r3, [pc, #444]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b2:	4a6e      	ldr	r2, [pc, #440]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 80053b4:	f043 0304 	orr.w	r3, r3, #4
 80053b8:	6713      	str	r3, [r2, #112]	; 0x70
 80053ba:	4b6c      	ldr	r3, [pc, #432]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 80053bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053be:	4a6b      	ldr	r2, [pc, #428]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 80053c0:	f043 0301 	orr.w	r3, r3, #1
 80053c4:	6713      	str	r3, [r2, #112]	; 0x70
 80053c6:	e00b      	b.n	80053e0 <HAL_RCC_OscConfig+0x5e0>
 80053c8:	4b68      	ldr	r3, [pc, #416]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 80053ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053cc:	4a67      	ldr	r2, [pc, #412]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 80053ce:	f023 0301 	bic.w	r3, r3, #1
 80053d2:	6713      	str	r3, [r2, #112]	; 0x70
 80053d4:	4b65      	ldr	r3, [pc, #404]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 80053d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d8:	4a64      	ldr	r2, [pc, #400]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 80053da:	f023 0304 	bic.w	r3, r3, #4
 80053de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d015      	beq.n	8005414 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e8:	f7fc fc94 	bl	8001d14 <HAL_GetTick>
 80053ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053ee:	e00a      	b.n	8005406 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053f0:	f7fc fc90 	bl	8001d14 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fe:	4293      	cmp	r3, r2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e123      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005406:	4b59      	ldr	r3, [pc, #356]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d0ee      	beq.n	80053f0 <HAL_RCC_OscConfig+0x5f0>
 8005412:	e014      	b.n	800543e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005414:	f7fc fc7e 	bl	8001d14 <HAL_GetTick>
 8005418:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800541a:	e00a      	b.n	8005432 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800541c:	f7fc fc7a 	bl	8001d14 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	f241 3288 	movw	r2, #5000	; 0x1388
 800542a:	4293      	cmp	r3, r2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e10d      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005432:	4b4e      	ldr	r3, [pc, #312]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1ee      	bne.n	800541c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 8102 	beq.w	800564c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005448:	4b48      	ldr	r3, [pc, #288]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005450:	2b18      	cmp	r3, #24
 8005452:	f000 80bd 	beq.w	80055d0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	2b02      	cmp	r3, #2
 800545c:	f040 809e 	bne.w	800559c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005460:	4b42      	ldr	r3, [pc, #264]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a41      	ldr	r2, [pc, #260]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800546a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546c:	f7fc fc52 	bl	8001d14 <HAL_GetTick>
 8005470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005474:	f7fc fc4e 	bl	8001d14 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e0e3      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005486:	4b39      	ldr	r3, [pc, #228]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f0      	bne.n	8005474 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005492:	4b36      	ldr	r3, [pc, #216]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005496:	4b37      	ldr	r3, [pc, #220]	; (8005574 <HAL_RCC_OscConfig+0x774>)
 8005498:	4013      	ands	r3, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80054a2:	0112      	lsls	r2, r2, #4
 80054a4:	430a      	orrs	r2, r1
 80054a6:	4931      	ldr	r1, [pc, #196]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	628b      	str	r3, [r1, #40]	; 0x28
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	3b01      	subs	r3, #1
 80054b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ba:	3b01      	subs	r3, #1
 80054bc:	025b      	lsls	r3, r3, #9
 80054be:	b29b      	uxth	r3, r3
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	3b01      	subs	r3, #1
 80054c8:	041b      	lsls	r3, r3, #16
 80054ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054ce:	431a      	orrs	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d4:	3b01      	subs	r3, #1
 80054d6:	061b      	lsls	r3, r3, #24
 80054d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054dc:	4923      	ldr	r1, [pc, #140]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80054e2:	4b22      	ldr	r3, [pc, #136]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 80054e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e6:	4a21      	ldr	r2, [pc, #132]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 80054e8:	f023 0301 	bic.w	r3, r3, #1
 80054ec:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80054ee:	4b1f      	ldr	r3, [pc, #124]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 80054f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f2:	4b21      	ldr	r3, [pc, #132]	; (8005578 <HAL_RCC_OscConfig+0x778>)
 80054f4:	4013      	ands	r3, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80054fa:	00d2      	lsls	r2, r2, #3
 80054fc:	491b      	ldr	r1, [pc, #108]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005502:	4b1a      	ldr	r3, [pc, #104]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005506:	f023 020c 	bic.w	r2, r3, #12
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	4917      	ldr	r1, [pc, #92]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005510:	4313      	orrs	r3, r2
 8005512:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005514:	4b15      	ldr	r3, [pc, #84]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005518:	f023 0202 	bic.w	r2, r3, #2
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005520:	4912      	ldr	r1, [pc, #72]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005522:	4313      	orrs	r3, r2
 8005524:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005526:	4b11      	ldr	r3, [pc, #68]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552a:	4a10      	ldr	r2, [pc, #64]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 800552c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005530:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005532:	4b0e      	ldr	r3, [pc, #56]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005536:	4a0d      	ldr	r2, [pc, #52]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800553c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800553e:	4b0b      	ldr	r3, [pc, #44]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005542:	4a0a      	ldr	r2, [pc, #40]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005548:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800554a:	4b08      	ldr	r3, [pc, #32]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	4a07      	ldr	r2, [pc, #28]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005550:	f043 0301 	orr.w	r3, r3, #1
 8005554:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005556:	4b05      	ldr	r3, [pc, #20]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a04      	ldr	r2, [pc, #16]	; (800556c <HAL_RCC_OscConfig+0x76c>)
 800555c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005562:	f7fc fbd7 	bl	8001d14 <HAL_GetTick>
 8005566:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005568:	e011      	b.n	800558e <HAL_RCC_OscConfig+0x78e>
 800556a:	bf00      	nop
 800556c:	58024400 	.word	0x58024400
 8005570:	58024800 	.word	0x58024800
 8005574:	fffffc0c 	.word	0xfffffc0c
 8005578:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800557c:	f7fc fbca 	bl	8001d14 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e05f      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800558e:	4b32      	ldr	r3, [pc, #200]	; (8005658 <HAL_RCC_OscConfig+0x858>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0f0      	beq.n	800557c <HAL_RCC_OscConfig+0x77c>
 800559a:	e057      	b.n	800564c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800559c:	4b2e      	ldr	r3, [pc, #184]	; (8005658 <HAL_RCC_OscConfig+0x858>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a2d      	ldr	r2, [pc, #180]	; (8005658 <HAL_RCC_OscConfig+0x858>)
 80055a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7fc fbb4 	bl	8001d14 <HAL_GetTick>
 80055ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055b0:	f7fc fbb0 	bl	8001d14 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e045      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055c2:	4b25      	ldr	r3, [pc, #148]	; (8005658 <HAL_RCC_OscConfig+0x858>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x7b0>
 80055ce:	e03d      	b.n	800564c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80055d0:	4b21      	ldr	r3, [pc, #132]	; (8005658 <HAL_RCC_OscConfig+0x858>)
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80055d6:	4b20      	ldr	r3, [pc, #128]	; (8005658 <HAL_RCC_OscConfig+0x858>)
 80055d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055da:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d031      	beq.n	8005648 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f003 0203 	and.w	r2, r3, #3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d12a      	bne.n	8005648 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	091b      	lsrs	r3, r3, #4
 80055f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055fe:	429a      	cmp	r2, r3
 8005600:	d122      	bne.n	8005648 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800560e:	429a      	cmp	r2, r3
 8005610:	d11a      	bne.n	8005648 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	0a5b      	lsrs	r3, r3, #9
 8005616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005620:	429a      	cmp	r2, r3
 8005622:	d111      	bne.n	8005648 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	0c1b      	lsrs	r3, r3, #16
 8005628:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005632:	429a      	cmp	r2, r3
 8005634:	d108      	bne.n	8005648 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	0e1b      	lsrs	r3, r3, #24
 800563a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005642:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005644:	429a      	cmp	r2, r3
 8005646:	d001      	beq.n	800564c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e000      	b.n	800564e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3730      	adds	r7, #48	; 0x30
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	58024400 	.word	0x58024400

0800565c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e19c      	b.n	80059aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005670:	4b8a      	ldr	r3, [pc, #552]	; (800589c <HAL_RCC_ClockConfig+0x240>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 030f 	and.w	r3, r3, #15
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d910      	bls.n	80056a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800567e:	4b87      	ldr	r3, [pc, #540]	; (800589c <HAL_RCC_ClockConfig+0x240>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f023 020f 	bic.w	r2, r3, #15
 8005686:	4985      	ldr	r1, [pc, #532]	; (800589c <HAL_RCC_ClockConfig+0x240>)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	4313      	orrs	r3, r2
 800568c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800568e:	4b83      	ldr	r3, [pc, #524]	; (800589c <HAL_RCC_ClockConfig+0x240>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d001      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e184      	b.n	80059aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d010      	beq.n	80056ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	4b7b      	ldr	r3, [pc, #492]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d908      	bls.n	80056ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80056bc:	4b78      	ldr	r3, [pc, #480]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	4975      	ldr	r1, [pc, #468]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d010      	beq.n	80056fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695a      	ldr	r2, [r3, #20]
 80056de:	4b70      	ldr	r3, [pc, #448]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d908      	bls.n	80056fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80056ea:	4b6d      	ldr	r3, [pc, #436]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	496a      	ldr	r1, [pc, #424]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	2b00      	cmp	r3, #0
 8005706:	d010      	beq.n	800572a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	699a      	ldr	r2, [r3, #24]
 800570c:	4b64      	ldr	r3, [pc, #400]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005714:	429a      	cmp	r2, r3
 8005716:	d908      	bls.n	800572a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005718:	4b61      	ldr	r3, [pc, #388]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	495e      	ldr	r1, [pc, #376]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 8005726:	4313      	orrs	r3, r2
 8005728:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0320 	and.w	r3, r3, #32
 8005732:	2b00      	cmp	r3, #0
 8005734:	d010      	beq.n	8005758 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69da      	ldr	r2, [r3, #28]
 800573a:	4b59      	ldr	r3, [pc, #356]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005742:	429a      	cmp	r2, r3
 8005744:	d908      	bls.n	8005758 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005746:	4b56      	ldr	r3, [pc, #344]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	4953      	ldr	r1, [pc, #332]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 8005754:	4313      	orrs	r3, r2
 8005756:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d010      	beq.n	8005786 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	4b4d      	ldr	r3, [pc, #308]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	429a      	cmp	r2, r3
 8005772:	d908      	bls.n	8005786 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005774:	4b4a      	ldr	r3, [pc, #296]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	f023 020f 	bic.w	r2, r3, #15
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	4947      	ldr	r1, [pc, #284]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 8005782:	4313      	orrs	r3, r2
 8005784:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d055      	beq.n	800583e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005792:	4b43      	ldr	r3, [pc, #268]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	4940      	ldr	r1, [pc, #256]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d107      	bne.n	80057bc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057ac:	4b3c      	ldr	r3, [pc, #240]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d121      	bne.n	80057fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e0f6      	b.n	80059aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d107      	bne.n	80057d4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057c4:	4b36      	ldr	r3, [pc, #216]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d115      	bne.n	80057fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e0ea      	b.n	80059aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d107      	bne.n	80057ec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80057dc:	4b30      	ldr	r3, [pc, #192]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d109      	bne.n	80057fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e0de      	b.n	80059aa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057ec:	4b2c      	ldr	r3, [pc, #176]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d101      	bne.n	80057fc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0d6      	b.n	80059aa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057fc:	4b28      	ldr	r3, [pc, #160]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	f023 0207 	bic.w	r2, r3, #7
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	4925      	ldr	r1, [pc, #148]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 800580a:	4313      	orrs	r3, r2
 800580c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800580e:	f7fc fa81 	bl	8001d14 <HAL_GetTick>
 8005812:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005814:	e00a      	b.n	800582c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005816:	f7fc fa7d 	bl	8001d14 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	f241 3288 	movw	r2, #5000	; 0x1388
 8005824:	4293      	cmp	r3, r2
 8005826:	d901      	bls.n	800582c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e0be      	b.n	80059aa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582c:	4b1c      	ldr	r3, [pc, #112]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	429a      	cmp	r2, r3
 800583c:	d1eb      	bne.n	8005816 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d010      	beq.n	800586c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68da      	ldr	r2, [r3, #12]
 800584e:	4b14      	ldr	r3, [pc, #80]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	429a      	cmp	r2, r3
 8005858:	d208      	bcs.n	800586c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800585a:	4b11      	ldr	r3, [pc, #68]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	f023 020f 	bic.w	r2, r3, #15
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	490e      	ldr	r1, [pc, #56]	; (80058a0 <HAL_RCC_ClockConfig+0x244>)
 8005868:	4313      	orrs	r3, r2
 800586a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800586c:	4b0b      	ldr	r3, [pc, #44]	; (800589c <HAL_RCC_ClockConfig+0x240>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d214      	bcs.n	80058a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800587a:	4b08      	ldr	r3, [pc, #32]	; (800589c <HAL_RCC_ClockConfig+0x240>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f023 020f 	bic.w	r2, r3, #15
 8005882:	4906      	ldr	r1, [pc, #24]	; (800589c <HAL_RCC_ClockConfig+0x240>)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	4313      	orrs	r3, r2
 8005888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800588a:	4b04      	ldr	r3, [pc, #16]	; (800589c <HAL_RCC_ClockConfig+0x240>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d005      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e086      	b.n	80059aa <HAL_RCC_ClockConfig+0x34e>
 800589c:	52002000 	.word	0x52002000
 80058a0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d010      	beq.n	80058d2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691a      	ldr	r2, [r3, #16]
 80058b4:	4b3f      	ldr	r3, [pc, #252]	; (80059b4 <HAL_RCC_ClockConfig+0x358>)
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058bc:	429a      	cmp	r2, r3
 80058be:	d208      	bcs.n	80058d2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80058c0:	4b3c      	ldr	r3, [pc, #240]	; (80059b4 <HAL_RCC_ClockConfig+0x358>)
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	4939      	ldr	r1, [pc, #228]	; (80059b4 <HAL_RCC_ClockConfig+0x358>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d010      	beq.n	8005900 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695a      	ldr	r2, [r3, #20]
 80058e2:	4b34      	ldr	r3, [pc, #208]	; (80059b4 <HAL_RCC_ClockConfig+0x358>)
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d208      	bcs.n	8005900 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80058ee:	4b31      	ldr	r3, [pc, #196]	; (80059b4 <HAL_RCC_ClockConfig+0x358>)
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	492e      	ldr	r1, [pc, #184]	; (80059b4 <HAL_RCC_ClockConfig+0x358>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0310 	and.w	r3, r3, #16
 8005908:	2b00      	cmp	r3, #0
 800590a:	d010      	beq.n	800592e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699a      	ldr	r2, [r3, #24]
 8005910:	4b28      	ldr	r3, [pc, #160]	; (80059b4 <HAL_RCC_ClockConfig+0x358>)
 8005912:	69db      	ldr	r3, [r3, #28]
 8005914:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005918:	429a      	cmp	r2, r3
 800591a:	d208      	bcs.n	800592e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800591c:	4b25      	ldr	r3, [pc, #148]	; (80059b4 <HAL_RCC_ClockConfig+0x358>)
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	4922      	ldr	r1, [pc, #136]	; (80059b4 <HAL_RCC_ClockConfig+0x358>)
 800592a:	4313      	orrs	r3, r2
 800592c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d010      	beq.n	800595c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	69da      	ldr	r2, [r3, #28]
 800593e:	4b1d      	ldr	r3, [pc, #116]	; (80059b4 <HAL_RCC_ClockConfig+0x358>)
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005946:	429a      	cmp	r2, r3
 8005948:	d208      	bcs.n	800595c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800594a:	4b1a      	ldr	r3, [pc, #104]	; (80059b4 <HAL_RCC_ClockConfig+0x358>)
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	4917      	ldr	r1, [pc, #92]	; (80059b4 <HAL_RCC_ClockConfig+0x358>)
 8005958:	4313      	orrs	r3, r2
 800595a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800595c:	f000 f834 	bl	80059c8 <HAL_RCC_GetSysClockFreq>
 8005960:	4602      	mov	r2, r0
 8005962:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <HAL_RCC_ClockConfig+0x358>)
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	0a1b      	lsrs	r3, r3, #8
 8005968:	f003 030f 	and.w	r3, r3, #15
 800596c:	4912      	ldr	r1, [pc, #72]	; (80059b8 <HAL_RCC_ClockConfig+0x35c>)
 800596e:	5ccb      	ldrb	r3, [r1, r3]
 8005970:	f003 031f 	and.w	r3, r3, #31
 8005974:	fa22 f303 	lsr.w	r3, r2, r3
 8005978:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800597a:	4b0e      	ldr	r3, [pc, #56]	; (80059b4 <HAL_RCC_ClockConfig+0x358>)
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	f003 030f 	and.w	r3, r3, #15
 8005982:	4a0d      	ldr	r2, [pc, #52]	; (80059b8 <HAL_RCC_ClockConfig+0x35c>)
 8005984:	5cd3      	ldrb	r3, [r2, r3]
 8005986:	f003 031f 	and.w	r3, r3, #31
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	fa22 f303 	lsr.w	r3, r2, r3
 8005990:	4a0a      	ldr	r2, [pc, #40]	; (80059bc <HAL_RCC_ClockConfig+0x360>)
 8005992:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005994:	4a0a      	ldr	r2, [pc, #40]	; (80059c0 <HAL_RCC_ClockConfig+0x364>)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800599a:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <HAL_RCC_ClockConfig+0x368>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fb ff46 	bl	8001830 <HAL_InitTick>
 80059a4:	4603      	mov	r3, r0
 80059a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	58024400 	.word	0x58024400
 80059b8:	0800fec0 	.word	0x0800fec0
 80059bc:	24000008 	.word	0x24000008
 80059c0:	24000004 	.word	0x24000004
 80059c4:	2400000c 	.word	0x2400000c

080059c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b089      	sub	sp, #36	; 0x24
 80059cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059ce:	4bb3      	ldr	r3, [pc, #716]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059d6:	2b18      	cmp	r3, #24
 80059d8:	f200 8155 	bhi.w	8005c86 <HAL_RCC_GetSysClockFreq+0x2be>
 80059dc:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80059de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e2:	bf00      	nop
 80059e4:	08005a49 	.word	0x08005a49
 80059e8:	08005c87 	.word	0x08005c87
 80059ec:	08005c87 	.word	0x08005c87
 80059f0:	08005c87 	.word	0x08005c87
 80059f4:	08005c87 	.word	0x08005c87
 80059f8:	08005c87 	.word	0x08005c87
 80059fc:	08005c87 	.word	0x08005c87
 8005a00:	08005c87 	.word	0x08005c87
 8005a04:	08005a6f 	.word	0x08005a6f
 8005a08:	08005c87 	.word	0x08005c87
 8005a0c:	08005c87 	.word	0x08005c87
 8005a10:	08005c87 	.word	0x08005c87
 8005a14:	08005c87 	.word	0x08005c87
 8005a18:	08005c87 	.word	0x08005c87
 8005a1c:	08005c87 	.word	0x08005c87
 8005a20:	08005c87 	.word	0x08005c87
 8005a24:	08005a75 	.word	0x08005a75
 8005a28:	08005c87 	.word	0x08005c87
 8005a2c:	08005c87 	.word	0x08005c87
 8005a30:	08005c87 	.word	0x08005c87
 8005a34:	08005c87 	.word	0x08005c87
 8005a38:	08005c87 	.word	0x08005c87
 8005a3c:	08005c87 	.word	0x08005c87
 8005a40:	08005c87 	.word	0x08005c87
 8005a44:	08005a7b 	.word	0x08005a7b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a48:	4b94      	ldr	r3, [pc, #592]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d009      	beq.n	8005a68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a54:	4b91      	ldr	r3, [pc, #580]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	08db      	lsrs	r3, r3, #3
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	4a90      	ldr	r2, [pc, #576]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a60:	fa22 f303 	lsr.w	r3, r2, r3
 8005a64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005a66:	e111      	b.n	8005c8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005a68:	4b8d      	ldr	r3, [pc, #564]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005a6a:	61bb      	str	r3, [r7, #24]
    break;
 8005a6c:	e10e      	b.n	8005c8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005a6e:	4b8d      	ldr	r3, [pc, #564]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a70:	61bb      	str	r3, [r7, #24]
    break;
 8005a72:	e10b      	b.n	8005c8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005a74:	4b8c      	ldr	r3, [pc, #560]	; (8005ca8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005a76:	61bb      	str	r3, [r7, #24]
    break;
 8005a78:	e108      	b.n	8005c8c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a7a:	4b88      	ldr	r3, [pc, #544]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005a84:	4b85      	ldr	r3, [pc, #532]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a88:	091b      	lsrs	r3, r3, #4
 8005a8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a8e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005a90:	4b82      	ldr	r3, [pc, #520]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005a9a:	4b80      	ldr	r3, [pc, #512]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9e:	08db      	lsrs	r3, r3, #3
 8005aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	fb02 f303 	mul.w	r3, r2, r3
 8005aaa:	ee07 3a90 	vmov	s15, r3
 8005aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 80e1 	beq.w	8005c80 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	f000 8083 	beq.w	8005bcc <HAL_RCC_GetSysClockFreq+0x204>
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	f200 80a1 	bhi.w	8005c10 <HAL_RCC_GetSysClockFreq+0x248>
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <HAL_RCC_GetSysClockFreq+0x114>
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d056      	beq.n	8005b88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005ada:	e099      	b.n	8005c10 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005adc:	4b6f      	ldr	r3, [pc, #444]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0320 	and.w	r3, r3, #32
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d02d      	beq.n	8005b44 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ae8:	4b6c      	ldr	r3, [pc, #432]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	08db      	lsrs	r3, r3, #3
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	4a6b      	ldr	r2, [pc, #428]	; (8005ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005af4:	fa22 f303 	lsr.w	r3, r2, r3
 8005af8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	ee07 3a90 	vmov	s15, r3
 8005b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b12:	4b62      	ldr	r3, [pc, #392]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b26:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005b42:	e087      	b.n	8005c54 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	ee07 3a90 	vmov	s15, r3
 8005b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005cb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b56:	4b51      	ldr	r3, [pc, #324]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b5e:	ee07 3a90 	vmov	s15, r3
 8005b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b6a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b86:	e065      	b.n	8005c54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b92:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005cb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b9a:	4b40      	ldr	r3, [pc, #256]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bca:	e043      	b.n	8005c54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	ee07 3a90 	vmov	s15, r3
 8005bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bd6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005cb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bde:	4b2f      	ldr	r3, [pc, #188]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be6:	ee07 3a90 	vmov	s15, r3
 8005bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bf2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c0e:	e021      	b.n	8005c54 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	ee07 3a90 	vmov	s15, r3
 8005c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005cb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c22:	4b1e      	ldr	r3, [pc, #120]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2a:	ee07 3a90 	vmov	s15, r3
 8005c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c32:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c52:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005c54:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c58:	0a5b      	lsrs	r3, r3, #9
 8005c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c5e:	3301      	adds	r3, #1
 8005c60:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	ee07 3a90 	vmov	s15, r3
 8005c68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005c6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c78:	ee17 3a90 	vmov	r3, s15
 8005c7c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005c7e:	e005      	b.n	8005c8c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	61bb      	str	r3, [r7, #24]
    break;
 8005c84:	e002      	b.n	8005c8c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005c86:	4b07      	ldr	r3, [pc, #28]	; (8005ca4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005c88:	61bb      	str	r3, [r7, #24]
    break;
 8005c8a:	bf00      	nop
  }

  return sysclockfreq;
 8005c8c:	69bb      	ldr	r3, [r7, #24]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3724      	adds	r7, #36	; 0x24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	58024400 	.word	0x58024400
 8005ca0:	03d09000 	.word	0x03d09000
 8005ca4:	003d0900 	.word	0x003d0900
 8005ca8:	007a1200 	.word	0x007a1200
 8005cac:	46000000 	.word	0x46000000
 8005cb0:	4c742400 	.word	0x4c742400
 8005cb4:	4a742400 	.word	0x4a742400
 8005cb8:	4af42400 	.word	0x4af42400

08005cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005cc2:	f7ff fe81 	bl	80059c8 <HAL_RCC_GetSysClockFreq>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	4b10      	ldr	r3, [pc, #64]	; (8005d0c <HAL_RCC_GetHCLKFreq+0x50>)
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	0a1b      	lsrs	r3, r3, #8
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	490f      	ldr	r1, [pc, #60]	; (8005d10 <HAL_RCC_GetHCLKFreq+0x54>)
 8005cd4:	5ccb      	ldrb	r3, [r1, r3]
 8005cd6:	f003 031f 	and.w	r3, r3, #31
 8005cda:	fa22 f303 	lsr.w	r3, r2, r3
 8005cde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ce0:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <HAL_RCC_GetHCLKFreq+0x50>)
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	4a09      	ldr	r2, [pc, #36]	; (8005d10 <HAL_RCC_GetHCLKFreq+0x54>)
 8005cea:	5cd3      	ldrb	r3, [r2, r3]
 8005cec:	f003 031f 	and.w	r3, r3, #31
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf6:	4a07      	ldr	r2, [pc, #28]	; (8005d14 <HAL_RCC_GetHCLKFreq+0x58>)
 8005cf8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005cfa:	4a07      	ldr	r2, [pc, #28]	; (8005d18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005d00:	4b04      	ldr	r3, [pc, #16]	; (8005d14 <HAL_RCC_GetHCLKFreq+0x58>)
 8005d02:	681b      	ldr	r3, [r3, #0]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3708      	adds	r7, #8
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	58024400 	.word	0x58024400
 8005d10:	0800fec0 	.word	0x0800fec0
 8005d14:	24000008 	.word	0x24000008
 8005d18:	24000004 	.word	0x24000004

08005d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005d20:	f7ff ffcc 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 8005d24:	4602      	mov	r2, r0
 8005d26:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	091b      	lsrs	r3, r3, #4
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	4904      	ldr	r1, [pc, #16]	; (8005d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d32:	5ccb      	ldrb	r3, [r1, r3]
 8005d34:	f003 031f 	and.w	r3, r3, #31
 8005d38:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	58024400 	.word	0x58024400
 8005d44:	0800fec0 	.word	0x0800fec0

08005d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005d4c:	f7ff ffb6 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 8005d50:	4602      	mov	r2, r0
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	0a1b      	lsrs	r3, r3, #8
 8005d58:	f003 0307 	and.w	r3, r3, #7
 8005d5c:	4904      	ldr	r1, [pc, #16]	; (8005d70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d5e:	5ccb      	ldrb	r3, [r1, r3]
 8005d60:	f003 031f 	and.w	r3, r3, #31
 8005d64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	58024400 	.word	0x58024400
 8005d70:	0800fec0 	.word	0x0800fec0

08005d74 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	223f      	movs	r2, #63	; 0x3f
 8005d82:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d84:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <HAL_RCC_GetClockConfig+0x7c>)
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	f003 0207 	and.w	r2, r3, #7
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005d90:	4b17      	ldr	r3, [pc, #92]	; (8005df0 <HAL_RCC_GetClockConfig+0x7c>)
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005d9c:	4b14      	ldr	r3, [pc, #80]	; (8005df0 <HAL_RCC_GetClockConfig+0x7c>)
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	f003 020f 	and.w	r2, r3, #15
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005da8:	4b11      	ldr	r3, [pc, #68]	; (8005df0 <HAL_RCC_GetClockConfig+0x7c>)
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005db4:	4b0e      	ldr	r3, [pc, #56]	; (8005df0 <HAL_RCC_GetClockConfig+0x7c>)
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <HAL_RCC_GetClockConfig+0x7c>)
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005dcc:	4b08      	ldr	r3, [pc, #32]	; (8005df0 <HAL_RCC_GetClockConfig+0x7c>)
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005dd8:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <HAL_RCC_GetClockConfig+0x80>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 020f 	and.w	r2, r3, #15
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	601a      	str	r2, [r3, #0]
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	58024400 	.word	0x58024400
 8005df4:	52002000 	.word	0x52002000

08005df8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e00:	2300      	movs	r3, #0
 8005e02:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e04:	2300      	movs	r3, #0
 8005e06:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d03f      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e1c:	d02a      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005e1e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e22:	d824      	bhi.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e28:	d018      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005e2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e2e:	d81e      	bhi.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d003      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005e34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e38:	d007      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005e3a:	e018      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e3c:	4ba3      	ldr	r3, [pc, #652]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	4aa2      	ldr	r2, [pc, #648]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005e48:	e015      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	2102      	movs	r1, #2
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 f9d5 	bl	8007200 <RCCEx_PLL2_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005e5a:	e00c      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3324      	adds	r3, #36	; 0x24
 8005e60:	2102      	movs	r1, #2
 8005e62:	4618      	mov	r0, r3
 8005e64:	f001 fa7e 	bl	8007364 <RCCEx_PLL3_Config>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005e6c:	e003      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	75fb      	strb	r3, [r7, #23]
      break;
 8005e72:	e000      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d109      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005e7c:	4b93      	ldr	r3, [pc, #588]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e88:	4990      	ldr	r1, [pc, #576]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	650b      	str	r3, [r1, #80]	; 0x50
 8005e8e:	e001      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
 8005e92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d03d      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea4:	2b04      	cmp	r3, #4
 8005ea6:	d826      	bhi.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005ea8:	a201      	add	r2, pc, #4	; (adr r2, 8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eae:	bf00      	nop
 8005eb0:	08005ec5 	.word	0x08005ec5
 8005eb4:	08005ed3 	.word	0x08005ed3
 8005eb8:	08005ee5 	.word	0x08005ee5
 8005ebc:	08005efd 	.word	0x08005efd
 8005ec0:	08005efd 	.word	0x08005efd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ec4:	4b81      	ldr	r3, [pc, #516]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	4a80      	ldr	r2, [pc, #512]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ece:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ed0:	e015      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f001 f991 	bl	8007200 <RCCEx_PLL2_Config>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ee2:	e00c      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3324      	adds	r3, #36	; 0x24
 8005ee8:	2100      	movs	r1, #0
 8005eea:	4618      	mov	r0, r3
 8005eec:	f001 fa3a 	bl	8007364 <RCCEx_PLL3_Config>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ef4:	e003      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	75fb      	strb	r3, [r7, #23]
      break;
 8005efa:	e000      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005efe:	7dfb      	ldrb	r3, [r7, #23]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d109      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f04:	4b71      	ldr	r3, [pc, #452]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f08:	f023 0207 	bic.w	r2, r3, #7
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f10:	496e      	ldr	r1, [pc, #440]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	650b      	str	r3, [r1, #80]	; 0x50
 8005f16:	e001      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
 8005f1a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d042      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f30:	d02b      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f36:	d825      	bhi.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005f38:	2bc0      	cmp	r3, #192	; 0xc0
 8005f3a:	d028      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005f3c:	2bc0      	cmp	r3, #192	; 0xc0
 8005f3e:	d821      	bhi.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005f40:	2b80      	cmp	r3, #128	; 0x80
 8005f42:	d016      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005f44:	2b80      	cmp	r3, #128	; 0x80
 8005f46:	d81d      	bhi.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005f4c:	2b40      	cmp	r3, #64	; 0x40
 8005f4e:	d007      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005f50:	e018      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f52:	4b5e      	ldr	r3, [pc, #376]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f56:	4a5d      	ldr	r2, [pc, #372]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005f5e:	e017      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	3304      	adds	r3, #4
 8005f64:	2100      	movs	r1, #0
 8005f66:	4618      	mov	r0, r3
 8005f68:	f001 f94a 	bl	8007200 <RCCEx_PLL2_Config>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005f70:	e00e      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	3324      	adds	r3, #36	; 0x24
 8005f76:	2100      	movs	r1, #0
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f001 f9f3 	bl	8007364 <RCCEx_PLL3_Config>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005f82:	e005      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	75fb      	strb	r3, [r7, #23]
      break;
 8005f88:	e002      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005f8a:	bf00      	nop
 8005f8c:	e000      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f90:	7dfb      	ldrb	r3, [r7, #23]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d109      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005f96:	4b4d      	ldr	r3, [pc, #308]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa2:	494a      	ldr	r1, [pc, #296]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	650b      	str	r3, [r1, #80]	; 0x50
 8005fa8:	e001      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005faa:	7dfb      	ldrb	r3, [r7, #23]
 8005fac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d049      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fc4:	d030      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005fc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fca:	d82a      	bhi.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005fcc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005fd0:	d02c      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005fd2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005fd6:	d824      	bhi.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005fd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fdc:	d018      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fe2:	d81e      	bhi.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005fe8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fec:	d007      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005fee:	e018      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff0:	4b36      	ldr	r3, [pc, #216]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff4:	4a35      	ldr	r2, [pc, #212]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ffa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005ffc:	e017      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3304      	adds	r3, #4
 8006002:	2100      	movs	r1, #0
 8006004:	4618      	mov	r0, r3
 8006006:	f001 f8fb 	bl	8007200 <RCCEx_PLL2_Config>
 800600a:	4603      	mov	r3, r0
 800600c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800600e:	e00e      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	3324      	adds	r3, #36	; 0x24
 8006014:	2100      	movs	r1, #0
 8006016:	4618      	mov	r0, r3
 8006018:	f001 f9a4 	bl	8007364 <RCCEx_PLL3_Config>
 800601c:	4603      	mov	r3, r0
 800601e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006020:	e005      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	75fb      	strb	r3, [r7, #23]
      break;
 8006026:	e002      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006028:	bf00      	nop
 800602a:	e000      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800602c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800602e:	7dfb      	ldrb	r3, [r7, #23]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d10a      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006034:	4b25      	ldr	r3, [pc, #148]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006038:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006042:	4922      	ldr	r1, [pc, #136]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006044:	4313      	orrs	r3, r2
 8006046:	658b      	str	r3, [r1, #88]	; 0x58
 8006048:	e001      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800604a:	7dfb      	ldrb	r3, [r7, #23]
 800604c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006056:	2b00      	cmp	r3, #0
 8006058:	d04b      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006060:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006064:	d030      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006066:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800606a:	d82a      	bhi.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800606c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006070:	d02e      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006072:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006076:	d824      	bhi.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006078:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800607c:	d018      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800607e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006082:	d81e      	bhi.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800608c:	d007      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800608e:	e018      	b.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006090:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	4a0d      	ldr	r2, [pc, #52]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800609a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800609c:	e019      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3304      	adds	r3, #4
 80060a2:	2100      	movs	r1, #0
 80060a4:	4618      	mov	r0, r3
 80060a6:	f001 f8ab 	bl	8007200 <RCCEx_PLL2_Config>
 80060aa:	4603      	mov	r3, r0
 80060ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80060ae:	e010      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	3324      	adds	r3, #36	; 0x24
 80060b4:	2100      	movs	r1, #0
 80060b6:	4618      	mov	r0, r3
 80060b8:	f001 f954 	bl	8007364 <RCCEx_PLL3_Config>
 80060bc:	4603      	mov	r3, r0
 80060be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060c0:	e007      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	75fb      	strb	r3, [r7, #23]
      break;
 80060c6:	e004      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80060c8:	bf00      	nop
 80060ca:	e002      	b.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80060cc:	58024400 	.word	0x58024400
      break;
 80060d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10a      	bne.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80060d8:	4b99      	ldr	r3, [pc, #612]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80060da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060dc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060e6:	4996      	ldr	r1, [pc, #600]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	658b      	str	r3, [r1, #88]	; 0x58
 80060ec:	e001      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
 80060f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d032      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006102:	2b30      	cmp	r3, #48	; 0x30
 8006104:	d01c      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006106:	2b30      	cmp	r3, #48	; 0x30
 8006108:	d817      	bhi.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800610a:	2b20      	cmp	r3, #32
 800610c:	d00c      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800610e:	2b20      	cmp	r3, #32
 8006110:	d813      	bhi.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006112:	2b00      	cmp	r3, #0
 8006114:	d016      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006116:	2b10      	cmp	r3, #16
 8006118:	d10f      	bne.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800611a:	4b89      	ldr	r3, [pc, #548]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800611c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611e:	4a88      	ldr	r2, [pc, #544]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006124:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006126:	e00e      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	3304      	adds	r3, #4
 800612c:	2102      	movs	r1, #2
 800612e:	4618      	mov	r0, r3
 8006130:	f001 f866 	bl	8007200 <RCCEx_PLL2_Config>
 8006134:	4603      	mov	r3, r0
 8006136:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006138:	e005      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	75fb      	strb	r3, [r7, #23]
      break;
 800613e:	e002      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006140:	bf00      	nop
 8006142:	e000      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006146:	7dfb      	ldrb	r3, [r7, #23]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d109      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800614c:	4b7c      	ldr	r3, [pc, #496]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800614e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006150:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006158:	4979      	ldr	r1, [pc, #484]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800615a:	4313      	orrs	r3, r2
 800615c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800615e:	e001      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006160:	7dfb      	ldrb	r3, [r7, #23]
 8006162:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d047      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006174:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006178:	d030      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800617a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800617e:	d82a      	bhi.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006180:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006184:	d02c      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006186:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800618a:	d824      	bhi.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800618c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006190:	d018      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006196:	d81e      	bhi.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800619c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a0:	d007      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80061a2:	e018      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a4:	4b66      	ldr	r3, [pc, #408]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a8:	4a65      	ldr	r2, [pc, #404]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80061b0:	e017      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	3304      	adds	r3, #4
 80061b6:	2100      	movs	r1, #0
 80061b8:	4618      	mov	r0, r3
 80061ba:	f001 f821 	bl	8007200 <RCCEx_PLL2_Config>
 80061be:	4603      	mov	r3, r0
 80061c0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80061c2:	e00e      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3324      	adds	r3, #36	; 0x24
 80061c8:	2100      	movs	r1, #0
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 f8ca 	bl	8007364 <RCCEx_PLL3_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80061d4:	e005      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	75fb      	strb	r3, [r7, #23]
      break;
 80061da:	e002      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80061dc:	bf00      	nop
 80061de:	e000      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80061e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d109      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80061e8:	4b55      	ldr	r3, [pc, #340]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ec:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f4:	4952      	ldr	r1, [pc, #328]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	650b      	str	r3, [r1, #80]	; 0x50
 80061fa:	e001      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fc:	7dfb      	ldrb	r3, [r7, #23]
 80061fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d049      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006214:	d02e      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006216:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800621a:	d828      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800621c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006220:	d02a      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006222:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006226:	d822      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006228:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800622c:	d026      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800622e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006232:	d81c      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006238:	d010      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800623a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800623e:	d816      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01d      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006248:	d111      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3304      	adds	r3, #4
 800624e:	2101      	movs	r1, #1
 8006250:	4618      	mov	r0, r3
 8006252:	f000 ffd5 	bl	8007200 <RCCEx_PLL2_Config>
 8006256:	4603      	mov	r3, r0
 8006258:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800625a:	e012      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3324      	adds	r3, #36	; 0x24
 8006260:	2101      	movs	r1, #1
 8006262:	4618      	mov	r0, r3
 8006264:	f001 f87e 	bl	8007364 <RCCEx_PLL3_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800626c:	e009      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	75fb      	strb	r3, [r7, #23]
      break;
 8006272:	e006      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006274:	bf00      	nop
 8006276:	e004      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006278:	bf00      	nop
 800627a:	e002      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800627c:	bf00      	nop
 800627e:	e000      	b.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006282:	7dfb      	ldrb	r3, [r7, #23]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d109      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006288:	4b2d      	ldr	r3, [pc, #180]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800628a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006294:	492a      	ldr	r1, [pc, #168]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006296:	4313      	orrs	r3, r2
 8006298:	650b      	str	r3, [r1, #80]	; 0x50
 800629a:	e001      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d04d      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80062b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062b6:	d02e      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80062b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062bc:	d828      	bhi.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80062be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c2:	d02a      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80062c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c8:	d822      	bhi.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80062ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062ce:	d026      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80062d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80062d4:	d81c      	bhi.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80062d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062da:	d010      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x506>
 80062dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062e0:	d816      	bhi.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d01d      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80062e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062ea:	d111      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3304      	adds	r3, #4
 80062f0:	2101      	movs	r1, #1
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 ff84 	bl	8007200 <RCCEx_PLL2_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80062fc:	e012      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3324      	adds	r3, #36	; 0x24
 8006302:	2101      	movs	r1, #1
 8006304:	4618      	mov	r0, r3
 8006306:	f001 f82d 	bl	8007364 <RCCEx_PLL3_Config>
 800630a:	4603      	mov	r3, r0
 800630c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800630e:	e009      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	75fb      	strb	r3, [r7, #23]
      break;
 8006314:	e006      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006316:	bf00      	nop
 8006318:	e004      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800631a:	bf00      	nop
 800631c:	e002      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800631e:	bf00      	nop
 8006320:	e000      	b.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006324:	7dfb      	ldrb	r3, [r7, #23]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10c      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800632a:	4b05      	ldr	r3, [pc, #20]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800632c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006338:	4901      	ldr	r1, [pc, #4]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800633a:	4313      	orrs	r3, r2
 800633c:	658b      	str	r3, [r1, #88]	; 0x58
 800633e:	e003      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006340:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006344:	7dfb      	ldrb	r3, [r7, #23]
 8006346:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d02f      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800635c:	d00e      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800635e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006362:	d814      	bhi.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d015      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006368:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800636c:	d10f      	bne.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800636e:	4baf      	ldr	r3, [pc, #700]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006372:	4aae      	ldr	r2, [pc, #696]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006378:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800637a:	e00c      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3304      	adds	r3, #4
 8006380:	2101      	movs	r1, #1
 8006382:	4618      	mov	r0, r3
 8006384:	f000 ff3c 	bl	8007200 <RCCEx_PLL2_Config>
 8006388:	4603      	mov	r3, r0
 800638a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800638c:	e003      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	75fb      	strb	r3, [r7, #23]
      break;
 8006392:	e000      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006396:	7dfb      	ldrb	r3, [r7, #23]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d109      	bne.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800639c:	4ba3      	ldr	r3, [pc, #652]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800639e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063a8:	49a0      	ldr	r1, [pc, #640]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	650b      	str	r3, [r1, #80]	; 0x50
 80063ae:	e001      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
 80063b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d032      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d81b      	bhi.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80063c8:	a201      	add	r2, pc, #4	; (adr r2, 80063d0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80063ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ce:	bf00      	nop
 80063d0:	08006407 	.word	0x08006407
 80063d4:	080063e1 	.word	0x080063e1
 80063d8:	080063ef 	.word	0x080063ef
 80063dc:	08006407 	.word	0x08006407
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063e0:	4b92      	ldr	r3, [pc, #584]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	4a91      	ldr	r2, [pc, #580]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80063e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80063ec:	e00c      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3304      	adds	r3, #4
 80063f2:	2102      	movs	r1, #2
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 ff03 	bl	8007200 <RCCEx_PLL2_Config>
 80063fa:	4603      	mov	r3, r0
 80063fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80063fe:	e003      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	75fb      	strb	r3, [r7, #23]
      break;
 8006404:	e000      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006406:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006408:	7dfb      	ldrb	r3, [r7, #23]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d109      	bne.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800640e:	4b87      	ldr	r3, [pc, #540]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006412:	f023 0203 	bic.w	r2, r3, #3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641a:	4984      	ldr	r1, [pc, #528]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800641c:	4313      	orrs	r3, r2
 800641e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006420:	e001      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006422:	7dfb      	ldrb	r3, [r7, #23]
 8006424:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800642e:	2b00      	cmp	r3, #0
 8006430:	f000 8086 	beq.w	8006540 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006434:	4b7e      	ldr	r3, [pc, #504]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a7d      	ldr	r2, [pc, #500]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800643a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800643e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006440:	f7fb fc68 	bl	8001d14 <HAL_GetTick>
 8006444:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006446:	e009      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006448:	f7fb fc64 	bl	8001d14 <HAL_GetTick>
 800644c:	4602      	mov	r2, r0
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b64      	cmp	r3, #100	; 0x64
 8006454:	d902      	bls.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	75fb      	strb	r3, [r7, #23]
        break;
 800645a:	e005      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800645c:	4b74      	ldr	r3, [pc, #464]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0ef      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006468:	7dfb      	ldrb	r3, [r7, #23]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d166      	bne.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800646e:	4b6f      	ldr	r3, [pc, #444]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006470:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006478:	4053      	eors	r3, r2
 800647a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800647e:	2b00      	cmp	r3, #0
 8006480:	d013      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006482:	4b6a      	ldr	r3, [pc, #424]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800648a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800648c:	4b67      	ldr	r3, [pc, #412]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800648e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006490:	4a66      	ldr	r2, [pc, #408]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006496:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006498:	4b64      	ldr	r3, [pc, #400]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800649a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800649c:	4a63      	ldr	r2, [pc, #396]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800649e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064a2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80064a4:	4a61      	ldr	r2, [pc, #388]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80064b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064b4:	d115      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064b6:	f7fb fc2d 	bl	8001d14 <HAL_GetTick>
 80064ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064bc:	e00b      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064be:	f7fb fc29 	bl	8001d14 <HAL_GetTick>
 80064c2:	4602      	mov	r2, r0
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	1ad3      	subs	r3, r2, r3
 80064c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d902      	bls.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	75fb      	strb	r3, [r7, #23]
            break;
 80064d4:	e005      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064d6:	4b55      	ldr	r3, [pc, #340]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0ed      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d126      	bne.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80064ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f6:	d10d      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80064f8:	4b4c      	ldr	r3, [pc, #304]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006506:	0919      	lsrs	r1, r3, #4
 8006508:	4b4a      	ldr	r3, [pc, #296]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800650a:	400b      	ands	r3, r1
 800650c:	4947      	ldr	r1, [pc, #284]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800650e:	4313      	orrs	r3, r2
 8006510:	610b      	str	r3, [r1, #16]
 8006512:	e005      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006514:	4b45      	ldr	r3, [pc, #276]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	4a44      	ldr	r2, [pc, #272]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800651a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800651e:	6113      	str	r3, [r2, #16]
 8006520:	4b42      	ldr	r3, [pc, #264]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006522:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800652a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800652e:	493f      	ldr	r1, [pc, #252]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006530:	4313      	orrs	r3, r2
 8006532:	670b      	str	r3, [r1, #112]	; 0x70
 8006534:	e004      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006536:	7dfb      	ldrb	r3, [r7, #23]
 8006538:	75bb      	strb	r3, [r7, #22]
 800653a:	e001      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800653c:	7dfb      	ldrb	r3, [r7, #23]
 800653e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 8085 	beq.w	8006658 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006552:	2b28      	cmp	r3, #40	; 0x28
 8006554:	d866      	bhi.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006556:	a201      	add	r2, pc, #4	; (adr r2, 800655c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655c:	08006639 	.word	0x08006639
 8006560:	08006625 	.word	0x08006625
 8006564:	08006625 	.word	0x08006625
 8006568:	08006625 	.word	0x08006625
 800656c:	08006625 	.word	0x08006625
 8006570:	08006625 	.word	0x08006625
 8006574:	08006625 	.word	0x08006625
 8006578:	08006625 	.word	0x08006625
 800657c:	08006601 	.word	0x08006601
 8006580:	08006625 	.word	0x08006625
 8006584:	08006625 	.word	0x08006625
 8006588:	08006625 	.word	0x08006625
 800658c:	08006625 	.word	0x08006625
 8006590:	08006625 	.word	0x08006625
 8006594:	08006625 	.word	0x08006625
 8006598:	08006625 	.word	0x08006625
 800659c:	08006613 	.word	0x08006613
 80065a0:	08006625 	.word	0x08006625
 80065a4:	08006625 	.word	0x08006625
 80065a8:	08006625 	.word	0x08006625
 80065ac:	08006625 	.word	0x08006625
 80065b0:	08006625 	.word	0x08006625
 80065b4:	08006625 	.word	0x08006625
 80065b8:	08006625 	.word	0x08006625
 80065bc:	08006639 	.word	0x08006639
 80065c0:	08006625 	.word	0x08006625
 80065c4:	08006625 	.word	0x08006625
 80065c8:	08006625 	.word	0x08006625
 80065cc:	08006625 	.word	0x08006625
 80065d0:	08006625 	.word	0x08006625
 80065d4:	08006625 	.word	0x08006625
 80065d8:	08006625 	.word	0x08006625
 80065dc:	08006639 	.word	0x08006639
 80065e0:	08006625 	.word	0x08006625
 80065e4:	08006625 	.word	0x08006625
 80065e8:	08006625 	.word	0x08006625
 80065ec:	08006625 	.word	0x08006625
 80065f0:	08006625 	.word	0x08006625
 80065f4:	08006625 	.word	0x08006625
 80065f8:	08006625 	.word	0x08006625
 80065fc:	08006639 	.word	0x08006639
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3304      	adds	r3, #4
 8006604:	2101      	movs	r1, #1
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fdfa 	bl	8007200 <RCCEx_PLL2_Config>
 800660c:	4603      	mov	r3, r0
 800660e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006610:	e013      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3324      	adds	r3, #36	; 0x24
 8006616:	2101      	movs	r1, #1
 8006618:	4618      	mov	r0, r3
 800661a:	f000 fea3 	bl	8007364 <RCCEx_PLL3_Config>
 800661e:	4603      	mov	r3, r0
 8006620:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006622:	e00a      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	75fb      	strb	r3, [r7, #23]
      break;
 8006628:	e007      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800662a:	bf00      	nop
 800662c:	58024400 	.word	0x58024400
 8006630:	58024800 	.word	0x58024800
 8006634:	00ffffcf 	.word	0x00ffffcf
      break;
 8006638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800663a:	7dfb      	ldrb	r3, [r7, #23]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d109      	bne.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006640:	4b96      	ldr	r3, [pc, #600]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006644:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800664c:	4993      	ldr	r1, [pc, #588]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800664e:	4313      	orrs	r3, r2
 8006650:	654b      	str	r3, [r1, #84]	; 0x54
 8006652:	e001      	b.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006654:	7dfb      	ldrb	r3, [r7, #23]
 8006656:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d038      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006668:	2b05      	cmp	r3, #5
 800666a:	d821      	bhi.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800666c:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800666e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006672:	bf00      	nop
 8006674:	080066b7 	.word	0x080066b7
 8006678:	0800668d 	.word	0x0800668d
 800667c:	0800669f 	.word	0x0800669f
 8006680:	080066b7 	.word	0x080066b7
 8006684:	080066b7 	.word	0x080066b7
 8006688:	080066b7 	.word	0x080066b7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3304      	adds	r3, #4
 8006690:	2101      	movs	r1, #1
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fdb4 	bl	8007200 <RCCEx_PLL2_Config>
 8006698:	4603      	mov	r3, r0
 800669a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800669c:	e00c      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	3324      	adds	r3, #36	; 0x24
 80066a2:	2101      	movs	r1, #1
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 fe5d 	bl	8007364 <RCCEx_PLL3_Config>
 80066aa:	4603      	mov	r3, r0
 80066ac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80066ae:	e003      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	75fb      	strb	r3, [r7, #23]
      break;
 80066b4:	e000      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80066b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066b8:	7dfb      	ldrb	r3, [r7, #23]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d109      	bne.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80066be:	4b77      	ldr	r3, [pc, #476]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80066c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066c2:	f023 0207 	bic.w	r2, r3, #7
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ca:	4974      	ldr	r1, [pc, #464]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	654b      	str	r3, [r1, #84]	; 0x54
 80066d0:	e001      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066d2:	7dfb      	ldrb	r3, [r7, #23]
 80066d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0304 	and.w	r3, r3, #4
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d03a      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066e8:	2b05      	cmp	r3, #5
 80066ea:	d821      	bhi.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80066ec:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80066ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f2:	bf00      	nop
 80066f4:	08006737 	.word	0x08006737
 80066f8:	0800670d 	.word	0x0800670d
 80066fc:	0800671f 	.word	0x0800671f
 8006700:	08006737 	.word	0x08006737
 8006704:	08006737 	.word	0x08006737
 8006708:	08006737 	.word	0x08006737
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3304      	adds	r3, #4
 8006710:	2101      	movs	r1, #1
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fd74 	bl	8007200 <RCCEx_PLL2_Config>
 8006718:	4603      	mov	r3, r0
 800671a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800671c:	e00c      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3324      	adds	r3, #36	; 0x24
 8006722:	2101      	movs	r1, #1
 8006724:	4618      	mov	r0, r3
 8006726:	f000 fe1d 	bl	8007364 <RCCEx_PLL3_Config>
 800672a:	4603      	mov	r3, r0
 800672c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800672e:	e003      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	75fb      	strb	r3, [r7, #23]
      break;
 8006734:	e000      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10a      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800673e:	4b57      	ldr	r3, [pc, #348]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006742:	f023 0207 	bic.w	r2, r3, #7
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674c:	4953      	ldr	r1, [pc, #332]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800674e:	4313      	orrs	r3, r2
 8006750:	658b      	str	r3, [r1, #88]	; 0x58
 8006752:	e001      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006754:	7dfb      	ldrb	r3, [r7, #23]
 8006756:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0320 	and.w	r3, r3, #32
 8006760:	2b00      	cmp	r3, #0
 8006762:	d04b      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800676a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800676e:	d02e      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006770:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006774:	d828      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800677a:	d02a      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800677c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006780:	d822      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006782:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006786:	d026      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006788:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800678c:	d81c      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800678e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006792:	d010      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006798:	d816      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d01d      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800679e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067a2:	d111      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3304      	adds	r3, #4
 80067a8:	2100      	movs	r1, #0
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 fd28 	bl	8007200 <RCCEx_PLL2_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80067b4:	e012      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3324      	adds	r3, #36	; 0x24
 80067ba:	2102      	movs	r1, #2
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 fdd1 	bl	8007364 <RCCEx_PLL3_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80067c6:	e009      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	75fb      	strb	r3, [r7, #23]
      break;
 80067cc:	e006      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80067ce:	bf00      	nop
 80067d0:	e004      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80067d2:	bf00      	nop
 80067d4:	e002      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80067d6:	bf00      	nop
 80067d8:	e000      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80067da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067e2:	4b2e      	ldr	r3, [pc, #184]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80067e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067f0:	492a      	ldr	r1, [pc, #168]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	654b      	str	r3, [r1, #84]	; 0x54
 80067f6:	e001      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f8:	7dfb      	ldrb	r3, [r7, #23]
 80067fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	d04d      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800680e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006812:	d02e      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006814:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006818:	d828      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800681a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681e:	d02a      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006824:	d822      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006826:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800682a:	d026      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800682c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006830:	d81c      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006836:	d010      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800683c:	d816      	bhi.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800683e:	2b00      	cmp	r3, #0
 8006840:	d01d      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8006842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006846:	d111      	bne.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	3304      	adds	r3, #4
 800684c:	2100      	movs	r1, #0
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fcd6 	bl	8007200 <RCCEx_PLL2_Config>
 8006854:	4603      	mov	r3, r0
 8006856:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006858:	e012      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3324      	adds	r3, #36	; 0x24
 800685e:	2102      	movs	r1, #2
 8006860:	4618      	mov	r0, r3
 8006862:	f000 fd7f 	bl	8007364 <RCCEx_PLL3_Config>
 8006866:	4603      	mov	r3, r0
 8006868:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800686a:	e009      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	75fb      	strb	r3, [r7, #23]
      break;
 8006870:	e006      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006872:	bf00      	nop
 8006874:	e004      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006876:	bf00      	nop
 8006878:	e002      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800687a:	bf00      	nop
 800687c:	e000      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800687e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006880:	7dfb      	ldrb	r3, [r7, #23]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10c      	bne.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006886:	4b05      	ldr	r3, [pc, #20]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800688a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006894:	4901      	ldr	r1, [pc, #4]	; (800689c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006896:	4313      	orrs	r3, r2
 8006898:	658b      	str	r3, [r1, #88]	; 0x58
 800689a:	e003      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800689c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a0:	7dfb      	ldrb	r3, [r7, #23]
 80068a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d04b      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80068ba:	d02e      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80068bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80068c0:	d828      	bhi.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80068c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c6:	d02a      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80068c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068cc:	d822      	bhi.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80068ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80068d2:	d026      	beq.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80068d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80068d8:	d81c      	bhi.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80068da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068de:	d010      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80068e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068e4:	d816      	bhi.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d01d      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80068ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ee:	d111      	bne.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	3304      	adds	r3, #4
 80068f4:	2100      	movs	r1, #0
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fc82 	bl	8007200 <RCCEx_PLL2_Config>
 80068fc:	4603      	mov	r3, r0
 80068fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006900:	e012      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	3324      	adds	r3, #36	; 0x24
 8006906:	2102      	movs	r1, #2
 8006908:	4618      	mov	r0, r3
 800690a:	f000 fd2b 	bl	8007364 <RCCEx_PLL3_Config>
 800690e:	4603      	mov	r3, r0
 8006910:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006912:	e009      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	75fb      	strb	r3, [r7, #23]
      break;
 8006918:	e006      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800691a:	bf00      	nop
 800691c:	e004      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800691e:	bf00      	nop
 8006920:	e002      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006922:	bf00      	nop
 8006924:	e000      	b.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006926:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006928:	7dfb      	ldrb	r3, [r7, #23]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10a      	bne.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800692e:	4b9d      	ldr	r3, [pc, #628]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006932:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800693c:	4999      	ldr	r1, [pc, #612]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800693e:	4313      	orrs	r3, r2
 8006940:	658b      	str	r3, [r1, #88]	; 0x58
 8006942:	e001      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006944:	7dfb      	ldrb	r3, [r7, #23]
 8006946:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0308 	and.w	r3, r3, #8
 8006950:	2b00      	cmp	r3, #0
 8006952:	d01a      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800695a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695e:	d10a      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	3324      	adds	r3, #36	; 0x24
 8006964:	2102      	movs	r1, #2
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fcfc 	bl	8007364 <RCCEx_PLL3_Config>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006976:	4b8b      	ldr	r3, [pc, #556]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800697a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006984:	4987      	ldr	r1, [pc, #540]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006986:	4313      	orrs	r3, r2
 8006988:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0310 	and.w	r3, r3, #16
 8006992:	2b00      	cmp	r3, #0
 8006994:	d01a      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800699c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069a0:	d10a      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	3324      	adds	r3, #36	; 0x24
 80069a6:	2102      	movs	r1, #2
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fcdb 	bl	8007364 <RCCEx_PLL3_Config>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d001      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069b8:	4b7a      	ldr	r3, [pc, #488]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80069ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069c6:	4977      	ldr	r1, [pc, #476]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d034      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80069de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069e2:	d01d      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80069e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069e8:	d817      	bhi.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80069ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f2:	d009      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80069f4:	e011      	b.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3304      	adds	r3, #4
 80069fa:	2100      	movs	r1, #0
 80069fc:	4618      	mov	r0, r3
 80069fe:	f000 fbff 	bl	8007200 <RCCEx_PLL2_Config>
 8006a02:	4603      	mov	r3, r0
 8006a04:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006a06:	e00c      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	3324      	adds	r3, #36	; 0x24
 8006a0c:	2102      	movs	r1, #2
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 fca8 	bl	8007364 <RCCEx_PLL3_Config>
 8006a14:	4603      	mov	r3, r0
 8006a16:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006a18:	e003      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a1e:	e000      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006a20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10a      	bne.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a28:	4b5e      	ldr	r3, [pc, #376]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a36:	495b      	ldr	r1, [pc, #364]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	658b      	str	r3, [r1, #88]	; 0x58
 8006a3c:	e001      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3e:	7dfb      	ldrb	r3, [r7, #23]
 8006a40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d033      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a58:	d01c      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006a5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a5e:	d816      	bhi.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a64:	d003      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006a66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a6a:	d007      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006a6c:	e00f      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a6e:	4b4d      	ldr	r3, [pc, #308]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a72:	4a4c      	ldr	r2, [pc, #304]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006a7a:	e00c      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	3324      	adds	r3, #36	; 0x24
 8006a80:	2101      	movs	r1, #1
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fc6e 	bl	8007364 <RCCEx_PLL3_Config>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006a8c:	e003      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	75fb      	strb	r3, [r7, #23]
      break;
 8006a92:	e000      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10a      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a9c:	4b41      	ldr	r3, [pc, #260]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aaa:	493e      	ldr	r1, [pc, #248]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	654b      	str	r3, [r1, #84]	; 0x54
 8006ab0:	e001      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
 8006ab4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d029      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ace:	d007      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006ad0:	e00f      	b.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ad2:	4b34      	ldr	r3, [pc, #208]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad6:	4a33      	ldr	r2, [pc, #204]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006adc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ade:	e00b      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	2102      	movs	r1, #2
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fb8a 	bl	8007200 <RCCEx_PLL2_Config>
 8006aec:	4603      	mov	r3, r0
 8006aee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006af0:	e002      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	75fb      	strb	r3, [r7, #23]
      break;
 8006af6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d109      	bne.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006afe:	4b29      	ldr	r3, [pc, #164]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b0a:	4926      	ldr	r1, [pc, #152]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b10:	e001      	b.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b12:	7dfb      	ldrb	r3, [r7, #23]
 8006b14:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00a      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	3324      	adds	r3, #36	; 0x24
 8006b26:	2102      	movs	r1, #2
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fc1b 	bl	8007364 <RCCEx_PLL3_Config>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d001      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d033      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b4c:	d017      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006b4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b52:	d811      	bhi.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b58:	d013      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b5e:	d80b      	bhi.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d010      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006b64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b68:	d106      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6e:	4a0d      	ldr	r2, [pc, #52]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006b76:	e007      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b7c:	e004      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006b7e:	bf00      	nop
 8006b80:	e002      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006b82:	bf00      	nop
 8006b84:	e000      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006b86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10c      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b8e:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b9a:	4902      	ldr	r1, [pc, #8]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	654b      	str	r3, [r1, #84]	; 0x54
 8006ba0:	e004      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006ba2:	bf00      	nop
 8006ba4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba8:	7dfb      	ldrb	r3, [r7, #23]
 8006baa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d008      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006bb8:	4b31      	ldr	r3, [pc, #196]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc4:	492e      	ldr	r1, [pc, #184]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d009      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006bd6:	4b2a      	ldr	r3, [pc, #168]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006be4:	4926      	ldr	r1, [pc, #152]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d008      	beq.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006bf6:	4b22      	ldr	r3, [pc, #136]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bfa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c02:	491f      	ldr	r1, [pc, #124]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d00d      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c14:	4b1a      	ldr	r3, [pc, #104]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	4a19      	ldr	r2, [pc, #100]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c1e:	6113      	str	r3, [r2, #16]
 8006c20:	4b17      	ldr	r3, [pc, #92]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c22:	691a      	ldr	r2, [r3, #16]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006c2a:	4915      	ldr	r1, [pc, #84]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	da08      	bge.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006c38:	4b11      	ldr	r3, [pc, #68]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c44:	490e      	ldr	r1, [pc, #56]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d009      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c56:	4b0a      	ldr	r3, [pc, #40]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c64:	4906      	ldr	r1, [pc, #24]	; (8006c80 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006c6a:	7dbb      	ldrb	r3, [r7, #22]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	e000      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	58024400 	.word	0x58024400

08006c84 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006c88:	f7ff f818 	bl	8005cbc <HAL_RCC_GetHCLKFreq>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	4b06      	ldr	r3, [pc, #24]	; (8006ca8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	091b      	lsrs	r3, r3, #4
 8006c94:	f003 0307 	and.w	r3, r3, #7
 8006c98:	4904      	ldr	r1, [pc, #16]	; (8006cac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006c9a:	5ccb      	ldrb	r3, [r1, r3]
 8006c9c:	f003 031f 	and.w	r3, r3, #31
 8006ca0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	58024400 	.word	0x58024400
 8006cac:	0800fec0 	.word	0x0800fec0

08006cb0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b089      	sub	sp, #36	; 0x24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006cb8:	4ba1      	ldr	r3, [pc, #644]	; (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cbc:	f003 0303 	and.w	r3, r3, #3
 8006cc0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006cc2:	4b9f      	ldr	r3, [pc, #636]	; (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc6:	0b1b      	lsrs	r3, r3, #12
 8006cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ccc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006cce:	4b9c      	ldr	r3, [pc, #624]	; (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd2:	091b      	lsrs	r3, r3, #4
 8006cd4:	f003 0301 	and.w	r3, r3, #1
 8006cd8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006cda:	4b99      	ldr	r3, [pc, #612]	; (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cde:	08db      	lsrs	r3, r3, #3
 8006ce0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	fb02 f303 	mul.w	r3, r2, r3
 8006cea:	ee07 3a90 	vmov	s15, r3
 8006cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 8111 	beq.w	8006f20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	f000 8083 	beq.w	8006e0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	f200 80a1 	bhi.w	8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d056      	beq.n	8006dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006d1a:	e099      	b.n	8006e50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d1c:	4b88      	ldr	r3, [pc, #544]	; (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0320 	and.w	r3, r3, #32
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d02d      	beq.n	8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006d28:	4b85      	ldr	r3, [pc, #532]	; (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	08db      	lsrs	r3, r3, #3
 8006d2e:	f003 0303 	and.w	r3, r3, #3
 8006d32:	4a84      	ldr	r2, [pc, #528]	; (8006f44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006d34:	fa22 f303 	lsr.w	r3, r2, r3
 8006d38:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	ee07 3a90 	vmov	s15, r3
 8006d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d52:	4b7b      	ldr	r3, [pc, #492]	; (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d66:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006d82:	e087      	b.n	8006e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006f4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d96:	4b6a      	ldr	r3, [pc, #424]	; (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006daa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006db6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dc6:	e065      	b.n	8006e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006f50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dda:	4b59      	ldr	r3, [pc, #356]	; (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de2:	ee07 3a90 	vmov	s15, r3
 8006de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e0a:	e043      	b.n	8006e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	ee07 3a90 	vmov	s15, r3
 8006e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006f54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e1e:	4b48      	ldr	r3, [pc, #288]	; (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e26:	ee07 3a90 	vmov	s15, r3
 8006e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e32:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e4e:	e021      	b.n	8006e94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	ee07 3a90 	vmov	s15, r3
 8006e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006f50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e62:	4b37      	ldr	r3, [pc, #220]	; (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e6a:	ee07 3a90 	vmov	s15, r3
 8006e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e76:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006f48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006e94:	4b2a      	ldr	r3, [pc, #168]	; (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e98:	0a5b      	lsrs	r3, r3, #9
 8006e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e9e:	ee07 3a90 	vmov	s15, r3
 8006ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eae:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eba:	ee17 2a90 	vmov	r2, s15
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006ec2:	4b1f      	ldr	r3, [pc, #124]	; (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	0c1b      	lsrs	r3, r3, #16
 8006ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ecc:	ee07 3a90 	vmov	s15, r3
 8006ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ed8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006edc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ee4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ee8:	ee17 2a90 	vmov	r2, s15
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006ef0:	4b13      	ldr	r3, [pc, #76]	; (8006f40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef4:	0e1b      	lsrs	r3, r3, #24
 8006ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f16:	ee17 2a90 	vmov	r2, s15
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f1e:	e008      	b.n	8006f32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	609a      	str	r2, [r3, #8]
}
 8006f32:	bf00      	nop
 8006f34:	3724      	adds	r7, #36	; 0x24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	58024400 	.word	0x58024400
 8006f44:	03d09000 	.word	0x03d09000
 8006f48:	46000000 	.word	0x46000000
 8006f4c:	4c742400 	.word	0x4c742400
 8006f50:	4a742400 	.word	0x4a742400
 8006f54:	4af42400 	.word	0x4af42400

08006f58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b089      	sub	sp, #36	; 0x24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f60:	4ba1      	ldr	r3, [pc, #644]	; (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f64:	f003 0303 	and.w	r3, r3, #3
 8006f68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006f6a:	4b9f      	ldr	r3, [pc, #636]	; (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6e:	0d1b      	lsrs	r3, r3, #20
 8006f70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006f76:	4b9c      	ldr	r3, [pc, #624]	; (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	0a1b      	lsrs	r3, r3, #8
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006f82:	4b99      	ldr	r3, [pc, #612]	; (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f86:	08db      	lsrs	r3, r3, #3
 8006f88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	fb02 f303 	mul.w	r3, r2, r3
 8006f92:	ee07 3a90 	vmov	s15, r3
 8006f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 8111 	beq.w	80071c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	f000 8083 	beq.w	80070b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	f200 80a1 	bhi.w	80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d056      	beq.n	8007070 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006fc2:	e099      	b.n	80070f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fc4:	4b88      	ldr	r3, [pc, #544]	; (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0320 	and.w	r3, r3, #32
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d02d      	beq.n	800702c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fd0:	4b85      	ldr	r3, [pc, #532]	; (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	08db      	lsrs	r3, r3, #3
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	4a84      	ldr	r2, [pc, #528]	; (80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	ee07 3a90 	vmov	s15, r3
 8006fe8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffa:	4b7b      	ldr	r3, [pc, #492]	; (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700a:	ed97 6a03 	vldr	s12, [r7, #12]
 800700e:	eddf 5a78 	vldr	s11, [pc, #480]	; 80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800701e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007026:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800702a:	e087      	b.n	800713c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007036:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80071f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800703a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800703e:	4b6a      	ldr	r3, [pc, #424]	; (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800704e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007052:	eddf 5a67 	vldr	s11, [pc, #412]	; 80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800705e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800706e:	e065      	b.n	800713c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80071f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800707e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007082:	4b59      	ldr	r3, [pc, #356]	; (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007092:	ed97 6a03 	vldr	s12, [r7, #12]
 8007096:	eddf 5a56 	vldr	s11, [pc, #344]	; 80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800709a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800709e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070b2:	e043      	b.n	800713c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	ee07 3a90 	vmov	s15, r3
 80070ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070be:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80071fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80070c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c6:	4b48      	ldr	r3, [pc, #288]	; (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070da:	eddf 5a45 	vldr	s11, [pc, #276]	; 80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80070de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070f6:	e021      	b.n	800713c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007102:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80071f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710a:	4b37      	ldr	r3, [pc, #220]	; (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711a:	ed97 6a03 	vldr	s12, [r7, #12]
 800711e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80071f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800712e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007136:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800713a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800713c:	4b2a      	ldr	r3, [pc, #168]	; (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800713e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007140:	0a5b      	lsrs	r3, r3, #9
 8007142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007152:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007156:	edd7 6a07 	vldr	s13, [r7, #28]
 800715a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800715e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007162:	ee17 2a90 	vmov	r2, s15
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800716a:	4b1f      	ldr	r3, [pc, #124]	; (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	0c1b      	lsrs	r3, r3, #16
 8007170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007174:	ee07 3a90 	vmov	s15, r3
 8007178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800717c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007180:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007184:	edd7 6a07 	vldr	s13, [r7, #28]
 8007188:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800718c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007190:	ee17 2a90 	vmov	r2, s15
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007198:	4b13      	ldr	r3, [pc, #76]	; (80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800719a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719c:	0e1b      	lsrs	r3, r3, #24
 800719e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80071b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071be:	ee17 2a90 	vmov	r2, s15
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80071c6:	e008      	b.n	80071da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	609a      	str	r2, [r3, #8]
}
 80071da:	bf00      	nop
 80071dc:	3724      	adds	r7, #36	; 0x24
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	58024400 	.word	0x58024400
 80071ec:	03d09000 	.word	0x03d09000
 80071f0:	46000000 	.word	0x46000000
 80071f4:	4c742400 	.word	0x4c742400
 80071f8:	4a742400 	.word	0x4a742400
 80071fc:	4af42400 	.word	0x4af42400

08007200 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800720e:	4b53      	ldr	r3, [pc, #332]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 8007210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007212:	f003 0303 	and.w	r3, r3, #3
 8007216:	2b03      	cmp	r3, #3
 8007218:	d101      	bne.n	800721e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e099      	b.n	8007352 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800721e:	4b4f      	ldr	r3, [pc, #316]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a4e      	ldr	r2, [pc, #312]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 8007224:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800722a:	f7fa fd73 	bl	8001d14 <HAL_GetTick>
 800722e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007230:	e008      	b.n	8007244 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007232:	f7fa fd6f 	bl	8001d14 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d901      	bls.n	8007244 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e086      	b.n	8007352 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007244:	4b45      	ldr	r3, [pc, #276]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1f0      	bne.n	8007232 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007250:	4b42      	ldr	r3, [pc, #264]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 8007252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007254:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	031b      	lsls	r3, r3, #12
 800725e:	493f      	ldr	r1, [pc, #252]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 8007260:	4313      	orrs	r3, r2
 8007262:	628b      	str	r3, [r1, #40]	; 0x28
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	3b01      	subs	r3, #1
 800726a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	3b01      	subs	r3, #1
 8007274:	025b      	lsls	r3, r3, #9
 8007276:	b29b      	uxth	r3, r3
 8007278:	431a      	orrs	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	3b01      	subs	r3, #1
 8007280:	041b      	lsls	r3, r3, #16
 8007282:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007286:	431a      	orrs	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	3b01      	subs	r3, #1
 800728e:	061b      	lsls	r3, r3, #24
 8007290:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007294:	4931      	ldr	r1, [pc, #196]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 8007296:	4313      	orrs	r3, r2
 8007298:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800729a:	4b30      	ldr	r3, [pc, #192]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 800729c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	492d      	ldr	r1, [pc, #180]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80072ac:	4b2b      	ldr	r3, [pc, #172]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 80072ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b0:	f023 0220 	bic.w	r2, r3, #32
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	4928      	ldr	r1, [pc, #160]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 80072ba:	4313      	orrs	r3, r2
 80072bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80072be:	4b27      	ldr	r3, [pc, #156]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 80072c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c2:	4a26      	ldr	r2, [pc, #152]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 80072c4:	f023 0310 	bic.w	r3, r3, #16
 80072c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80072ca:	4b24      	ldr	r3, [pc, #144]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 80072cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072ce:	4b24      	ldr	r3, [pc, #144]	; (8007360 <RCCEx_PLL2_Config+0x160>)
 80072d0:	4013      	ands	r3, r2
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	69d2      	ldr	r2, [r2, #28]
 80072d6:	00d2      	lsls	r2, r2, #3
 80072d8:	4920      	ldr	r1, [pc, #128]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80072de:	4b1f      	ldr	r3, [pc, #124]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	4a1e      	ldr	r2, [pc, #120]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 80072e4:	f043 0310 	orr.w	r3, r3, #16
 80072e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d106      	bne.n	80072fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80072f0:	4b1a      	ldr	r3, [pc, #104]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 80072f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f4:	4a19      	ldr	r2, [pc, #100]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 80072f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80072fc:	e00f      	b.n	800731e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d106      	bne.n	8007312 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007304:	4b15      	ldr	r3, [pc, #84]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 8007306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007308:	4a14      	ldr	r2, [pc, #80]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 800730a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800730e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007310:	e005      	b.n	800731e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007312:	4b12      	ldr	r3, [pc, #72]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 8007314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007316:	4a11      	ldr	r2, [pc, #68]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 8007318:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800731c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800731e:	4b0f      	ldr	r3, [pc, #60]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a0e      	ldr	r2, [pc, #56]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 8007324:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800732a:	f7fa fcf3 	bl	8001d14 <HAL_GetTick>
 800732e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007330:	e008      	b.n	8007344 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007332:	f7fa fcef 	bl	8001d14 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	2b02      	cmp	r3, #2
 800733e:	d901      	bls.n	8007344 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e006      	b.n	8007352 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007344:	4b05      	ldr	r3, [pc, #20]	; (800735c <RCCEx_PLL2_Config+0x15c>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d0f0      	beq.n	8007332 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007350:	7bfb      	ldrb	r3, [r7, #15]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	58024400 	.word	0x58024400
 8007360:	ffff0007 	.word	0xffff0007

08007364 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007372:	4b53      	ldr	r3, [pc, #332]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	2b03      	cmp	r3, #3
 800737c:	d101      	bne.n	8007382 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e099      	b.n	80074b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007382:	4b4f      	ldr	r3, [pc, #316]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a4e      	ldr	r2, [pc, #312]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800738c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800738e:	f7fa fcc1 	bl	8001d14 <HAL_GetTick>
 8007392:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007394:	e008      	b.n	80073a8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007396:	f7fa fcbd 	bl	8001d14 <HAL_GetTick>
 800739a:	4602      	mov	r2, r0
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	d901      	bls.n	80073a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e086      	b.n	80074b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073a8:	4b45      	ldr	r3, [pc, #276]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1f0      	bne.n	8007396 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80073b4:	4b42      	ldr	r3, [pc, #264]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80073b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	051b      	lsls	r3, r3, #20
 80073c2:	493f      	ldr	r1, [pc, #252]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	628b      	str	r3, [r1, #40]	; 0x28
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	025b      	lsls	r3, r3, #9
 80073da:	b29b      	uxth	r3, r3
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	041b      	lsls	r3, r3, #16
 80073e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80073ea:	431a      	orrs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	061b      	lsls	r3, r3, #24
 80073f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073f8:	4931      	ldr	r1, [pc, #196]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80073fe:	4b30      	ldr	r3, [pc, #192]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007402:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	492d      	ldr	r1, [pc, #180]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800740c:	4313      	orrs	r3, r2
 800740e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007410:	4b2b      	ldr	r3, [pc, #172]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007414:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	4928      	ldr	r1, [pc, #160]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800741e:	4313      	orrs	r3, r2
 8007420:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007422:	4b27      	ldr	r3, [pc, #156]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007426:	4a26      	ldr	r2, [pc, #152]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007428:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800742c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800742e:	4b24      	ldr	r3, [pc, #144]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007432:	4b24      	ldr	r3, [pc, #144]	; (80074c4 <RCCEx_PLL3_Config+0x160>)
 8007434:	4013      	ands	r3, r2
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	69d2      	ldr	r2, [r2, #28]
 800743a:	00d2      	lsls	r2, r2, #3
 800743c:	4920      	ldr	r1, [pc, #128]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800743e:	4313      	orrs	r3, r2
 8007440:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007442:	4b1f      	ldr	r3, [pc, #124]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007446:	4a1e      	ldr	r2, [pc, #120]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800744c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d106      	bne.n	8007462 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007454:	4b1a      	ldr	r3, [pc, #104]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	4a19      	ldr	r2, [pc, #100]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800745a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800745e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007460:	e00f      	b.n	8007482 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d106      	bne.n	8007476 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007468:	4b15      	ldr	r3, [pc, #84]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800746a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746c:	4a14      	ldr	r2, [pc, #80]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800746e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007472:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007474:	e005      	b.n	8007482 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007476:	4b12      	ldr	r3, [pc, #72]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747a:	4a11      	ldr	r2, [pc, #68]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 800747c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007480:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007482:	4b0f      	ldr	r3, [pc, #60]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a0e      	ldr	r2, [pc, #56]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 8007488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800748c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800748e:	f7fa fc41 	bl	8001d14 <HAL_GetTick>
 8007492:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007494:	e008      	b.n	80074a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007496:	f7fa fc3d 	bl	8001d14 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d901      	bls.n	80074a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e006      	b.n	80074b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80074a8:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <RCCEx_PLL3_Config+0x15c>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0f0      	beq.n	8007496 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	58024400 	.word	0x58024400
 80074c4:	ffff0007 	.word	0xffff0007

080074c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e049      	b.n	800756e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d106      	bne.n	80074f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f841 	bl	8007576 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3304      	adds	r3, #4
 8007504:	4619      	mov	r1, r3
 8007506:	4610      	mov	r0, r2
 8007508:	f000 fa00 	bl	800790c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007576:	b480      	push	{r7}
 8007578:	b083      	sub	sp, #12
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
	...

0800758c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b01      	cmp	r3, #1
 800759e:	d001      	beq.n	80075a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e054      	b.n	800764e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2202      	movs	r2, #2
 80075a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68da      	ldr	r2, [r3, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f042 0201 	orr.w	r2, r2, #1
 80075ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a26      	ldr	r2, [pc, #152]	; (800765c <HAL_TIM_Base_Start_IT+0xd0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d022      	beq.n	800760c <HAL_TIM_Base_Start_IT+0x80>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ce:	d01d      	beq.n	800760c <HAL_TIM_Base_Start_IT+0x80>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a22      	ldr	r2, [pc, #136]	; (8007660 <HAL_TIM_Base_Start_IT+0xd4>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d018      	beq.n	800760c <HAL_TIM_Base_Start_IT+0x80>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a21      	ldr	r2, [pc, #132]	; (8007664 <HAL_TIM_Base_Start_IT+0xd8>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d013      	beq.n	800760c <HAL_TIM_Base_Start_IT+0x80>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a1f      	ldr	r2, [pc, #124]	; (8007668 <HAL_TIM_Base_Start_IT+0xdc>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d00e      	beq.n	800760c <HAL_TIM_Base_Start_IT+0x80>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a1e      	ldr	r2, [pc, #120]	; (800766c <HAL_TIM_Base_Start_IT+0xe0>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d009      	beq.n	800760c <HAL_TIM_Base_Start_IT+0x80>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a1c      	ldr	r2, [pc, #112]	; (8007670 <HAL_TIM_Base_Start_IT+0xe4>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d004      	beq.n	800760c <HAL_TIM_Base_Start_IT+0x80>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a1b      	ldr	r2, [pc, #108]	; (8007674 <HAL_TIM_Base_Start_IT+0xe8>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d115      	bne.n	8007638 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689a      	ldr	r2, [r3, #8]
 8007612:	4b19      	ldr	r3, [pc, #100]	; (8007678 <HAL_TIM_Base_Start_IT+0xec>)
 8007614:	4013      	ands	r3, r2
 8007616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2b06      	cmp	r3, #6
 800761c:	d015      	beq.n	800764a <HAL_TIM_Base_Start_IT+0xbe>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007624:	d011      	beq.n	800764a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f042 0201 	orr.w	r2, r2, #1
 8007634:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007636:	e008      	b.n	800764a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f042 0201 	orr.w	r2, r2, #1
 8007646:	601a      	str	r2, [r3, #0]
 8007648:	e000      	b.n	800764c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800764a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	40010000 	.word	0x40010000
 8007660:	40000400 	.word	0x40000400
 8007664:	40000800 	.word	0x40000800
 8007668:	40000c00 	.word	0x40000c00
 800766c:	40010400 	.word	0x40010400
 8007670:	40001800 	.word	0x40001800
 8007674:	40014000 	.word	0x40014000
 8007678:	00010007 	.word	0x00010007

0800767c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	f003 0302 	and.w	r3, r3, #2
 800768e:	2b02      	cmp	r3, #2
 8007690:	d122      	bne.n	80076d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	2b02      	cmp	r3, #2
 800769e:	d11b      	bne.n	80076d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f06f 0202 	mvn.w	r2, #2
 80076a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	f003 0303 	and.w	r3, r3, #3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f905 	bl	80078ce <HAL_TIM_IC_CaptureCallback>
 80076c4:	e005      	b.n	80076d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f8f7 	bl	80078ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f908 	bl	80078e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	f003 0304 	and.w	r3, r3, #4
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d122      	bne.n	800772c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	d11b      	bne.n	800772c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f06f 0204 	mvn.w	r2, #4
 80076fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2202      	movs	r2, #2
 8007702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	699b      	ldr	r3, [r3, #24]
 800770a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f8db 	bl	80078ce <HAL_TIM_IC_CaptureCallback>
 8007718:	e005      	b.n	8007726 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f8cd 	bl	80078ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f8de 	bl	80078e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f003 0308 	and.w	r3, r3, #8
 8007736:	2b08      	cmp	r3, #8
 8007738:	d122      	bne.n	8007780 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f003 0308 	and.w	r3, r3, #8
 8007744:	2b08      	cmp	r3, #8
 8007746:	d11b      	bne.n	8007780 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f06f 0208 	mvn.w	r2, #8
 8007750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2204      	movs	r2, #4
 8007756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	f003 0303 	and.w	r3, r3, #3
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f8b1 	bl	80078ce <HAL_TIM_IC_CaptureCallback>
 800776c:	e005      	b.n	800777a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f8a3 	bl	80078ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f8b4 	bl	80078e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	f003 0310 	and.w	r3, r3, #16
 800778a:	2b10      	cmp	r3, #16
 800778c:	d122      	bne.n	80077d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f003 0310 	and.w	r3, r3, #16
 8007798:	2b10      	cmp	r3, #16
 800779a:	d11b      	bne.n	80077d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f06f 0210 	mvn.w	r2, #16
 80077a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2208      	movs	r2, #8
 80077aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f887 	bl	80078ce <HAL_TIM_IC_CaptureCallback>
 80077c0:	e005      	b.n	80077ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f879 	bl	80078ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f88a 	bl	80078e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d10e      	bne.n	8007800 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d107      	bne.n	8007800 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f06f 0201 	mvn.w	r2, #1
 80077f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7f9 fda8 	bl	8001350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800780a:	2b80      	cmp	r3, #128	; 0x80
 800780c:	d10e      	bne.n	800782c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007818:	2b80      	cmp	r3, #128	; 0x80
 800781a:	d107      	bne.n	800782c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f914 	bl	8007a54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800783a:	d10e      	bne.n	800785a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007846:	2b80      	cmp	r3, #128	; 0x80
 8007848:	d107      	bne.n	800785a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f907 	bl	8007a68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007864:	2b40      	cmp	r3, #64	; 0x40
 8007866:	d10e      	bne.n	8007886 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007872:	2b40      	cmp	r3, #64	; 0x40
 8007874:	d107      	bne.n	8007886 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800787e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f838 	bl	80078f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	f003 0320 	and.w	r3, r3, #32
 8007890:	2b20      	cmp	r3, #32
 8007892:	d10e      	bne.n	80078b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f003 0320 	and.w	r3, r3, #32
 800789e:	2b20      	cmp	r3, #32
 80078a0:	d107      	bne.n	80078b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f06f 0220 	mvn.w	r2, #32
 80078aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f8c7 	bl	8007a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078b2:	bf00      	nop
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078d6:	bf00      	nop
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b083      	sub	sp, #12
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078ea:	bf00      	nop
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078f6:	b480      	push	{r7}
 80078f8:	b083      	sub	sp, #12
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078fe:	bf00      	nop
 8007900:	370c      	adds	r7, #12
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
	...

0800790c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a40      	ldr	r2, [pc, #256]	; (8007a20 <TIM_Base_SetConfig+0x114>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d013      	beq.n	800794c <TIM_Base_SetConfig+0x40>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792a:	d00f      	beq.n	800794c <TIM_Base_SetConfig+0x40>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a3d      	ldr	r2, [pc, #244]	; (8007a24 <TIM_Base_SetConfig+0x118>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d00b      	beq.n	800794c <TIM_Base_SetConfig+0x40>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a3c      	ldr	r2, [pc, #240]	; (8007a28 <TIM_Base_SetConfig+0x11c>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d007      	beq.n	800794c <TIM_Base_SetConfig+0x40>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a3b      	ldr	r2, [pc, #236]	; (8007a2c <TIM_Base_SetConfig+0x120>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d003      	beq.n	800794c <TIM_Base_SetConfig+0x40>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a3a      	ldr	r2, [pc, #232]	; (8007a30 <TIM_Base_SetConfig+0x124>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d108      	bne.n	800795e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007952:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	4313      	orrs	r3, r2
 800795c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a2f      	ldr	r2, [pc, #188]	; (8007a20 <TIM_Base_SetConfig+0x114>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d01f      	beq.n	80079a6 <TIM_Base_SetConfig+0x9a>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800796c:	d01b      	beq.n	80079a6 <TIM_Base_SetConfig+0x9a>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a2c      	ldr	r2, [pc, #176]	; (8007a24 <TIM_Base_SetConfig+0x118>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d017      	beq.n	80079a6 <TIM_Base_SetConfig+0x9a>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a2b      	ldr	r2, [pc, #172]	; (8007a28 <TIM_Base_SetConfig+0x11c>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d013      	beq.n	80079a6 <TIM_Base_SetConfig+0x9a>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a2a      	ldr	r2, [pc, #168]	; (8007a2c <TIM_Base_SetConfig+0x120>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d00f      	beq.n	80079a6 <TIM_Base_SetConfig+0x9a>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a29      	ldr	r2, [pc, #164]	; (8007a30 <TIM_Base_SetConfig+0x124>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d00b      	beq.n	80079a6 <TIM_Base_SetConfig+0x9a>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a28      	ldr	r2, [pc, #160]	; (8007a34 <TIM_Base_SetConfig+0x128>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d007      	beq.n	80079a6 <TIM_Base_SetConfig+0x9a>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a27      	ldr	r2, [pc, #156]	; (8007a38 <TIM_Base_SetConfig+0x12c>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d003      	beq.n	80079a6 <TIM_Base_SetConfig+0x9a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a26      	ldr	r2, [pc, #152]	; (8007a3c <TIM_Base_SetConfig+0x130>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d108      	bne.n	80079b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	4a10      	ldr	r2, [pc, #64]	; (8007a20 <TIM_Base_SetConfig+0x114>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d00f      	beq.n	8007a04 <TIM_Base_SetConfig+0xf8>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a12      	ldr	r2, [pc, #72]	; (8007a30 <TIM_Base_SetConfig+0x124>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d00b      	beq.n	8007a04 <TIM_Base_SetConfig+0xf8>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a11      	ldr	r2, [pc, #68]	; (8007a34 <TIM_Base_SetConfig+0x128>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d007      	beq.n	8007a04 <TIM_Base_SetConfig+0xf8>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a10      	ldr	r2, [pc, #64]	; (8007a38 <TIM_Base_SetConfig+0x12c>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d003      	beq.n	8007a04 <TIM_Base_SetConfig+0xf8>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a0f      	ldr	r2, [pc, #60]	; (8007a3c <TIM_Base_SetConfig+0x130>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d103      	bne.n	8007a0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	691a      	ldr	r2, [r3, #16]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	615a      	str	r2, [r3, #20]
}
 8007a12:	bf00      	nop
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	40010000 	.word	0x40010000
 8007a24:	40000400 	.word	0x40000400
 8007a28:	40000800 	.word	0x40000800
 8007a2c:	40000c00 	.word	0x40000c00
 8007a30:	40010400 	.word	0x40010400
 8007a34:	40014000 	.word	0x40014000
 8007a38:	40014400 	.word	0x40014400
 8007a3c:	40014800 	.word	0x40014800

08007a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e042      	b.n	8007b14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d106      	bne.n	8007aa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7f9 fddd 	bl	8001660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2224      	movs	r2, #36	; 0x24
 8007aaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0201 	bic.w	r2, r2, #1
 8007abc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fdaa 	bl	8008618 <UART_SetConfig>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d101      	bne.n	8007ace <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e022      	b.n	8007b14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f001 fb06 	bl	80090e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007aea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007afa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0201 	orr.w	r2, r2, #1
 8007b0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f001 fb8d 	bl	800922c <UART_CheckIdleState>
 8007b12:	4603      	mov	r3, r0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08a      	sub	sp, #40	; 0x28
 8007b20:	af02      	add	r7, sp, #8
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	603b      	str	r3, [r7, #0]
 8007b28:	4613      	mov	r3, r2
 8007b2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b32:	2b20      	cmp	r3, #32
 8007b34:	f040 8083 	bne.w	8007c3e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d002      	beq.n	8007b44 <HAL_UART_Transmit+0x28>
 8007b3e:	88fb      	ldrh	r3, [r7, #6]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e07b      	b.n	8007c40 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d101      	bne.n	8007b56 <HAL_UART_Transmit+0x3a>
 8007b52:	2302      	movs	r3, #2
 8007b54:	e074      	b.n	8007c40 <HAL_UART_Transmit+0x124>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2221      	movs	r2, #33	; 0x21
 8007b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b6e:	f7fa f8d1 	bl	8001d14 <HAL_GetTick>
 8007b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	88fa      	ldrh	r2, [r7, #6]
 8007b78:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	88fa      	ldrh	r2, [r7, #6]
 8007b80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b8c:	d108      	bne.n	8007ba0 <HAL_UART_Transmit+0x84>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d104      	bne.n	8007ba0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007b96:	2300      	movs	r3, #0
 8007b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	61bb      	str	r3, [r7, #24]
 8007b9e:	e003      	b.n	8007ba8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007bb0:	e02c      	b.n	8007c0c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	9300      	str	r3, [sp, #0]
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	2180      	movs	r1, #128	; 0x80
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f001 fb80 	bl	80092c2 <UART_WaitOnFlagUntilTimeout>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e039      	b.n	8007c40 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10b      	bne.n	8007bea <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	881b      	ldrh	r3, [r3, #0]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007be0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	3302      	adds	r3, #2
 8007be6:	61bb      	str	r3, [r7, #24]
 8007be8:	e007      	b.n	8007bfa <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	781a      	ldrb	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	3b01      	subs	r3, #1
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1cc      	bne.n	8007bb2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	2140      	movs	r1, #64	; 0x40
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f001 fb4d 	bl	80092c2 <UART_WaitOnFlagUntilTimeout>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e006      	b.n	8007c40 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	e000      	b.n	8007c40 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007c3e:	2302      	movs	r3, #2
  }
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3720      	adds	r7, #32
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08a      	sub	sp, #40	; 0x28
 8007c4c:	af02      	add	r7, sp, #8
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	4613      	mov	r3, r2
 8007c56:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c5e:	2b20      	cmp	r3, #32
 8007c60:	f040 80c0 	bne.w	8007de4 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <HAL_UART_Receive+0x28>
 8007c6a:	88fb      	ldrh	r3, [r7, #6]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e0b8      	b.n	8007de6 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d101      	bne.n	8007c82 <HAL_UART_Receive+0x3a>
 8007c7e:	2302      	movs	r3, #2
 8007c80:	e0b1      	b.n	8007de6 <HAL_UART_Receive+0x19e>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2201      	movs	r2, #1
 8007c86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2222      	movs	r2, #34	; 0x22
 8007c96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ca0:	f7fa f838 	bl	8001d14 <HAL_GetTick>
 8007ca4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	88fa      	ldrh	r2, [r7, #6]
 8007caa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	88fa      	ldrh	r2, [r7, #6]
 8007cb2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cbe:	d10e      	bne.n	8007cde <HAL_UART_Receive+0x96>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d105      	bne.n	8007cd4 <HAL_UART_Receive+0x8c>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007cce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007cd2:	e02d      	b.n	8007d30 <HAL_UART_Receive+0xe8>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	22ff      	movs	r2, #255	; 0xff
 8007cd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007cdc:	e028      	b.n	8007d30 <HAL_UART_Receive+0xe8>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10d      	bne.n	8007d02 <HAL_UART_Receive+0xba>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d104      	bne.n	8007cf8 <HAL_UART_Receive+0xb0>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	22ff      	movs	r2, #255	; 0xff
 8007cf2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007cf6:	e01b      	b.n	8007d30 <HAL_UART_Receive+0xe8>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	227f      	movs	r2, #127	; 0x7f
 8007cfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d00:	e016      	b.n	8007d30 <HAL_UART_Receive+0xe8>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d0a:	d10d      	bne.n	8007d28 <HAL_UART_Receive+0xe0>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	691b      	ldr	r3, [r3, #16]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d104      	bne.n	8007d1e <HAL_UART_Receive+0xd6>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	227f      	movs	r2, #127	; 0x7f
 8007d18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d1c:	e008      	b.n	8007d30 <HAL_UART_Receive+0xe8>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	223f      	movs	r2, #63	; 0x3f
 8007d22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007d26:	e003      	b.n	8007d30 <HAL_UART_Receive+0xe8>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007d36:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d40:	d108      	bne.n	8007d54 <HAL_UART_Receive+0x10c>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d104      	bne.n	8007d54 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	61bb      	str	r3, [r7, #24]
 8007d52:	e003      	b.n	8007d5c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007d64:	e032      	b.n	8007dcc <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2120      	movs	r1, #32
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f001 faa6 	bl	80092c2 <UART_WaitOnFlagUntilTimeout>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d001      	beq.n	8007d80 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8007d7c:	2303      	movs	r3, #3
 8007d7e:	e032      	b.n	8007de6 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d10c      	bne.n	8007da0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8c:	b29a      	uxth	r2, r3
 8007d8e:	8a7b      	ldrh	r3, [r7, #18]
 8007d90:	4013      	ands	r3, r2
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	3302      	adds	r3, #2
 8007d9c:	61bb      	str	r3, [r7, #24]
 8007d9e:	e00c      	b.n	8007dba <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	8a7b      	ldrh	r3, [r7, #18]
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	4013      	ands	r3, r2
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	3301      	adds	r3, #1
 8007db8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1c6      	bne.n	8007d66 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	e000      	b.n	8007de6 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8007de4:	2302      	movs	r3, #2
  }
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3720      	adds	r7, #32
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
	...

08007df0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b08a      	sub	sp, #40	; 0x28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e04:	2b20      	cmp	r3, #32
 8007e06:	d142      	bne.n	8007e8e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <HAL_UART_Receive_IT+0x24>
 8007e0e:	88fb      	ldrh	r3, [r7, #6]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e03b      	b.n	8007e90 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d101      	bne.n	8007e26 <HAL_UART_Receive_IT+0x36>
 8007e22:	2302      	movs	r3, #2
 8007e24:	e034      	b.n	8007e90 <HAL_UART_Receive_IT+0xa0>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a17      	ldr	r2, [pc, #92]	; (8007e98 <HAL_UART_Receive_IT+0xa8>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d01f      	beq.n	8007e7e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d018      	beq.n	8007e7e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	613b      	str	r3, [r7, #16]
   return(result);
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e60:	627b      	str	r3, [r7, #36]	; 0x24
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	461a      	mov	r2, r3
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	623b      	str	r3, [r7, #32]
 8007e6c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6e:	69f9      	ldr	r1, [r7, #28]
 8007e70:	6a3a      	ldr	r2, [r7, #32]
 8007e72:	e841 2300 	strex	r3, r2, [r1]
 8007e76:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e6      	bne.n	8007e4c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007e7e:	88fb      	ldrh	r3, [r7, #6]
 8007e80:	461a      	mov	r2, r3
 8007e82:	68b9      	ldr	r1, [r7, #8]
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f001 fae5 	bl	8009454 <UART_Start_Receive_IT>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	e000      	b.n	8007e90 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007e8e:	2302      	movs	r3, #2
  }
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3728      	adds	r7, #40	; 0x28
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	58000c00 	.word	0x58000c00

08007e9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b0ba      	sub	sp, #232	; 0xe8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	69db      	ldr	r3, [r3, #28]
 8007eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ec2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007ec6:	f640 030f 	movw	r3, #2063	; 0x80f
 8007eca:	4013      	ands	r3, r2
 8007ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007ed0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d11b      	bne.n	8007f10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007edc:	f003 0320 	and.w	r3, r3, #32
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d015      	beq.n	8007f10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ee8:	f003 0320 	and.w	r3, r3, #32
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d105      	bne.n	8007efc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d009      	beq.n	8007f10 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 835a 	beq.w	80085ba <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	4798      	blx	r3
      }
      return;
 8007f0e:	e354      	b.n	80085ba <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 811f 	beq.w	8008158 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007f1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007f1e:	4b8b      	ldr	r3, [pc, #556]	; (800814c <HAL_UART_IRQHandler+0x2b0>)
 8007f20:	4013      	ands	r3, r2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d106      	bne.n	8007f34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007f26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007f2a:	4b89      	ldr	r3, [pc, #548]	; (8008150 <HAL_UART_IRQHandler+0x2b4>)
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f000 8112 	beq.w	8008158 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d011      	beq.n	8007f64 <HAL_UART_IRQHandler+0xc8>
 8007f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00b      	beq.n	8007f64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2201      	movs	r2, #1
 8007f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f5a:	f043 0201 	orr.w	r2, r3, #1
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d011      	beq.n	8007f94 <HAL_UART_IRQHandler+0xf8>
 8007f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f74:	f003 0301 	and.w	r3, r3, #1
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00b      	beq.n	8007f94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2202      	movs	r2, #2
 8007f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f8a:	f043 0204 	orr.w	r2, r3, #4
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f98:	f003 0304 	and.w	r3, r3, #4
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d011      	beq.n	8007fc4 <HAL_UART_IRQHandler+0x128>
 8007fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00b      	beq.n	8007fc4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2204      	movs	r2, #4
 8007fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fba:	f043 0202 	orr.w	r2, r3, #2
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fc8:	f003 0308 	and.w	r3, r3, #8
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d017      	beq.n	8008000 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fd4:	f003 0320 	and.w	r3, r3, #32
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d105      	bne.n	8007fe8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007fdc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007fe0:	4b5a      	ldr	r3, [pc, #360]	; (800814c <HAL_UART_IRQHandler+0x2b0>)
 8007fe2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00b      	beq.n	8008000 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2208      	movs	r2, #8
 8007fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff6:	f043 0208 	orr.w	r2, r3, #8
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008008:	2b00      	cmp	r3, #0
 800800a:	d012      	beq.n	8008032 <HAL_UART_IRQHandler+0x196>
 800800c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00c      	beq.n	8008032 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008020:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008028:	f043 0220 	orr.w	r2, r3, #32
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 82c0 	beq.w	80085be <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800803e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008042:	f003 0320 	and.w	r3, r3, #32
 8008046:	2b00      	cmp	r3, #0
 8008048:	d013      	beq.n	8008072 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800804a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800804e:	f003 0320 	and.w	r3, r3, #32
 8008052:	2b00      	cmp	r3, #0
 8008054:	d105      	bne.n	8008062 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800805a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d007      	beq.n	8008072 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008078:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008086:	2b40      	cmp	r3, #64	; 0x40
 8008088:	d005      	beq.n	8008096 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800808a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800808e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008092:	2b00      	cmp	r3, #0
 8008094:	d04f      	beq.n	8008136 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f001 fb06 	bl	80096a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a6:	2b40      	cmp	r3, #64	; 0x40
 80080a8:	d141      	bne.n	800812e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3308      	adds	r3, #8
 80080b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080b8:	e853 3f00 	ldrex	r3, [r3]
 80080bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80080c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	3308      	adds	r3, #8
 80080d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80080d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80080da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80080e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080e6:	e841 2300 	strex	r3, r2, [r1]
 80080ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80080ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1d9      	bne.n	80080aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d013      	beq.n	8008126 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008102:	4a14      	ldr	r2, [pc, #80]	; (8008154 <HAL_UART_IRQHandler+0x2b8>)
 8008104:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800810a:	4618      	mov	r0, r3
 800810c:	f7fa fa50 	bl	80025b0 <HAL_DMA_Abort_IT>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d017      	beq.n	8008146 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800811a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008120:	4610      	mov	r0, r2
 8008122:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008124:	e00f      	b.n	8008146 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 fa60 	bl	80085ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800812c:	e00b      	b.n	8008146 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fa5c 	bl	80085ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008134:	e007      	b.n	8008146 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 fa58 	bl	80085ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008144:	e23b      	b.n	80085be <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008146:	bf00      	nop
    return;
 8008148:	e239      	b.n	80085be <HAL_UART_IRQHandler+0x722>
 800814a:	bf00      	nop
 800814c:	10000001 	.word	0x10000001
 8008150:	04000120 	.word	0x04000120
 8008154:	08009775 	.word	0x08009775

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800815c:	2b01      	cmp	r3, #1
 800815e:	f040 81ce 	bne.w	80084fe <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008166:	f003 0310 	and.w	r3, r3, #16
 800816a:	2b00      	cmp	r3, #0
 800816c:	f000 81c7 	beq.w	80084fe <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008174:	f003 0310 	and.w	r3, r3, #16
 8008178:	2b00      	cmp	r3, #0
 800817a:	f000 81c0 	beq.w	80084fe <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2210      	movs	r2, #16
 8008184:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008190:	2b40      	cmp	r3, #64	; 0x40
 8008192:	f040 813b 	bne.w	800840c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a8b      	ldr	r2, [pc, #556]	; (80083cc <HAL_UART_IRQHandler+0x530>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d059      	beq.n	8008256 <HAL_UART_IRQHandler+0x3ba>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a89      	ldr	r2, [pc, #548]	; (80083d0 <HAL_UART_IRQHandler+0x534>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d053      	beq.n	8008256 <HAL_UART_IRQHandler+0x3ba>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a87      	ldr	r2, [pc, #540]	; (80083d4 <HAL_UART_IRQHandler+0x538>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d04d      	beq.n	8008256 <HAL_UART_IRQHandler+0x3ba>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a85      	ldr	r2, [pc, #532]	; (80083d8 <HAL_UART_IRQHandler+0x53c>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d047      	beq.n	8008256 <HAL_UART_IRQHandler+0x3ba>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a83      	ldr	r2, [pc, #524]	; (80083dc <HAL_UART_IRQHandler+0x540>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d041      	beq.n	8008256 <HAL_UART_IRQHandler+0x3ba>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a81      	ldr	r2, [pc, #516]	; (80083e0 <HAL_UART_IRQHandler+0x544>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d03b      	beq.n	8008256 <HAL_UART_IRQHandler+0x3ba>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a7f      	ldr	r2, [pc, #508]	; (80083e4 <HAL_UART_IRQHandler+0x548>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d035      	beq.n	8008256 <HAL_UART_IRQHandler+0x3ba>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a7d      	ldr	r2, [pc, #500]	; (80083e8 <HAL_UART_IRQHandler+0x54c>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d02f      	beq.n	8008256 <HAL_UART_IRQHandler+0x3ba>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a7b      	ldr	r2, [pc, #492]	; (80083ec <HAL_UART_IRQHandler+0x550>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d029      	beq.n	8008256 <HAL_UART_IRQHandler+0x3ba>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a79      	ldr	r2, [pc, #484]	; (80083f0 <HAL_UART_IRQHandler+0x554>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d023      	beq.n	8008256 <HAL_UART_IRQHandler+0x3ba>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a77      	ldr	r2, [pc, #476]	; (80083f4 <HAL_UART_IRQHandler+0x558>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d01d      	beq.n	8008256 <HAL_UART_IRQHandler+0x3ba>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a75      	ldr	r2, [pc, #468]	; (80083f8 <HAL_UART_IRQHandler+0x55c>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d017      	beq.n	8008256 <HAL_UART_IRQHandler+0x3ba>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a73      	ldr	r2, [pc, #460]	; (80083fc <HAL_UART_IRQHandler+0x560>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d011      	beq.n	8008256 <HAL_UART_IRQHandler+0x3ba>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a71      	ldr	r2, [pc, #452]	; (8008400 <HAL_UART_IRQHandler+0x564>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d00b      	beq.n	8008256 <HAL_UART_IRQHandler+0x3ba>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a6f      	ldr	r2, [pc, #444]	; (8008404 <HAL_UART_IRQHandler+0x568>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d005      	beq.n	8008256 <HAL_UART_IRQHandler+0x3ba>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a6d      	ldr	r2, [pc, #436]	; (8008408 <HAL_UART_IRQHandler+0x56c>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d105      	bne.n	8008262 <HAL_UART_IRQHandler+0x3c6>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	b29b      	uxth	r3, r3
 8008260:	e004      	b.n	800826c <HAL_UART_IRQHandler+0x3d0>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	b29b      	uxth	r3, r3
 800826c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008270:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 81a4 	beq.w	80085c2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008280:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008284:	429a      	cmp	r2, r3
 8008286:	f080 819c 	bcs.w	80085c2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008290:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800829e:	f000 8086 	beq.w	80083ae <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80082ae:	e853 3f00 	ldrex	r3, [r3]
 80082b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80082b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	461a      	mov	r2, r3
 80082c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80082cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80082d0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80082d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80082dc:	e841 2300 	strex	r3, r2, [r1]
 80082e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80082e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d1da      	bne.n	80082a2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	3308      	adds	r3, #8
 80082f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082f6:	e853 3f00 	ldrex	r3, [r3]
 80082fa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80082fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082fe:	f023 0301 	bic.w	r3, r3, #1
 8008302:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	3308      	adds	r3, #8
 800830c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008310:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008314:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008316:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008318:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800831c:	e841 2300 	strex	r3, r2, [r1]
 8008320:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1e1      	bne.n	80082ec <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3308      	adds	r3, #8
 800832e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008332:	e853 3f00 	ldrex	r3, [r3]
 8008336:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800833a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800833e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3308      	adds	r3, #8
 8008348:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800834c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800834e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008350:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008352:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008354:	e841 2300 	strex	r3, r2, [r1]
 8008358:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800835a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e3      	bne.n	8008328 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2220      	movs	r2, #32
 8008364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008376:	e853 3f00 	ldrex	r3, [r3]
 800837a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800837c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800837e:	f023 0310 	bic.w	r3, r3, #16
 8008382:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008390:	65bb      	str	r3, [r7, #88]	; 0x58
 8008392:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008394:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008396:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008398:	e841 2300 	strex	r3, r2, [r1]
 800839c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800839e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d1e4      	bne.n	800836e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7f9 fde3 	bl	8001f74 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	b29b      	uxth	r3, r3
 80083c0:	4619      	mov	r1, r3
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f91c 	bl	8008600 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083c8:	e0fb      	b.n	80085c2 <HAL_UART_IRQHandler+0x726>
 80083ca:	bf00      	nop
 80083cc:	40020010 	.word	0x40020010
 80083d0:	40020028 	.word	0x40020028
 80083d4:	40020040 	.word	0x40020040
 80083d8:	40020058 	.word	0x40020058
 80083dc:	40020070 	.word	0x40020070
 80083e0:	40020088 	.word	0x40020088
 80083e4:	400200a0 	.word	0x400200a0
 80083e8:	400200b8 	.word	0x400200b8
 80083ec:	40020410 	.word	0x40020410
 80083f0:	40020428 	.word	0x40020428
 80083f4:	40020440 	.word	0x40020440
 80083f8:	40020458 	.word	0x40020458
 80083fc:	40020470 	.word	0x40020470
 8008400:	40020488 	.word	0x40020488
 8008404:	400204a0 	.word	0x400204a0
 8008408:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008418:	b29b      	uxth	r3, r3
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008426:	b29b      	uxth	r3, r3
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 80cc 	beq.w	80085c6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800842e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008432:	2b00      	cmp	r3, #0
 8008434:	f000 80c7 	beq.w	80085c6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008440:	e853 3f00 	ldrex	r3, [r3]
 8008444:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008448:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800844c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	461a      	mov	r2, r3
 8008456:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800845a:	647b      	str	r3, [r7, #68]	; 0x44
 800845c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008462:	e841 2300 	strex	r3, r2, [r1]
 8008466:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800846a:	2b00      	cmp	r3, #0
 800846c:	d1e4      	bne.n	8008438 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3308      	adds	r3, #8
 8008474:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	e853 3f00 	ldrex	r3, [r3]
 800847c:	623b      	str	r3, [r7, #32]
   return(result);
 800847e:	6a3a      	ldr	r2, [r7, #32]
 8008480:	4b54      	ldr	r3, [pc, #336]	; (80085d4 <HAL_UART_IRQHandler+0x738>)
 8008482:	4013      	ands	r3, r2
 8008484:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3308      	adds	r3, #8
 800848e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008492:	633a      	str	r2, [r7, #48]	; 0x30
 8008494:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008496:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800849a:	e841 2300 	strex	r3, r2, [r1]
 800849e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1e3      	bne.n	800846e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2220      	movs	r2, #32
 80084aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2200      	movs	r2, #0
 80084b8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	e853 3f00 	ldrex	r3, [r3]
 80084c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f023 0310 	bic.w	r3, r3, #16
 80084ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	461a      	mov	r2, r3
 80084d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80084dc:	61fb      	str	r3, [r7, #28]
 80084de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e0:	69b9      	ldr	r1, [r7, #24]
 80084e2:	69fa      	ldr	r2, [r7, #28]
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	617b      	str	r3, [r7, #20]
   return(result);
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e4      	bne.n	80084ba <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084f4:	4619      	mov	r1, r3
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f882 	bl	8008600 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084fc:	e063      	b.n	80085c6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80084fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00e      	beq.n	8008528 <HAL_UART_IRQHandler+0x68c>
 800850a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800850e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d008      	beq.n	8008528 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800851e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f001 fdc5 	bl	800a0b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008526:	e051      	b.n	80085cc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800852c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008530:	2b00      	cmp	r3, #0
 8008532:	d014      	beq.n	800855e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800853c:	2b00      	cmp	r3, #0
 800853e:	d105      	bne.n	800854c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008544:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d008      	beq.n	800855e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008550:	2b00      	cmp	r3, #0
 8008552:	d03a      	beq.n	80085ca <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008558:	6878      	ldr	r0, [r7, #4]
 800855a:	4798      	blx	r3
    }
    return;
 800855c:	e035      	b.n	80085ca <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800855e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008566:	2b00      	cmp	r3, #0
 8008568:	d009      	beq.n	800857e <HAL_UART_IRQHandler+0x6e2>
 800856a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800856e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008572:	2b00      	cmp	r3, #0
 8008574:	d003      	beq.n	800857e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f001 f912 	bl	80097a0 <UART_EndTransmit_IT>
    return;
 800857c:	e026      	b.n	80085cc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800857e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d009      	beq.n	800859e <HAL_UART_IRQHandler+0x702>
 800858a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800858e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f001 fd9e 	bl	800a0d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800859c:	e016      	b.n	80085cc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800859e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d010      	beq.n	80085cc <HAL_UART_IRQHandler+0x730>
 80085aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	da0c      	bge.n	80085cc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f001 fd86 	bl	800a0c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80085b8:	e008      	b.n	80085cc <HAL_UART_IRQHandler+0x730>
      return;
 80085ba:	bf00      	nop
 80085bc:	e006      	b.n	80085cc <HAL_UART_IRQHandler+0x730>
    return;
 80085be:	bf00      	nop
 80085c0:	e004      	b.n	80085cc <HAL_UART_IRQHandler+0x730>
      return;
 80085c2:	bf00      	nop
 80085c4:	e002      	b.n	80085cc <HAL_UART_IRQHandler+0x730>
      return;
 80085c6:	bf00      	nop
 80085c8:	e000      	b.n	80085cc <HAL_UART_IRQHandler+0x730>
    return;
 80085ca:	bf00      	nop
  }
}
 80085cc:	37e8      	adds	r7, #232	; 0xe8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	effffffe 	.word	0xeffffffe

080085d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800861c:	b092      	sub	sp, #72	; 0x48
 800861e:	af00      	add	r7, sp, #0
 8008620:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	431a      	orrs	r2, r3
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	431a      	orrs	r2, r3
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	69db      	ldr	r3, [r3, #28]
 800863c:	4313      	orrs	r3, r2
 800863e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	4bbe      	ldr	r3, [pc, #760]	; (8008940 <UART_SetConfig+0x328>)
 8008648:	4013      	ands	r3, r2
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	6812      	ldr	r2, [r2, #0]
 800864e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008650:	430b      	orrs	r3, r1
 8008652:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	68da      	ldr	r2, [r3, #12]
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	430a      	orrs	r2, r1
 8008668:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4ab3      	ldr	r2, [pc, #716]	; (8008944 <UART_SetConfig+0x32c>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d004      	beq.n	8008684 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008680:	4313      	orrs	r3, r2
 8008682:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689a      	ldr	r2, [r3, #8]
 800868a:	4baf      	ldr	r3, [pc, #700]	; (8008948 <UART_SetConfig+0x330>)
 800868c:	4013      	ands	r3, r2
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	6812      	ldr	r2, [r2, #0]
 8008692:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008694:	430b      	orrs	r3, r1
 8008696:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869e:	f023 010f 	bic.w	r1, r3, #15
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4aa6      	ldr	r2, [pc, #664]	; (800894c <UART_SetConfig+0x334>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d177      	bne.n	80087a8 <UART_SetConfig+0x190>
 80086b8:	4ba5      	ldr	r3, [pc, #660]	; (8008950 <UART_SetConfig+0x338>)
 80086ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086c0:	2b28      	cmp	r3, #40	; 0x28
 80086c2:	d86d      	bhi.n	80087a0 <UART_SetConfig+0x188>
 80086c4:	a201      	add	r2, pc, #4	; (adr r2, 80086cc <UART_SetConfig+0xb4>)
 80086c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ca:	bf00      	nop
 80086cc:	08008771 	.word	0x08008771
 80086d0:	080087a1 	.word	0x080087a1
 80086d4:	080087a1 	.word	0x080087a1
 80086d8:	080087a1 	.word	0x080087a1
 80086dc:	080087a1 	.word	0x080087a1
 80086e0:	080087a1 	.word	0x080087a1
 80086e4:	080087a1 	.word	0x080087a1
 80086e8:	080087a1 	.word	0x080087a1
 80086ec:	08008779 	.word	0x08008779
 80086f0:	080087a1 	.word	0x080087a1
 80086f4:	080087a1 	.word	0x080087a1
 80086f8:	080087a1 	.word	0x080087a1
 80086fc:	080087a1 	.word	0x080087a1
 8008700:	080087a1 	.word	0x080087a1
 8008704:	080087a1 	.word	0x080087a1
 8008708:	080087a1 	.word	0x080087a1
 800870c:	08008781 	.word	0x08008781
 8008710:	080087a1 	.word	0x080087a1
 8008714:	080087a1 	.word	0x080087a1
 8008718:	080087a1 	.word	0x080087a1
 800871c:	080087a1 	.word	0x080087a1
 8008720:	080087a1 	.word	0x080087a1
 8008724:	080087a1 	.word	0x080087a1
 8008728:	080087a1 	.word	0x080087a1
 800872c:	08008789 	.word	0x08008789
 8008730:	080087a1 	.word	0x080087a1
 8008734:	080087a1 	.word	0x080087a1
 8008738:	080087a1 	.word	0x080087a1
 800873c:	080087a1 	.word	0x080087a1
 8008740:	080087a1 	.word	0x080087a1
 8008744:	080087a1 	.word	0x080087a1
 8008748:	080087a1 	.word	0x080087a1
 800874c:	08008791 	.word	0x08008791
 8008750:	080087a1 	.word	0x080087a1
 8008754:	080087a1 	.word	0x080087a1
 8008758:	080087a1 	.word	0x080087a1
 800875c:	080087a1 	.word	0x080087a1
 8008760:	080087a1 	.word	0x080087a1
 8008764:	080087a1 	.word	0x080087a1
 8008768:	080087a1 	.word	0x080087a1
 800876c:	08008799 	.word	0x08008799
 8008770:	2301      	movs	r3, #1
 8008772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008776:	e222      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008778:	2304      	movs	r3, #4
 800877a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800877e:	e21e      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008780:	2308      	movs	r3, #8
 8008782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008786:	e21a      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008788:	2310      	movs	r3, #16
 800878a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800878e:	e216      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008790:	2320      	movs	r3, #32
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008796:	e212      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008798:	2340      	movs	r3, #64	; 0x40
 800879a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800879e:	e20e      	b.n	8008bbe <UART_SetConfig+0x5a6>
 80087a0:	2380      	movs	r3, #128	; 0x80
 80087a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087a6:	e20a      	b.n	8008bbe <UART_SetConfig+0x5a6>
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a69      	ldr	r2, [pc, #420]	; (8008954 <UART_SetConfig+0x33c>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d130      	bne.n	8008814 <UART_SetConfig+0x1fc>
 80087b2:	4b67      	ldr	r3, [pc, #412]	; (8008950 <UART_SetConfig+0x338>)
 80087b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b6:	f003 0307 	and.w	r3, r3, #7
 80087ba:	2b05      	cmp	r3, #5
 80087bc:	d826      	bhi.n	800880c <UART_SetConfig+0x1f4>
 80087be:	a201      	add	r2, pc, #4	; (adr r2, 80087c4 <UART_SetConfig+0x1ac>)
 80087c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c4:	080087dd 	.word	0x080087dd
 80087c8:	080087e5 	.word	0x080087e5
 80087cc:	080087ed 	.word	0x080087ed
 80087d0:	080087f5 	.word	0x080087f5
 80087d4:	080087fd 	.word	0x080087fd
 80087d8:	08008805 	.word	0x08008805
 80087dc:	2300      	movs	r3, #0
 80087de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087e2:	e1ec      	b.n	8008bbe <UART_SetConfig+0x5a6>
 80087e4:	2304      	movs	r3, #4
 80087e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ea:	e1e8      	b.n	8008bbe <UART_SetConfig+0x5a6>
 80087ec:	2308      	movs	r3, #8
 80087ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087f2:	e1e4      	b.n	8008bbe <UART_SetConfig+0x5a6>
 80087f4:	2310      	movs	r3, #16
 80087f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fa:	e1e0      	b.n	8008bbe <UART_SetConfig+0x5a6>
 80087fc:	2320      	movs	r3, #32
 80087fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008802:	e1dc      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008804:	2340      	movs	r3, #64	; 0x40
 8008806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800880a:	e1d8      	b.n	8008bbe <UART_SetConfig+0x5a6>
 800880c:	2380      	movs	r3, #128	; 0x80
 800880e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008812:	e1d4      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a4f      	ldr	r2, [pc, #316]	; (8008958 <UART_SetConfig+0x340>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d130      	bne.n	8008880 <UART_SetConfig+0x268>
 800881e:	4b4c      	ldr	r3, [pc, #304]	; (8008950 <UART_SetConfig+0x338>)
 8008820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008822:	f003 0307 	and.w	r3, r3, #7
 8008826:	2b05      	cmp	r3, #5
 8008828:	d826      	bhi.n	8008878 <UART_SetConfig+0x260>
 800882a:	a201      	add	r2, pc, #4	; (adr r2, 8008830 <UART_SetConfig+0x218>)
 800882c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008830:	08008849 	.word	0x08008849
 8008834:	08008851 	.word	0x08008851
 8008838:	08008859 	.word	0x08008859
 800883c:	08008861 	.word	0x08008861
 8008840:	08008869 	.word	0x08008869
 8008844:	08008871 	.word	0x08008871
 8008848:	2300      	movs	r3, #0
 800884a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800884e:	e1b6      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008850:	2304      	movs	r3, #4
 8008852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008856:	e1b2      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008858:	2308      	movs	r3, #8
 800885a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800885e:	e1ae      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008860:	2310      	movs	r3, #16
 8008862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008866:	e1aa      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008868:	2320      	movs	r3, #32
 800886a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800886e:	e1a6      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008870:	2340      	movs	r3, #64	; 0x40
 8008872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008876:	e1a2      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008878:	2380      	movs	r3, #128	; 0x80
 800887a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800887e:	e19e      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a35      	ldr	r2, [pc, #212]	; (800895c <UART_SetConfig+0x344>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d130      	bne.n	80088ec <UART_SetConfig+0x2d4>
 800888a:	4b31      	ldr	r3, [pc, #196]	; (8008950 <UART_SetConfig+0x338>)
 800888c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888e:	f003 0307 	and.w	r3, r3, #7
 8008892:	2b05      	cmp	r3, #5
 8008894:	d826      	bhi.n	80088e4 <UART_SetConfig+0x2cc>
 8008896:	a201      	add	r2, pc, #4	; (adr r2, 800889c <UART_SetConfig+0x284>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	080088b5 	.word	0x080088b5
 80088a0:	080088bd 	.word	0x080088bd
 80088a4:	080088c5 	.word	0x080088c5
 80088a8:	080088cd 	.word	0x080088cd
 80088ac:	080088d5 	.word	0x080088d5
 80088b0:	080088dd 	.word	0x080088dd
 80088b4:	2300      	movs	r3, #0
 80088b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ba:	e180      	b.n	8008bbe <UART_SetConfig+0x5a6>
 80088bc:	2304      	movs	r3, #4
 80088be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088c2:	e17c      	b.n	8008bbe <UART_SetConfig+0x5a6>
 80088c4:	2308      	movs	r3, #8
 80088c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ca:	e178      	b.n	8008bbe <UART_SetConfig+0x5a6>
 80088cc:	2310      	movs	r3, #16
 80088ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088d2:	e174      	b.n	8008bbe <UART_SetConfig+0x5a6>
 80088d4:	2320      	movs	r3, #32
 80088d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088da:	e170      	b.n	8008bbe <UART_SetConfig+0x5a6>
 80088dc:	2340      	movs	r3, #64	; 0x40
 80088de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088e2:	e16c      	b.n	8008bbe <UART_SetConfig+0x5a6>
 80088e4:	2380      	movs	r3, #128	; 0x80
 80088e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ea:	e168      	b.n	8008bbe <UART_SetConfig+0x5a6>
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a1b      	ldr	r2, [pc, #108]	; (8008960 <UART_SetConfig+0x348>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d142      	bne.n	800897c <UART_SetConfig+0x364>
 80088f6:	4b16      	ldr	r3, [pc, #88]	; (8008950 <UART_SetConfig+0x338>)
 80088f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	2b05      	cmp	r3, #5
 8008900:	d838      	bhi.n	8008974 <UART_SetConfig+0x35c>
 8008902:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <UART_SetConfig+0x2f0>)
 8008904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008908:	08008921 	.word	0x08008921
 800890c:	08008929 	.word	0x08008929
 8008910:	08008931 	.word	0x08008931
 8008914:	08008939 	.word	0x08008939
 8008918:	08008965 	.word	0x08008965
 800891c:	0800896d 	.word	0x0800896d
 8008920:	2300      	movs	r3, #0
 8008922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008926:	e14a      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008928:	2304      	movs	r3, #4
 800892a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800892e:	e146      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008930:	2308      	movs	r3, #8
 8008932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008936:	e142      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008938:	2310      	movs	r3, #16
 800893a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800893e:	e13e      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008940:	cfff69f3 	.word	0xcfff69f3
 8008944:	58000c00 	.word	0x58000c00
 8008948:	11fff4ff 	.word	0x11fff4ff
 800894c:	40011000 	.word	0x40011000
 8008950:	58024400 	.word	0x58024400
 8008954:	40004400 	.word	0x40004400
 8008958:	40004800 	.word	0x40004800
 800895c:	40004c00 	.word	0x40004c00
 8008960:	40005000 	.word	0x40005000
 8008964:	2320      	movs	r3, #32
 8008966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800896a:	e128      	b.n	8008bbe <UART_SetConfig+0x5a6>
 800896c:	2340      	movs	r3, #64	; 0x40
 800896e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008972:	e124      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008974:	2380      	movs	r3, #128	; 0x80
 8008976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800897a:	e120      	b.n	8008bbe <UART_SetConfig+0x5a6>
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4acb      	ldr	r2, [pc, #812]	; (8008cb0 <UART_SetConfig+0x698>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d176      	bne.n	8008a74 <UART_SetConfig+0x45c>
 8008986:	4bcb      	ldr	r3, [pc, #812]	; (8008cb4 <UART_SetConfig+0x69c>)
 8008988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800898a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800898e:	2b28      	cmp	r3, #40	; 0x28
 8008990:	d86c      	bhi.n	8008a6c <UART_SetConfig+0x454>
 8008992:	a201      	add	r2, pc, #4	; (adr r2, 8008998 <UART_SetConfig+0x380>)
 8008994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008998:	08008a3d 	.word	0x08008a3d
 800899c:	08008a6d 	.word	0x08008a6d
 80089a0:	08008a6d 	.word	0x08008a6d
 80089a4:	08008a6d 	.word	0x08008a6d
 80089a8:	08008a6d 	.word	0x08008a6d
 80089ac:	08008a6d 	.word	0x08008a6d
 80089b0:	08008a6d 	.word	0x08008a6d
 80089b4:	08008a6d 	.word	0x08008a6d
 80089b8:	08008a45 	.word	0x08008a45
 80089bc:	08008a6d 	.word	0x08008a6d
 80089c0:	08008a6d 	.word	0x08008a6d
 80089c4:	08008a6d 	.word	0x08008a6d
 80089c8:	08008a6d 	.word	0x08008a6d
 80089cc:	08008a6d 	.word	0x08008a6d
 80089d0:	08008a6d 	.word	0x08008a6d
 80089d4:	08008a6d 	.word	0x08008a6d
 80089d8:	08008a4d 	.word	0x08008a4d
 80089dc:	08008a6d 	.word	0x08008a6d
 80089e0:	08008a6d 	.word	0x08008a6d
 80089e4:	08008a6d 	.word	0x08008a6d
 80089e8:	08008a6d 	.word	0x08008a6d
 80089ec:	08008a6d 	.word	0x08008a6d
 80089f0:	08008a6d 	.word	0x08008a6d
 80089f4:	08008a6d 	.word	0x08008a6d
 80089f8:	08008a55 	.word	0x08008a55
 80089fc:	08008a6d 	.word	0x08008a6d
 8008a00:	08008a6d 	.word	0x08008a6d
 8008a04:	08008a6d 	.word	0x08008a6d
 8008a08:	08008a6d 	.word	0x08008a6d
 8008a0c:	08008a6d 	.word	0x08008a6d
 8008a10:	08008a6d 	.word	0x08008a6d
 8008a14:	08008a6d 	.word	0x08008a6d
 8008a18:	08008a5d 	.word	0x08008a5d
 8008a1c:	08008a6d 	.word	0x08008a6d
 8008a20:	08008a6d 	.word	0x08008a6d
 8008a24:	08008a6d 	.word	0x08008a6d
 8008a28:	08008a6d 	.word	0x08008a6d
 8008a2c:	08008a6d 	.word	0x08008a6d
 8008a30:	08008a6d 	.word	0x08008a6d
 8008a34:	08008a6d 	.word	0x08008a6d
 8008a38:	08008a65 	.word	0x08008a65
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a42:	e0bc      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008a44:	2304      	movs	r3, #4
 8008a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a4a:	e0b8      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008a4c:	2308      	movs	r3, #8
 8008a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a52:	e0b4      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008a54:	2310      	movs	r3, #16
 8008a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5a:	e0b0      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008a5c:	2320      	movs	r3, #32
 8008a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a62:	e0ac      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008a64:	2340      	movs	r3, #64	; 0x40
 8008a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a6a:	e0a8      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008a6c:	2380      	movs	r3, #128	; 0x80
 8008a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a72:	e0a4      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a8f      	ldr	r2, [pc, #572]	; (8008cb8 <UART_SetConfig+0x6a0>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d130      	bne.n	8008ae0 <UART_SetConfig+0x4c8>
 8008a7e:	4b8d      	ldr	r3, [pc, #564]	; (8008cb4 <UART_SetConfig+0x69c>)
 8008a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a82:	f003 0307 	and.w	r3, r3, #7
 8008a86:	2b05      	cmp	r3, #5
 8008a88:	d826      	bhi.n	8008ad8 <UART_SetConfig+0x4c0>
 8008a8a:	a201      	add	r2, pc, #4	; (adr r2, 8008a90 <UART_SetConfig+0x478>)
 8008a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a90:	08008aa9 	.word	0x08008aa9
 8008a94:	08008ab1 	.word	0x08008ab1
 8008a98:	08008ab9 	.word	0x08008ab9
 8008a9c:	08008ac1 	.word	0x08008ac1
 8008aa0:	08008ac9 	.word	0x08008ac9
 8008aa4:	08008ad1 	.word	0x08008ad1
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aae:	e086      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008ab0:	2304      	movs	r3, #4
 8008ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab6:	e082      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008ab8:	2308      	movs	r3, #8
 8008aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008abe:	e07e      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008ac0:	2310      	movs	r3, #16
 8008ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac6:	e07a      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008ac8:	2320      	movs	r3, #32
 8008aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ace:	e076      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008ad0:	2340      	movs	r3, #64	; 0x40
 8008ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ad6:	e072      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008ad8:	2380      	movs	r3, #128	; 0x80
 8008ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ade:	e06e      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a75      	ldr	r2, [pc, #468]	; (8008cbc <UART_SetConfig+0x6a4>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d130      	bne.n	8008b4c <UART_SetConfig+0x534>
 8008aea:	4b72      	ldr	r3, [pc, #456]	; (8008cb4 <UART_SetConfig+0x69c>)
 8008aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aee:	f003 0307 	and.w	r3, r3, #7
 8008af2:	2b05      	cmp	r3, #5
 8008af4:	d826      	bhi.n	8008b44 <UART_SetConfig+0x52c>
 8008af6:	a201      	add	r2, pc, #4	; (adr r2, 8008afc <UART_SetConfig+0x4e4>)
 8008af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afc:	08008b15 	.word	0x08008b15
 8008b00:	08008b1d 	.word	0x08008b1d
 8008b04:	08008b25 	.word	0x08008b25
 8008b08:	08008b2d 	.word	0x08008b2d
 8008b0c:	08008b35 	.word	0x08008b35
 8008b10:	08008b3d 	.word	0x08008b3d
 8008b14:	2300      	movs	r3, #0
 8008b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b1a:	e050      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008b1c:	2304      	movs	r3, #4
 8008b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b22:	e04c      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008b24:	2308      	movs	r3, #8
 8008b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b2a:	e048      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008b2c:	2310      	movs	r3, #16
 8008b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b32:	e044      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008b34:	2320      	movs	r3, #32
 8008b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b3a:	e040      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008b3c:	2340      	movs	r3, #64	; 0x40
 8008b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b42:	e03c      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008b44:	2380      	movs	r3, #128	; 0x80
 8008b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b4a:	e038      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a5b      	ldr	r2, [pc, #364]	; (8008cc0 <UART_SetConfig+0x6a8>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d130      	bne.n	8008bb8 <UART_SetConfig+0x5a0>
 8008b56:	4b57      	ldr	r3, [pc, #348]	; (8008cb4 <UART_SetConfig+0x69c>)
 8008b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b5a:	f003 0307 	and.w	r3, r3, #7
 8008b5e:	2b05      	cmp	r3, #5
 8008b60:	d826      	bhi.n	8008bb0 <UART_SetConfig+0x598>
 8008b62:	a201      	add	r2, pc, #4	; (adr r2, 8008b68 <UART_SetConfig+0x550>)
 8008b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b68:	08008b81 	.word	0x08008b81
 8008b6c:	08008b89 	.word	0x08008b89
 8008b70:	08008b91 	.word	0x08008b91
 8008b74:	08008b99 	.word	0x08008b99
 8008b78:	08008ba1 	.word	0x08008ba1
 8008b7c:	08008ba9 	.word	0x08008ba9
 8008b80:	2302      	movs	r3, #2
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b86:	e01a      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008b88:	2304      	movs	r3, #4
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b8e:	e016      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008b90:	2308      	movs	r3, #8
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b96:	e012      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008b98:	2310      	movs	r3, #16
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b9e:	e00e      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008ba0:	2320      	movs	r3, #32
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ba6:	e00a      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008ba8:	2340      	movs	r3, #64	; 0x40
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bae:	e006      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008bb0:	2380      	movs	r3, #128	; 0x80
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bb6:	e002      	b.n	8008bbe <UART_SetConfig+0x5a6>
 8008bb8:	2380      	movs	r3, #128	; 0x80
 8008bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a3f      	ldr	r2, [pc, #252]	; (8008cc0 <UART_SetConfig+0x6a8>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	f040 80f8 	bne.w	8008dba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008bca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008bce:	2b20      	cmp	r3, #32
 8008bd0:	dc46      	bgt.n	8008c60 <UART_SetConfig+0x648>
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	f2c0 8082 	blt.w	8008cdc <UART_SetConfig+0x6c4>
 8008bd8:	3b02      	subs	r3, #2
 8008bda:	2b1e      	cmp	r3, #30
 8008bdc:	d87e      	bhi.n	8008cdc <UART_SetConfig+0x6c4>
 8008bde:	a201      	add	r2, pc, #4	; (adr r2, 8008be4 <UART_SetConfig+0x5cc>)
 8008be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be4:	08008c67 	.word	0x08008c67
 8008be8:	08008cdd 	.word	0x08008cdd
 8008bec:	08008c6f 	.word	0x08008c6f
 8008bf0:	08008cdd 	.word	0x08008cdd
 8008bf4:	08008cdd 	.word	0x08008cdd
 8008bf8:	08008cdd 	.word	0x08008cdd
 8008bfc:	08008c7f 	.word	0x08008c7f
 8008c00:	08008cdd 	.word	0x08008cdd
 8008c04:	08008cdd 	.word	0x08008cdd
 8008c08:	08008cdd 	.word	0x08008cdd
 8008c0c:	08008cdd 	.word	0x08008cdd
 8008c10:	08008cdd 	.word	0x08008cdd
 8008c14:	08008cdd 	.word	0x08008cdd
 8008c18:	08008cdd 	.word	0x08008cdd
 8008c1c:	08008c8f 	.word	0x08008c8f
 8008c20:	08008cdd 	.word	0x08008cdd
 8008c24:	08008cdd 	.word	0x08008cdd
 8008c28:	08008cdd 	.word	0x08008cdd
 8008c2c:	08008cdd 	.word	0x08008cdd
 8008c30:	08008cdd 	.word	0x08008cdd
 8008c34:	08008cdd 	.word	0x08008cdd
 8008c38:	08008cdd 	.word	0x08008cdd
 8008c3c:	08008cdd 	.word	0x08008cdd
 8008c40:	08008cdd 	.word	0x08008cdd
 8008c44:	08008cdd 	.word	0x08008cdd
 8008c48:	08008cdd 	.word	0x08008cdd
 8008c4c:	08008cdd 	.word	0x08008cdd
 8008c50:	08008cdd 	.word	0x08008cdd
 8008c54:	08008cdd 	.word	0x08008cdd
 8008c58:	08008cdd 	.word	0x08008cdd
 8008c5c:	08008ccf 	.word	0x08008ccf
 8008c60:	2b40      	cmp	r3, #64	; 0x40
 8008c62:	d037      	beq.n	8008cd4 <UART_SetConfig+0x6bc>
 8008c64:	e03a      	b.n	8008cdc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008c66:	f7fe f80d 	bl	8006c84 <HAL_RCCEx_GetD3PCLK1Freq>
 8008c6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c6c:	e03c      	b.n	8008ce8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fe f81c 	bl	8006cb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c7c:	e034      	b.n	8008ce8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c7e:	f107 0318 	add.w	r3, r7, #24
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe f968 	bl	8006f58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c8c:	e02c      	b.n	8008ce8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c8e:	4b09      	ldr	r3, [pc, #36]	; (8008cb4 <UART_SetConfig+0x69c>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 0320 	and.w	r3, r3, #32
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d016      	beq.n	8008cc8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c9a:	4b06      	ldr	r3, [pc, #24]	; (8008cb4 <UART_SetConfig+0x69c>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	08db      	lsrs	r3, r3, #3
 8008ca0:	f003 0303 	and.w	r3, r3, #3
 8008ca4:	4a07      	ldr	r2, [pc, #28]	; (8008cc4 <UART_SetConfig+0x6ac>)
 8008ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8008caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008cac:	e01c      	b.n	8008ce8 <UART_SetConfig+0x6d0>
 8008cae:	bf00      	nop
 8008cb0:	40011400 	.word	0x40011400
 8008cb4:	58024400 	.word	0x58024400
 8008cb8:	40007800 	.word	0x40007800
 8008cbc:	40007c00 	.word	0x40007c00
 8008cc0:	58000c00 	.word	0x58000c00
 8008cc4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008cc8:	4b9d      	ldr	r3, [pc, #628]	; (8008f40 <UART_SetConfig+0x928>)
 8008cca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ccc:	e00c      	b.n	8008ce8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008cce:	4b9d      	ldr	r3, [pc, #628]	; (8008f44 <UART_SetConfig+0x92c>)
 8008cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cd2:	e009      	b.n	8008ce8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cda:	e005      	b.n	8008ce8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008ce6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 81de 	beq.w	80090ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf4:	4a94      	ldr	r2, [pc, #592]	; (8008f48 <UART_SetConfig+0x930>)
 8008cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d02:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	005b      	lsls	r3, r3, #1
 8008d0c:	4413      	add	r3, r2
 8008d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d305      	bcc.n	8008d20 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d903      	bls.n	8008d28 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d26:	e1c1      	b.n	80090ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	60bb      	str	r3, [r7, #8]
 8008d2e:	60fa      	str	r2, [r7, #12]
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d34:	4a84      	ldr	r2, [pc, #528]	; (8008f48 <UART_SetConfig+0x930>)
 8008d36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	603b      	str	r3, [r7, #0]
 8008d40:	607a      	str	r2, [r7, #4]
 8008d42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d4a:	f7f7 fb19 	bl	8000380 <__aeabi_uldivmod>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	460b      	mov	r3, r1
 8008d52:	4610      	mov	r0, r2
 8008d54:	4619      	mov	r1, r3
 8008d56:	f04f 0200 	mov.w	r2, #0
 8008d5a:	f04f 0300 	mov.w	r3, #0
 8008d5e:	020b      	lsls	r3, r1, #8
 8008d60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d64:	0202      	lsls	r2, r0, #8
 8008d66:	6979      	ldr	r1, [r7, #20]
 8008d68:	6849      	ldr	r1, [r1, #4]
 8008d6a:	0849      	lsrs	r1, r1, #1
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	460c      	mov	r4, r1
 8008d70:	4605      	mov	r5, r0
 8008d72:	eb12 0804 	adds.w	r8, r2, r4
 8008d76:	eb43 0905 	adc.w	r9, r3, r5
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	469a      	mov	sl, r3
 8008d82:	4693      	mov	fp, r2
 8008d84:	4652      	mov	r2, sl
 8008d86:	465b      	mov	r3, fp
 8008d88:	4640      	mov	r0, r8
 8008d8a:	4649      	mov	r1, r9
 8008d8c:	f7f7 faf8 	bl	8000380 <__aeabi_uldivmod>
 8008d90:	4602      	mov	r2, r0
 8008d92:	460b      	mov	r3, r1
 8008d94:	4613      	mov	r3, r2
 8008d96:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d9e:	d308      	bcc.n	8008db2 <UART_SetConfig+0x79a>
 8008da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008da6:	d204      	bcs.n	8008db2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dae:	60da      	str	r2, [r3, #12]
 8008db0:	e17c      	b.n	80090ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008db8:	e178      	b.n	80090ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	69db      	ldr	r3, [r3, #28]
 8008dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dc2:	f040 80c5 	bne.w	8008f50 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008dc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008dca:	2b20      	cmp	r3, #32
 8008dcc:	dc48      	bgt.n	8008e60 <UART_SetConfig+0x848>
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	db7b      	blt.n	8008eca <UART_SetConfig+0x8b2>
 8008dd2:	2b20      	cmp	r3, #32
 8008dd4:	d879      	bhi.n	8008eca <UART_SetConfig+0x8b2>
 8008dd6:	a201      	add	r2, pc, #4	; (adr r2, 8008ddc <UART_SetConfig+0x7c4>)
 8008dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ddc:	08008e67 	.word	0x08008e67
 8008de0:	08008e6f 	.word	0x08008e6f
 8008de4:	08008ecb 	.word	0x08008ecb
 8008de8:	08008ecb 	.word	0x08008ecb
 8008dec:	08008e77 	.word	0x08008e77
 8008df0:	08008ecb 	.word	0x08008ecb
 8008df4:	08008ecb 	.word	0x08008ecb
 8008df8:	08008ecb 	.word	0x08008ecb
 8008dfc:	08008e87 	.word	0x08008e87
 8008e00:	08008ecb 	.word	0x08008ecb
 8008e04:	08008ecb 	.word	0x08008ecb
 8008e08:	08008ecb 	.word	0x08008ecb
 8008e0c:	08008ecb 	.word	0x08008ecb
 8008e10:	08008ecb 	.word	0x08008ecb
 8008e14:	08008ecb 	.word	0x08008ecb
 8008e18:	08008ecb 	.word	0x08008ecb
 8008e1c:	08008e97 	.word	0x08008e97
 8008e20:	08008ecb 	.word	0x08008ecb
 8008e24:	08008ecb 	.word	0x08008ecb
 8008e28:	08008ecb 	.word	0x08008ecb
 8008e2c:	08008ecb 	.word	0x08008ecb
 8008e30:	08008ecb 	.word	0x08008ecb
 8008e34:	08008ecb 	.word	0x08008ecb
 8008e38:	08008ecb 	.word	0x08008ecb
 8008e3c:	08008ecb 	.word	0x08008ecb
 8008e40:	08008ecb 	.word	0x08008ecb
 8008e44:	08008ecb 	.word	0x08008ecb
 8008e48:	08008ecb 	.word	0x08008ecb
 8008e4c:	08008ecb 	.word	0x08008ecb
 8008e50:	08008ecb 	.word	0x08008ecb
 8008e54:	08008ecb 	.word	0x08008ecb
 8008e58:	08008ecb 	.word	0x08008ecb
 8008e5c:	08008ebd 	.word	0x08008ebd
 8008e60:	2b40      	cmp	r3, #64	; 0x40
 8008e62:	d02e      	beq.n	8008ec2 <UART_SetConfig+0x8aa>
 8008e64:	e031      	b.n	8008eca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e66:	f7fc ff59 	bl	8005d1c <HAL_RCC_GetPCLK1Freq>
 8008e6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e6c:	e033      	b.n	8008ed6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e6e:	f7fc ff6b 	bl	8005d48 <HAL_RCC_GetPCLK2Freq>
 8008e72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e74:	e02f      	b.n	8008ed6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fd ff18 	bl	8006cb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e84:	e027      	b.n	8008ed6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e86:	f107 0318 	add.w	r3, r7, #24
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fe f864 	bl	8006f58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e94:	e01f      	b.n	8008ed6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e96:	4b2d      	ldr	r3, [pc, #180]	; (8008f4c <UART_SetConfig+0x934>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0320 	and.w	r3, r3, #32
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d009      	beq.n	8008eb6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ea2:	4b2a      	ldr	r3, [pc, #168]	; (8008f4c <UART_SetConfig+0x934>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	08db      	lsrs	r3, r3, #3
 8008ea8:	f003 0303 	and.w	r3, r3, #3
 8008eac:	4a24      	ldr	r2, [pc, #144]	; (8008f40 <UART_SetConfig+0x928>)
 8008eae:	fa22 f303 	lsr.w	r3, r2, r3
 8008eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008eb4:	e00f      	b.n	8008ed6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008eb6:	4b22      	ldr	r3, [pc, #136]	; (8008f40 <UART_SetConfig+0x928>)
 8008eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eba:	e00c      	b.n	8008ed6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008ebc:	4b21      	ldr	r3, [pc, #132]	; (8008f44 <UART_SetConfig+0x92c>)
 8008ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ec0:	e009      	b.n	8008ed6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ec8:	e005      	b.n	8008ed6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008ed4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 80e7 	beq.w	80090ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee2:	4a19      	ldr	r2, [pc, #100]	; (8008f48 <UART_SetConfig+0x930>)
 8008ee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ef0:	005a      	lsls	r2, r3, #1
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	085b      	lsrs	r3, r3, #1
 8008ef8:	441a      	add	r2, r3
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f02:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f06:	2b0f      	cmp	r3, #15
 8008f08:	d916      	bls.n	8008f38 <UART_SetConfig+0x920>
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f10:	d212      	bcs.n	8008f38 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	f023 030f 	bic.w	r3, r3, #15
 8008f1a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1e:	085b      	lsrs	r3, r3, #1
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	f003 0307 	and.w	r3, r3, #7
 8008f26:	b29a      	uxth	r2, r3
 8008f28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008f34:	60da      	str	r2, [r3, #12]
 8008f36:	e0b9      	b.n	80090ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008f3e:	e0b5      	b.n	80090ac <UART_SetConfig+0xa94>
 8008f40:	03d09000 	.word	0x03d09000
 8008f44:	003d0900 	.word	0x003d0900
 8008f48:	0800fee0 	.word	0x0800fee0
 8008f4c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f54:	2b20      	cmp	r3, #32
 8008f56:	dc49      	bgt.n	8008fec <UART_SetConfig+0x9d4>
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	db7c      	blt.n	8009056 <UART_SetConfig+0xa3e>
 8008f5c:	2b20      	cmp	r3, #32
 8008f5e:	d87a      	bhi.n	8009056 <UART_SetConfig+0xa3e>
 8008f60:	a201      	add	r2, pc, #4	; (adr r2, 8008f68 <UART_SetConfig+0x950>)
 8008f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f66:	bf00      	nop
 8008f68:	08008ff3 	.word	0x08008ff3
 8008f6c:	08008ffb 	.word	0x08008ffb
 8008f70:	08009057 	.word	0x08009057
 8008f74:	08009057 	.word	0x08009057
 8008f78:	08009003 	.word	0x08009003
 8008f7c:	08009057 	.word	0x08009057
 8008f80:	08009057 	.word	0x08009057
 8008f84:	08009057 	.word	0x08009057
 8008f88:	08009013 	.word	0x08009013
 8008f8c:	08009057 	.word	0x08009057
 8008f90:	08009057 	.word	0x08009057
 8008f94:	08009057 	.word	0x08009057
 8008f98:	08009057 	.word	0x08009057
 8008f9c:	08009057 	.word	0x08009057
 8008fa0:	08009057 	.word	0x08009057
 8008fa4:	08009057 	.word	0x08009057
 8008fa8:	08009023 	.word	0x08009023
 8008fac:	08009057 	.word	0x08009057
 8008fb0:	08009057 	.word	0x08009057
 8008fb4:	08009057 	.word	0x08009057
 8008fb8:	08009057 	.word	0x08009057
 8008fbc:	08009057 	.word	0x08009057
 8008fc0:	08009057 	.word	0x08009057
 8008fc4:	08009057 	.word	0x08009057
 8008fc8:	08009057 	.word	0x08009057
 8008fcc:	08009057 	.word	0x08009057
 8008fd0:	08009057 	.word	0x08009057
 8008fd4:	08009057 	.word	0x08009057
 8008fd8:	08009057 	.word	0x08009057
 8008fdc:	08009057 	.word	0x08009057
 8008fe0:	08009057 	.word	0x08009057
 8008fe4:	08009057 	.word	0x08009057
 8008fe8:	08009049 	.word	0x08009049
 8008fec:	2b40      	cmp	r3, #64	; 0x40
 8008fee:	d02e      	beq.n	800904e <UART_SetConfig+0xa36>
 8008ff0:	e031      	b.n	8009056 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ff2:	f7fc fe93 	bl	8005d1c <HAL_RCC_GetPCLK1Freq>
 8008ff6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ff8:	e033      	b.n	8009062 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ffa:	f7fc fea5 	bl	8005d48 <HAL_RCC_GetPCLK2Freq>
 8008ffe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009000:	e02f      	b.n	8009062 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009006:	4618      	mov	r0, r3
 8009008:	f7fd fe52 	bl	8006cb0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800900c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009010:	e027      	b.n	8009062 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009012:	f107 0318 	add.w	r3, r7, #24
 8009016:	4618      	mov	r0, r3
 8009018:	f7fd ff9e 	bl	8006f58 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009020:	e01f      	b.n	8009062 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009022:	4b2d      	ldr	r3, [pc, #180]	; (80090d8 <UART_SetConfig+0xac0>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f003 0320 	and.w	r3, r3, #32
 800902a:	2b00      	cmp	r3, #0
 800902c:	d009      	beq.n	8009042 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800902e:	4b2a      	ldr	r3, [pc, #168]	; (80090d8 <UART_SetConfig+0xac0>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	08db      	lsrs	r3, r3, #3
 8009034:	f003 0303 	and.w	r3, r3, #3
 8009038:	4a28      	ldr	r2, [pc, #160]	; (80090dc <UART_SetConfig+0xac4>)
 800903a:	fa22 f303 	lsr.w	r3, r2, r3
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009040:	e00f      	b.n	8009062 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009042:	4b26      	ldr	r3, [pc, #152]	; (80090dc <UART_SetConfig+0xac4>)
 8009044:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009046:	e00c      	b.n	8009062 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009048:	4b25      	ldr	r3, [pc, #148]	; (80090e0 <UART_SetConfig+0xac8>)
 800904a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800904c:	e009      	b.n	8009062 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800904e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009052:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009054:	e005      	b.n	8009062 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009056:	2300      	movs	r3, #0
 8009058:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009060:	bf00      	nop
    }

    if (pclk != 0U)
 8009062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009064:	2b00      	cmp	r3, #0
 8009066:	d021      	beq.n	80090ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906c:	4a1d      	ldr	r2, [pc, #116]	; (80090e4 <UART_SetConfig+0xacc>)
 800906e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009072:	461a      	mov	r2, r3
 8009074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009076:	fbb3 f2f2 	udiv	r2, r3, r2
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	085b      	lsrs	r3, r3, #1
 8009080:	441a      	add	r2, r3
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	fbb2 f3f3 	udiv	r3, r2, r3
 800908a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800908c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908e:	2b0f      	cmp	r3, #15
 8009090:	d909      	bls.n	80090a6 <UART_SetConfig+0xa8e>
 8009092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009098:	d205      	bcs.n	80090a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800909a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909c:	b29a      	uxth	r2, r3
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	60da      	str	r2, [r3, #12]
 80090a4:	e002      	b.n	80090ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	2201      	movs	r2, #1
 80090b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	2200      	movs	r2, #0
 80090c0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	2200      	movs	r2, #0
 80090c6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80090c8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3748      	adds	r7, #72	; 0x48
 80090d0:	46bd      	mov	sp, r7
 80090d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090d6:	bf00      	nop
 80090d8:	58024400 	.word	0x58024400
 80090dc:	03d09000 	.word	0x03d09000
 80090e0:	003d0900 	.word	0x003d0900
 80090e4:	0800fee0 	.word	0x0800fee0

080090e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f4:	f003 0301 	and.w	r3, r3, #1
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00a      	beq.n	8009112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	430a      	orrs	r2, r1
 8009110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009116:	f003 0302 	and.w	r3, r3, #2
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00a      	beq.n	8009134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	430a      	orrs	r2, r1
 8009132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009138:	f003 0304 	and.w	r3, r3, #4
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00a      	beq.n	8009156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	430a      	orrs	r2, r1
 8009154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915a:	f003 0308 	and.w	r3, r3, #8
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00a      	beq.n	8009178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	430a      	orrs	r2, r1
 8009176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917c:	f003 0310 	and.w	r3, r3, #16
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00a      	beq.n	800919a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	430a      	orrs	r2, r1
 8009198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919e:	f003 0320 	and.w	r3, r3, #32
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00a      	beq.n	80091bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	430a      	orrs	r2, r1
 80091ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d01a      	beq.n	80091fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	430a      	orrs	r2, r1
 80091dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091e6:	d10a      	bne.n	80091fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	430a      	orrs	r2, r1
 80091fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00a      	beq.n	8009220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	430a      	orrs	r2, r1
 800921e:	605a      	str	r2, [r3, #4]
  }
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b086      	sub	sp, #24
 8009230:	af02      	add	r7, sp, #8
 8009232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800923c:	f7f8 fd6a 	bl	8001d14 <HAL_GetTick>
 8009240:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0308 	and.w	r3, r3, #8
 800924c:	2b08      	cmp	r3, #8
 800924e:	d10e      	bne.n	800926e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 f82f 	bl	80092c2 <UART_WaitOnFlagUntilTimeout>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e025      	b.n	80092ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 0304 	and.w	r3, r3, #4
 8009278:	2b04      	cmp	r3, #4
 800927a:	d10e      	bne.n	800929a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800927c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	2200      	movs	r2, #0
 8009286:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f819 	bl	80092c2 <UART_WaitOnFlagUntilTimeout>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	e00f      	b.n	80092ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2220      	movs	r2, #32
 800929e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2220      	movs	r2, #32
 80092a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b09c      	sub	sp, #112	; 0x70
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	60f8      	str	r0, [r7, #12]
 80092ca:	60b9      	str	r1, [r7, #8]
 80092cc:	603b      	str	r3, [r7, #0]
 80092ce:	4613      	mov	r3, r2
 80092d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092d2:	e0a9      	b.n	8009428 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092da:	f000 80a5 	beq.w	8009428 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092de:	f7f8 fd19 	bl	8001d14 <HAL_GetTick>
 80092e2:	4602      	mov	r2, r0
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d302      	bcc.n	80092f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80092ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d140      	bne.n	8009376 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092fc:	e853 3f00 	ldrex	r3, [r3]
 8009300:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009304:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009308:	667b      	str	r3, [r7, #100]	; 0x64
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	461a      	mov	r2, r3
 8009310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009312:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009314:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009316:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009318:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800931a:	e841 2300 	strex	r3, r2, [r1]
 800931e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1e6      	bne.n	80092f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3308      	adds	r3, #8
 800932c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009338:	f023 0301 	bic.w	r3, r3, #1
 800933c:	663b      	str	r3, [r7, #96]	; 0x60
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3308      	adds	r3, #8
 8009344:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009346:	64ba      	str	r2, [r7, #72]	; 0x48
 8009348:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800934c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800934e:	e841 2300 	strex	r3, r2, [r1]
 8009352:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009354:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1e5      	bne.n	8009326 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2220      	movs	r2, #32
 800935e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2220      	movs	r2, #32
 8009366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2200      	movs	r2, #0
 800936e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009372:	2303      	movs	r3, #3
 8009374:	e069      	b.n	800944a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0304 	and.w	r3, r3, #4
 8009380:	2b00      	cmp	r3, #0
 8009382:	d051      	beq.n	8009428 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	69db      	ldr	r3, [r3, #28]
 800938a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800938e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009392:	d149      	bne.n	8009428 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800939c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a6:	e853 3f00 	ldrex	r3, [r3]
 80093aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80093ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80093b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	461a      	mov	r2, r3
 80093ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093bc:	637b      	str	r3, [r7, #52]	; 0x34
 80093be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093c4:	e841 2300 	strex	r3, r2, [r1]
 80093c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80093ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1e6      	bne.n	800939e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	3308      	adds	r3, #8
 80093d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	e853 3f00 	ldrex	r3, [r3]
 80093de:	613b      	str	r3, [r7, #16]
   return(result);
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	f023 0301 	bic.w	r3, r3, #1
 80093e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3308      	adds	r3, #8
 80093ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80093f0:	623a      	str	r2, [r7, #32]
 80093f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f4:	69f9      	ldr	r1, [r7, #28]
 80093f6:	6a3a      	ldr	r2, [r7, #32]
 80093f8:	e841 2300 	strex	r3, r2, [r1]
 80093fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1e5      	bne.n	80093d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2220      	movs	r2, #32
 8009408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2220      	movs	r2, #32
 8009410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2220      	movs	r2, #32
 8009418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e010      	b.n	800944a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	69da      	ldr	r2, [r3, #28]
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	4013      	ands	r3, r2
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	429a      	cmp	r2, r3
 8009436:	bf0c      	ite	eq
 8009438:	2301      	moveq	r3, #1
 800943a:	2300      	movne	r3, #0
 800943c:	b2db      	uxtb	r3, r3
 800943e:	461a      	mov	r2, r3
 8009440:	79fb      	ldrb	r3, [r7, #7]
 8009442:	429a      	cmp	r2, r3
 8009444:	f43f af46 	beq.w	80092d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009448:	2300      	movs	r3, #0
}
 800944a:	4618      	mov	r0, r3
 800944c:	3770      	adds	r7, #112	; 0x70
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
	...

08009454 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009454:	b480      	push	{r7}
 8009456:	b0a3      	sub	sp, #140	; 0x8c
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	4613      	mov	r3, r2
 8009460:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	88fa      	ldrh	r2, [r7, #6]
 800946c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	88fa      	ldrh	r2, [r7, #6]
 8009474:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009486:	d10e      	bne.n	80094a6 <UART_Start_Receive_IT+0x52>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d105      	bne.n	800949c <UART_Start_Receive_IT+0x48>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009496:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800949a:	e02d      	b.n	80094f8 <UART_Start_Receive_IT+0xa4>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	22ff      	movs	r2, #255	; 0xff
 80094a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094a4:	e028      	b.n	80094f8 <UART_Start_Receive_IT+0xa4>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d10d      	bne.n	80094ca <UART_Start_Receive_IT+0x76>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d104      	bne.n	80094c0 <UART_Start_Receive_IT+0x6c>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	22ff      	movs	r2, #255	; 0xff
 80094ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094be:	e01b      	b.n	80094f8 <UART_Start_Receive_IT+0xa4>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	227f      	movs	r2, #127	; 0x7f
 80094c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094c8:	e016      	b.n	80094f8 <UART_Start_Receive_IT+0xa4>
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094d2:	d10d      	bne.n	80094f0 <UART_Start_Receive_IT+0x9c>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	691b      	ldr	r3, [r3, #16]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d104      	bne.n	80094e6 <UART_Start_Receive_IT+0x92>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	227f      	movs	r2, #127	; 0x7f
 80094e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094e4:	e008      	b.n	80094f8 <UART_Start_Receive_IT+0xa4>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	223f      	movs	r2, #63	; 0x3f
 80094ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80094ee:	e003      	b.n	80094f8 <UART_Start_Receive_IT+0xa4>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2222      	movs	r2, #34	; 0x22
 8009504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3308      	adds	r3, #8
 800950e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009512:	e853 3f00 	ldrex	r3, [r3]
 8009516:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009518:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800951a:	f043 0301 	orr.w	r3, r3, #1
 800951e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	3308      	adds	r3, #8
 8009528:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800952c:	673a      	str	r2, [r7, #112]	; 0x70
 800952e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009530:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009532:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009534:	e841 2300 	strex	r3, r2, [r1]
 8009538:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800953a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1e3      	bne.n	8009508 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009548:	d153      	bne.n	80095f2 <UART_Start_Receive_IT+0x19e>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009550:	88fa      	ldrh	r2, [r7, #6]
 8009552:	429a      	cmp	r2, r3
 8009554:	d34d      	bcc.n	80095f2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800955e:	d107      	bne.n	8009570 <UART_Start_Receive_IT+0x11c>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d103      	bne.n	8009570 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	4a4b      	ldr	r2, [pc, #300]	; (8009698 <UART_Start_Receive_IT+0x244>)
 800956c:	671a      	str	r2, [r3, #112]	; 0x70
 800956e:	e002      	b.n	8009576 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	4a4a      	ldr	r2, [pc, #296]	; (800969c <UART_Start_Receive_IT+0x248>)
 8009574:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2200      	movs	r2, #0
 800957a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d01a      	beq.n	80095bc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800958c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800958e:	e853 3f00 	ldrex	r3, [r3]
 8009592:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800959a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	461a      	mov	r2, r3
 80095a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80095a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095aa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80095b0:	e841 2300 	strex	r3, r2, [r1]
 80095b4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80095b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1e4      	bne.n	8009586 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3308      	adds	r3, #8
 80095c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095c6:	e853 3f00 	ldrex	r3, [r3]
 80095ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	3308      	adds	r3, #8
 80095da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80095dc:	64ba      	str	r2, [r7, #72]	; 0x48
 80095de:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095e4:	e841 2300 	strex	r3, r2, [r1]
 80095e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80095ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d1e5      	bne.n	80095bc <UART_Start_Receive_IT+0x168>
 80095f0:	e04a      	b.n	8009688 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095fa:	d107      	bne.n	800960c <UART_Start_Receive_IT+0x1b8>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d103      	bne.n	800960c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	4a26      	ldr	r2, [pc, #152]	; (80096a0 <UART_Start_Receive_IT+0x24c>)
 8009608:	671a      	str	r2, [r3, #112]	; 0x70
 800960a:	e002      	b.n	8009612 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	4a25      	ldr	r2, [pc, #148]	; (80096a4 <UART_Start_Receive_IT+0x250>)
 8009610:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d019      	beq.n	8009656 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	e853 3f00 	ldrex	r3, [r3]
 800962e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009632:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009636:	677b      	str	r3, [r7, #116]	; 0x74
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	461a      	mov	r2, r3
 800963e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009640:	637b      	str	r3, [r7, #52]	; 0x34
 8009642:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009644:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009646:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009648:	e841 2300 	strex	r3, r2, [r1]
 800964c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800964e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1e6      	bne.n	8009622 <UART_Start_Receive_IT+0x1ce>
 8009654:	e018      	b.n	8009688 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	e853 3f00 	ldrex	r3, [r3]
 8009662:	613b      	str	r3, [r7, #16]
   return(result);
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	f043 0320 	orr.w	r3, r3, #32
 800966a:	67bb      	str	r3, [r7, #120]	; 0x78
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	461a      	mov	r2, r3
 8009672:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009674:	623b      	str	r3, [r7, #32]
 8009676:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009678:	69f9      	ldr	r1, [r7, #28]
 800967a:	6a3a      	ldr	r2, [r7, #32]
 800967c:	e841 2300 	strex	r3, r2, [r1]
 8009680:	61bb      	str	r3, [r7, #24]
   return(result);
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1e6      	bne.n	8009656 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	378c      	adds	r7, #140	; 0x8c
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
 8009696:	bf00      	nop
 8009698:	08009db1 	.word	0x08009db1
 800969c:	08009ab9 	.word	0x08009ab9
 80096a0:	08009957 	.word	0x08009957
 80096a4:	080097f7 	.word	0x080097f7

080096a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b095      	sub	sp, #84	; 0x54
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096b8:	e853 3f00 	ldrex	r3, [r3]
 80096bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80096be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096ce:	643b      	str	r3, [r7, #64]	; 0x40
 80096d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096d6:	e841 2300 	strex	r3, r2, [r1]
 80096da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1e6      	bne.n	80096b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	3308      	adds	r3, #8
 80096e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ea:	6a3b      	ldr	r3, [r7, #32]
 80096ec:	e853 3f00 	ldrex	r3, [r3]
 80096f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80096f2:	69fa      	ldr	r2, [r7, #28]
 80096f4:	4b1e      	ldr	r3, [pc, #120]	; (8009770 <UART_EndRxTransfer+0xc8>)
 80096f6:	4013      	ands	r3, r2
 80096f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	3308      	adds	r3, #8
 8009700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009702:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009704:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009706:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009708:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800970a:	e841 2300 	strex	r3, r2, [r1]
 800970e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1e5      	bne.n	80096e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800971a:	2b01      	cmp	r3, #1
 800971c:	d118      	bne.n	8009750 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	e853 3f00 	ldrex	r3, [r3]
 800972a:	60bb      	str	r3, [r7, #8]
   return(result);
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	f023 0310 	bic.w	r3, r3, #16
 8009732:	647b      	str	r3, [r7, #68]	; 0x44
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	461a      	mov	r2, r3
 800973a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800973c:	61bb      	str	r3, [r7, #24]
 800973e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009740:	6979      	ldr	r1, [r7, #20]
 8009742:	69ba      	ldr	r2, [r7, #24]
 8009744:	e841 2300 	strex	r3, r2, [r1]
 8009748:	613b      	str	r3, [r7, #16]
   return(result);
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1e6      	bne.n	800971e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2220      	movs	r2, #32
 8009754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009764:	bf00      	nop
 8009766:	3754      	adds	r7, #84	; 0x54
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr
 8009770:	effffffe 	.word	0xeffffffe

08009774 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009780:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f7fe ff2a 	bl	80085ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009798:	bf00      	nop
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b088      	sub	sp, #32
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	e853 3f00 	ldrex	r3, [r3]
 80097b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097bc:	61fb      	str	r3, [r7, #28]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	461a      	mov	r2, r3
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	61bb      	str	r3, [r7, #24]
 80097c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ca:	6979      	ldr	r1, [r7, #20]
 80097cc:	69ba      	ldr	r2, [r7, #24]
 80097ce:	e841 2300 	strex	r3, r2, [r1]
 80097d2:	613b      	str	r3, [r7, #16]
   return(result);
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1e6      	bne.n	80097a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2220      	movs	r2, #32
 80097de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7fe fef5 	bl	80085d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097ee:	bf00      	nop
 80097f0:	3720      	adds	r7, #32
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b096      	sub	sp, #88	; 0x58
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009804:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800980e:	2b22      	cmp	r3, #34	; 0x22
 8009810:	f040 8095 	bne.w	800993e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800981e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8009822:	b2d9      	uxtb	r1, r3
 8009824:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009828:	b2da      	uxtb	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800982e:	400a      	ands	r2, r1
 8009830:	b2d2      	uxtb	r2, r2
 8009832:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009838:	1c5a      	adds	r2, r3, #1
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009844:	b29b      	uxth	r3, r3
 8009846:	3b01      	subs	r3, #1
 8009848:	b29a      	uxth	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009856:	b29b      	uxth	r3, r3
 8009858:	2b00      	cmp	r3, #0
 800985a:	d178      	bne.n	800994e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009864:	e853 3f00 	ldrex	r3, [r3]
 8009868:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800986a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800986c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009870:	653b      	str	r3, [r7, #80]	; 0x50
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	461a      	mov	r2, r3
 8009878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800987a:	647b      	str	r3, [r7, #68]	; 0x44
 800987c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009880:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009882:	e841 2300 	strex	r3, r2, [r1]
 8009886:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1e6      	bne.n	800985c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	3308      	adds	r3, #8
 8009894:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009898:	e853 3f00 	ldrex	r3, [r3]
 800989c:	623b      	str	r3, [r7, #32]
   return(result);
 800989e:	6a3b      	ldr	r3, [r7, #32]
 80098a0:	f023 0301 	bic.w	r3, r3, #1
 80098a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3308      	adds	r3, #8
 80098ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80098ae:	633a      	str	r2, [r7, #48]	; 0x30
 80098b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098b6:	e841 2300 	strex	r3, r2, [r1]
 80098ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1e5      	bne.n	800988e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2220      	movs	r2, #32
 80098c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d12e      	bne.n	8009936 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	e853 3f00 	ldrex	r3, [r3]
 80098ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f023 0310 	bic.w	r3, r3, #16
 80098f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	461a      	mov	r2, r3
 80098fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098fc:	61fb      	str	r3, [r7, #28]
 80098fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009900:	69b9      	ldr	r1, [r7, #24]
 8009902:	69fa      	ldr	r2, [r7, #28]
 8009904:	e841 2300 	strex	r3, r2, [r1]
 8009908:	617b      	str	r3, [r7, #20]
   return(result);
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1e6      	bne.n	80098de <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	69db      	ldr	r3, [r3, #28]
 8009916:	f003 0310 	and.w	r3, r3, #16
 800991a:	2b10      	cmp	r3, #16
 800991c:	d103      	bne.n	8009926 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2210      	movs	r2, #16
 8009924:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800992c:	4619      	mov	r1, r3
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f7fe fe66 	bl	8008600 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009934:	e00b      	b.n	800994e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7f7 fb6c 	bl	8001014 <HAL_UART_RxCpltCallback>
}
 800993c:	e007      	b.n	800994e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	699a      	ldr	r2, [r3, #24]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f042 0208 	orr.w	r2, r2, #8
 800994c:	619a      	str	r2, [r3, #24]
}
 800994e:	bf00      	nop
 8009950:	3758      	adds	r7, #88	; 0x58
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009956:	b580      	push	{r7, lr}
 8009958:	b096      	sub	sp, #88	; 0x58
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009964:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800996e:	2b22      	cmp	r3, #34	; 0x22
 8009970:	f040 8095 	bne.w	8009a9e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009982:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009984:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009988:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800998c:	4013      	ands	r3, r2
 800998e:	b29a      	uxth	r2, r3
 8009990:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009992:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009998:	1c9a      	adds	r2, r3, #2
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	3b01      	subs	r3, #1
 80099a8:	b29a      	uxth	r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d178      	bne.n	8009aae <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c4:	e853 3f00 	ldrex	r3, [r3]
 80099c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099da:	643b      	str	r3, [r7, #64]	; 0x40
 80099dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099e2:	e841 2300 	strex	r3, r2, [r1]
 80099e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1e6      	bne.n	80099bc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	3308      	adds	r3, #8
 80099f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f6:	6a3b      	ldr	r3, [r7, #32]
 80099f8:	e853 3f00 	ldrex	r3, [r3]
 80099fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	f023 0301 	bic.w	r3, r3, #1
 8009a04:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	3308      	adds	r3, #8
 8009a0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a16:	e841 2300 	strex	r3, r2, [r1]
 8009a1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d1e5      	bne.n	80099ee <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2220      	movs	r2, #32
 8009a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d12e      	bne.n	8009a96 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	e853 3f00 	ldrex	r3, [r3]
 8009a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	f023 0310 	bic.w	r3, r3, #16
 8009a52:	647b      	str	r3, [r7, #68]	; 0x44
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	461a      	mov	r2, r3
 8009a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a5c:	61bb      	str	r3, [r7, #24]
 8009a5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a60:	6979      	ldr	r1, [r7, #20]
 8009a62:	69ba      	ldr	r2, [r7, #24]
 8009a64:	e841 2300 	strex	r3, r2, [r1]
 8009a68:	613b      	str	r3, [r7, #16]
   return(result);
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1e6      	bne.n	8009a3e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	69db      	ldr	r3, [r3, #28]
 8009a76:	f003 0310 	and.w	r3, r3, #16
 8009a7a:	2b10      	cmp	r3, #16
 8009a7c:	d103      	bne.n	8009a86 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2210      	movs	r2, #16
 8009a84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7fe fdb6 	bl	8008600 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a94:	e00b      	b.n	8009aae <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f7f7 fabc 	bl	8001014 <HAL_UART_RxCpltCallback>
}
 8009a9c:	e007      	b.n	8009aae <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	699a      	ldr	r2, [r3, #24]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f042 0208 	orr.w	r2, r2, #8
 8009aac:	619a      	str	r2, [r3, #24]
}
 8009aae:	bf00      	nop
 8009ab0:	3758      	adds	r7, #88	; 0x58
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
	...

08009ab8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b0a6      	sub	sp, #152	; 0x98
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009ac6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	69db      	ldr	r3, [r3, #28]
 8009ad0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aee:	2b22      	cmp	r3, #34	; 0x22
 8009af0:	f040 814d 	bne.w	8009d8e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009afa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009afe:	e0f4      	b.n	8009cea <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b06:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009b0a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8009b0e:	b2d9      	uxtb	r1, r3
 8009b10:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b1a:	400a      	ands	r2, r1
 8009b1c:	b2d2      	uxtb	r2, r2
 8009b1e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b24:	1c5a      	adds	r2, r3, #1
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	3b01      	subs	r3, #1
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009b46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b4a:	f003 0307 	and.w	r3, r3, #7
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d053      	beq.n	8009bfa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b56:	f003 0301 	and.w	r3, r3, #1
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d011      	beq.n	8009b82 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00b      	beq.n	8009b82 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b78:	f043 0201 	orr.w	r2, r3, #1
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b86:	f003 0302 	and.w	r3, r3, #2
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d011      	beq.n	8009bb2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009b8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b92:	f003 0301 	and.w	r3, r3, #1
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00b      	beq.n	8009bb2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2202      	movs	r2, #2
 8009ba0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ba8:	f043 0204 	orr.w	r2, r3, #4
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009bb6:	f003 0304 	and.w	r3, r3, #4
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d011      	beq.n	8009be2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009bbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00b      	beq.n	8009be2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2204      	movs	r2, #4
 8009bd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bd8:	f043 0202 	orr.w	r2, r3, #2
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d006      	beq.n	8009bfa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7fe fcfd 	bl	80085ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c00:	b29b      	uxth	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d171      	bne.n	8009cea <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c0e:	e853 3f00 	ldrex	r3, [r3]
 8009c12:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	461a      	mov	r2, r3
 8009c24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009c28:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c2a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009c2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c30:	e841 2300 	strex	r3, r2, [r1]
 8009c34:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009c36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1e4      	bne.n	8009c06 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3308      	adds	r3, #8
 8009c42:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c46:	e853 3f00 	ldrex	r3, [r3]
 8009c4a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009c4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c4e:	4b56      	ldr	r3, [pc, #344]	; (8009da8 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8009c50:	4013      	ands	r3, r2
 8009c52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	3308      	adds	r3, #8
 8009c5a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009c5c:	657a      	str	r2, [r7, #84]	; 0x54
 8009c5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c60:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c64:	e841 2300 	strex	r3, r2, [r1]
 8009c68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1e5      	bne.n	8009c3c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2220      	movs	r2, #32
 8009c74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d12e      	bne.n	8009ce4 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c94:	e853 3f00 	ldrex	r3, [r3]
 8009c98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9c:	f023 0310 	bic.w	r3, r3, #16
 8009ca0:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009caa:	643b      	str	r3, [r7, #64]	; 0x40
 8009cac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009cb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009cb2:	e841 2300 	strex	r3, r2, [r1]
 8009cb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1e6      	bne.n	8009c8c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	69db      	ldr	r3, [r3, #28]
 8009cc4:	f003 0310 	and.w	r3, r3, #16
 8009cc8:	2b10      	cmp	r3, #16
 8009cca:	d103      	bne.n	8009cd4 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2210      	movs	r2, #16
 8009cd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009cda:	4619      	mov	r1, r3
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7fe fc8f 	bl	8008600 <HAL_UARTEx_RxEventCallback>
 8009ce2:	e002      	b.n	8009cea <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f7f7 f995 	bl	8001014 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009cea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d006      	beq.n	8009d00 <UART_RxISR_8BIT_FIFOEN+0x248>
 8009cf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009cf6:	f003 0320 	and.w	r3, r3, #32
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f47f af00 	bne.w	8009b00 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009d0a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d045      	beq.n	8009d9e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009d18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d23e      	bcs.n	8009d9e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	3308      	adds	r3, #8
 8009d26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d28:	6a3b      	ldr	r3, [r7, #32]
 8009d2a:	e853 3f00 	ldrex	r3, [r3]
 8009d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d36:	673b      	str	r3, [r7, #112]	; 0x70
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	3308      	adds	r3, #8
 8009d3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009d40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d48:	e841 2300 	strex	r3, r2, [r1]
 8009d4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1e5      	bne.n	8009d20 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a15      	ldr	r2, [pc, #84]	; (8009dac <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009d58:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	e853 3f00 	ldrex	r3, [r3]
 8009d66:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	f043 0320 	orr.w	r3, r3, #32
 8009d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	461a      	mov	r2, r3
 8009d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d78:	61bb      	str	r3, [r7, #24]
 8009d7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7c:	6979      	ldr	r1, [r7, #20]
 8009d7e:	69ba      	ldr	r2, [r7, #24]
 8009d80:	e841 2300 	strex	r3, r2, [r1]
 8009d84:	613b      	str	r3, [r7, #16]
   return(result);
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d1e6      	bne.n	8009d5a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d8c:	e007      	b.n	8009d9e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	699a      	ldr	r2, [r3, #24]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f042 0208 	orr.w	r2, r2, #8
 8009d9c:	619a      	str	r2, [r3, #24]
}
 8009d9e:	bf00      	nop
 8009da0:	3798      	adds	r7, #152	; 0x98
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	effffffe 	.word	0xeffffffe
 8009dac:	080097f7 	.word	0x080097f7

08009db0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b0a8      	sub	sp, #160	; 0xa0
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009dbe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	69db      	ldr	r3, [r3, #28]
 8009dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009de6:	2b22      	cmp	r3, #34	; 0x22
 8009de8:	f040 8151 	bne.w	800a08e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009df2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009df6:	e0f8      	b.n	8009fea <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009e0a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009e0e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8009e12:	4013      	ands	r3, r2
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e20:	1c9a      	adds	r2, r3, #2
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	3b01      	subs	r3, #1
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	69db      	ldr	r3, [r3, #28]
 8009e3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009e42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e46:	f003 0307 	and.w	r3, r3, #7
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d053      	beq.n	8009ef6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e52:	f003 0301 	and.w	r3, r3, #1
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d011      	beq.n	8009e7e <UART_RxISR_16BIT_FIFOEN+0xce>
 8009e5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00b      	beq.n	8009e7e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e74:	f043 0201 	orr.w	r2, r3, #1
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009e7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009e82:	f003 0302 	and.w	r3, r3, #2
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d011      	beq.n	8009eae <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009e8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00b      	beq.n	8009eae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	2202      	movs	r2, #2
 8009e9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ea4:	f043 0204 	orr.w	r2, r3, #4
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009eae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009eb2:	f003 0304 	and.w	r3, r3, #4
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d011      	beq.n	8009ede <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009eba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00b      	beq.n	8009ede <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2204      	movs	r2, #4
 8009ecc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ed4:	f043 0202 	orr.w	r2, r3, #2
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d006      	beq.n	8009ef6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7fe fb7f 	bl	80085ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d173      	bne.n	8009fea <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f0a:	e853 3f00 	ldrex	r3, [r3]
 8009f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f26:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f28:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009f2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009f2c:	e841 2300 	strex	r3, r2, [r1]
 8009f30:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009f32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1e4      	bne.n	8009f02 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3308      	adds	r3, #8
 8009f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f42:	e853 3f00 	ldrex	r3, [r3]
 8009f46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f4a:	4b57      	ldr	r3, [pc, #348]	; (800a0a8 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3308      	adds	r3, #8
 8009f58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009f5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8009f5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f64:	e841 2300 	strex	r3, r2, [r1]
 8009f68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1e3      	bne.n	8009f38 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2220      	movs	r2, #32
 8009f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d12e      	bne.n	8009fe4 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f94:	e853 3f00 	ldrex	r3, [r3]
 8009f98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f9c:	f023 0310 	bic.w	r3, r3, #16
 8009fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009faa:	647b      	str	r3, [r7, #68]	; 0x44
 8009fac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fb2:	e841 2300 	strex	r3, r2, [r1]
 8009fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1e6      	bne.n	8009f8c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	69db      	ldr	r3, [r3, #28]
 8009fc4:	f003 0310 	and.w	r3, r3, #16
 8009fc8:	2b10      	cmp	r3, #16
 8009fca:	d103      	bne.n	8009fd4 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2210      	movs	r2, #16
 8009fd2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009fda:	4619      	mov	r1, r3
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f7fe fb0f 	bl	8008600 <HAL_UARTEx_RxEventCallback>
 8009fe2:	e002      	b.n	8009fea <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f7f7 f815 	bl	8001014 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009fea:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d006      	beq.n	800a000 <UART_RxISR_16BIT_FIFOEN+0x250>
 8009ff2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009ff6:	f003 0320 	and.w	r3, r3, #32
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f47f aefc 	bne.w	8009df8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a006:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a00a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d045      	beq.n	800a09e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a018:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d23e      	bcs.n	800a09e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	3308      	adds	r3, #8
 800a026:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02a:	e853 3f00 	ldrex	r3, [r3]
 800a02e:	623b      	str	r3, [r7, #32]
   return(result);
 800a030:	6a3b      	ldr	r3, [r7, #32]
 800a032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a036:	677b      	str	r3, [r7, #116]	; 0x74
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	3308      	adds	r3, #8
 800a03e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a040:	633a      	str	r2, [r7, #48]	; 0x30
 800a042:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a044:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a048:	e841 2300 	strex	r3, r2, [r1]
 800a04c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a050:	2b00      	cmp	r3, #0
 800a052:	d1e5      	bne.n	800a020 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a15      	ldr	r2, [pc, #84]	; (800a0ac <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800a058:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	e853 3f00 	ldrex	r3, [r3]
 800a066:	60fb      	str	r3, [r7, #12]
   return(result);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f043 0320 	orr.w	r3, r3, #32
 800a06e:	673b      	str	r3, [r7, #112]	; 0x70
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	461a      	mov	r2, r3
 800a076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a078:	61fb      	str	r3, [r7, #28]
 800a07a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07c:	69b9      	ldr	r1, [r7, #24]
 800a07e:	69fa      	ldr	r2, [r7, #28]
 800a080:	e841 2300 	strex	r3, r2, [r1]
 800a084:	617b      	str	r3, [r7, #20]
   return(result);
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1e6      	bne.n	800a05a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a08c:	e007      	b.n	800a09e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	699a      	ldr	r2, [r3, #24]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f042 0208 	orr.w	r2, r2, #8
 800a09c:	619a      	str	r2, [r3, #24]
}
 800a09e:	bf00      	nop
 800a0a0:	37a0      	adds	r7, #160	; 0xa0
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	bf00      	nop
 800a0a8:	effffffe 	.word	0xeffffffe
 800a0ac:	08009957 	.word	0x08009957

0800a0b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0b8:	bf00      	nop
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a0cc:	bf00      	nop
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d101      	bne.n	800a102 <HAL_UARTEx_DisableFifoMode+0x16>
 800a0fe:	2302      	movs	r3, #2
 800a100:	e027      	b.n	800a152 <HAL_UARTEx_DisableFifoMode+0x66>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2224      	movs	r2, #36	; 0x24
 800a10e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f022 0201 	bic.w	r2, r2, #1
 800a128:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a130:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2220      	movs	r2, #32
 800a144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a150:	2300      	movs	r3, #0
}
 800a152:	4618      	mov	r0, r3
 800a154:	3714      	adds	r7, #20
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr

0800a15e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b084      	sub	sp, #16
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d101      	bne.n	800a176 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a172:	2302      	movs	r3, #2
 800a174:	e02d      	b.n	800a1d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2201      	movs	r2, #1
 800a17a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2224      	movs	r2, #36	; 0x24
 800a182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f022 0201 	bic.w	r2, r2, #1
 800a19c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	683a      	ldr	r2, [r7, #0]
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 f850 	bl	800a258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2220      	movs	r2, #32
 800a1c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}

0800a1da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1da:	b580      	push	{r7, lr}
 800a1dc:	b084      	sub	sp, #16
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d101      	bne.n	800a1f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a1ee:	2302      	movs	r3, #2
 800a1f0:	e02d      	b.n	800a24e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2224      	movs	r2, #36	; 0x24
 800a1fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f022 0201 	bic.w	r2, r2, #1
 800a218:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	683a      	ldr	r2, [r7, #0]
 800a22a:	430a      	orrs	r2, r1
 800a22c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f812 	bl	800a258 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2220      	movs	r2, #32
 800a240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a24c:	2300      	movs	r3, #0
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
	...

0800a258 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a264:	2b00      	cmp	r3, #0
 800a266:	d108      	bne.n	800a27a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a278:	e031      	b.n	800a2de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a27a:	2310      	movs	r3, #16
 800a27c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a27e:	2310      	movs	r3, #16
 800a280:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	0e5b      	lsrs	r3, r3, #25
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	f003 0307 	and.w	r3, r3, #7
 800a290:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	0f5b      	lsrs	r3, r3, #29
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	f003 0307 	and.w	r3, r3, #7
 800a2a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2a2:	7bbb      	ldrb	r3, [r7, #14]
 800a2a4:	7b3a      	ldrb	r2, [r7, #12]
 800a2a6:	4911      	ldr	r1, [pc, #68]	; (800a2ec <UARTEx_SetNbDataToProcess+0x94>)
 800a2a8:	5c8a      	ldrb	r2, [r1, r2]
 800a2aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a2ae:	7b3a      	ldrb	r2, [r7, #12]
 800a2b0:	490f      	ldr	r1, [pc, #60]	; (800a2f0 <UARTEx_SetNbDataToProcess+0x98>)
 800a2b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2c0:	7bfb      	ldrb	r3, [r7, #15]
 800a2c2:	7b7a      	ldrb	r2, [r7, #13]
 800a2c4:	4909      	ldr	r1, [pc, #36]	; (800a2ec <UARTEx_SetNbDataToProcess+0x94>)
 800a2c6:	5c8a      	ldrb	r2, [r1, r2]
 800a2c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a2cc:	7b7a      	ldrb	r2, [r7, #13]
 800a2ce:	4908      	ldr	r1, [pc, #32]	; (800a2f0 <UARTEx_SetNbDataToProcess+0x98>)
 800a2d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a2de:	bf00      	nop
 800a2e0:	3714      	adds	r7, #20
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	0800fef8 	.word	0x0800fef8
 800a2f0:	0800ff00 	.word	0x0800ff00

0800a2f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2f4:	b084      	sub	sp, #16
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b084      	sub	sp, #16
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	f107 001c 	add.w	r0, r7, #28
 800a302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d120      	bne.n	800a34e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a310:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	68da      	ldr	r2, [r3, #12]
 800a31c:	4b2a      	ldr	r3, [pc, #168]	; (800a3c8 <USB_CoreInit+0xd4>)
 800a31e:	4013      	ands	r3, r2
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a332:	2b01      	cmp	r3, #1
 800a334:	d105      	bne.n	800a342 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 faac 	bl	800a8a0 <USB_CoreReset>
 800a348:	4603      	mov	r3, r0
 800a34a:	73fb      	strb	r3, [r7, #15]
 800a34c:	e01a      	b.n	800a384 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68db      	ldr	r3, [r3, #12]
 800a352:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 faa0 	bl	800a8a0 <USB_CoreReset>
 800a360:	4603      	mov	r3, r0
 800a362:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a366:	2b00      	cmp	r3, #0
 800a368:	d106      	bne.n	800a378 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a36e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	639a      	str	r2, [r3, #56]	; 0x38
 800a376:	e005      	b.n	800a384 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a386:	2b01      	cmp	r3, #1
 800a388:	d116      	bne.n	800a3b8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a38e:	b29a      	uxth	r2, r3
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a398:	4b0c      	ldr	r3, [pc, #48]	; (800a3cc <USB_CoreInit+0xd8>)
 800a39a:	4313      	orrs	r3, r2
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	f043 0206 	orr.w	r2, r3, #6
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	f043 0220 	orr.w	r2, r3, #32
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3c4:	b004      	add	sp, #16
 800a3c6:	4770      	bx	lr
 800a3c8:	ffbdffbf 	.word	0xffbdffbf
 800a3cc:	03ee0000 	.word	0x03ee0000

0800a3d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	f023 0201 	bic.w	r2, r3, #1
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a3f2:	b580      	push	{r7, lr}
 800a3f4:	b084      	sub	sp, #16
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	460b      	mov	r3, r1
 800a3fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a3fe:	2300      	movs	r3, #0
 800a400:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a40e:	78fb      	ldrb	r3, [r7, #3]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d115      	bne.n	800a440 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a420:	2001      	movs	r0, #1
 800a422:	f7f7 fc83 	bl	8001d2c <HAL_Delay>
      ms++;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	3301      	adds	r3, #1
 800a42a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 fa29 	bl	800a884 <USB_GetMode>
 800a432:	4603      	mov	r3, r0
 800a434:	2b01      	cmp	r3, #1
 800a436:	d01e      	beq.n	800a476 <USB_SetCurrentMode+0x84>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2b31      	cmp	r3, #49	; 0x31
 800a43c:	d9f0      	bls.n	800a420 <USB_SetCurrentMode+0x2e>
 800a43e:	e01a      	b.n	800a476 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a440:	78fb      	ldrb	r3, [r7, #3]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d115      	bne.n	800a472 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a452:	2001      	movs	r0, #1
 800a454:	f7f7 fc6a 	bl	8001d2c <HAL_Delay>
      ms++;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	3301      	adds	r3, #1
 800a45c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fa10 	bl	800a884 <USB_GetMode>
 800a464:	4603      	mov	r3, r0
 800a466:	2b00      	cmp	r3, #0
 800a468:	d005      	beq.n	800a476 <USB_SetCurrentMode+0x84>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2b31      	cmp	r3, #49	; 0x31
 800a46e:	d9f0      	bls.n	800a452 <USB_SetCurrentMode+0x60>
 800a470:	e001      	b.n	800a476 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	e005      	b.n	800a482 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2b32      	cmp	r3, #50	; 0x32
 800a47a:	d101      	bne.n	800a480 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	e000      	b.n	800a482 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
	...

0800a48c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a48c:	b084      	sub	sp, #16
 800a48e:	b580      	push	{r7, lr}
 800a490:	b086      	sub	sp, #24
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a49a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	613b      	str	r3, [r7, #16]
 800a4aa:	e009      	b.n	800a4c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	3340      	adds	r3, #64	; 0x40
 800a4b2:	009b      	lsls	r3, r3, #2
 800a4b4:	4413      	add	r3, r2
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	613b      	str	r3, [r7, #16]
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	2b0e      	cmp	r3, #14
 800a4c4:	d9f2      	bls.n	800a4ac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a4c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d11c      	bne.n	800a506 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	68fa      	ldr	r2, [r7, #12]
 800a4d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4da:	f043 0302 	orr.w	r3, r3, #2
 800a4de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	e005      	b.n	800a512 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a518:	461a      	mov	r2, r3
 800a51a:	2300      	movs	r3, #0
 800a51c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a524:	4619      	mov	r1, r3
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a52c:	461a      	mov	r2, r3
 800a52e:	680b      	ldr	r3, [r1, #0]
 800a530:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a534:	2b01      	cmp	r3, #1
 800a536:	d10c      	bne.n	800a552 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d104      	bne.n	800a548 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a53e:	2100      	movs	r1, #0
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f965 	bl	800a810 <USB_SetDevSpeed>
 800a546:	e008      	b.n	800a55a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a548:	2101      	movs	r1, #1
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 f960 	bl	800a810 <USB_SetDevSpeed>
 800a550:	e003      	b.n	800a55a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a552:	2103      	movs	r1, #3
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f000 f95b 	bl	800a810 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a55a:	2110      	movs	r1, #16
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f8f3 	bl	800a748 <USB_FlushTxFifo>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d001      	beq.n	800a56c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f91f 	bl	800a7b0 <USB_FlushRxFifo>
 800a572:	4603      	mov	r3, r0
 800a574:	2b00      	cmp	r3, #0
 800a576:	d001      	beq.n	800a57c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a582:	461a      	mov	r2, r3
 800a584:	2300      	movs	r3, #0
 800a586:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a58e:	461a      	mov	r2, r3
 800a590:	2300      	movs	r3, #0
 800a592:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a59a:	461a      	mov	r2, r3
 800a59c:	2300      	movs	r3, #0
 800a59e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	613b      	str	r3, [r7, #16]
 800a5a4:	e043      	b.n	800a62e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	015a      	lsls	r2, r3, #5
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5bc:	d118      	bne.n	800a5f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a5be:	693b      	ldr	r3, [r7, #16]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d10a      	bne.n	800a5da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	015a      	lsls	r2, r3, #5
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a5d6:	6013      	str	r3, [r2, #0]
 800a5d8:	e013      	b.n	800a602 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	015a      	lsls	r2, r3, #5
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	4413      	add	r3, r2
 800a5e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a5ec:	6013      	str	r3, [r2, #0]
 800a5ee:	e008      	b.n	800a602 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	015a      	lsls	r2, r3, #5
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	2300      	movs	r3, #0
 800a600:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	015a      	lsls	r2, r3, #5
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	4413      	add	r3, r2
 800a60a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a60e:	461a      	mov	r2, r3
 800a610:	2300      	movs	r3, #0
 800a612:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	015a      	lsls	r2, r3, #5
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	4413      	add	r3, r2
 800a61c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a620:	461a      	mov	r2, r3
 800a622:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a626:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	3301      	adds	r3, #1
 800a62c:	613b      	str	r3, [r7, #16]
 800a62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a630:	693a      	ldr	r2, [r7, #16]
 800a632:	429a      	cmp	r2, r3
 800a634:	d3b7      	bcc.n	800a5a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a636:	2300      	movs	r3, #0
 800a638:	613b      	str	r3, [r7, #16]
 800a63a:	e043      	b.n	800a6c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	015a      	lsls	r2, r3, #5
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4413      	add	r3, r2
 800a644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a64e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a652:	d118      	bne.n	800a686 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10a      	bne.n	800a670 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	015a      	lsls	r2, r3, #5
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	4413      	add	r3, r2
 800a662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a666:	461a      	mov	r2, r3
 800a668:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a66c:	6013      	str	r3, [r2, #0]
 800a66e:	e013      	b.n	800a698 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	015a      	lsls	r2, r3, #5
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4413      	add	r3, r2
 800a678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a67c:	461a      	mov	r2, r3
 800a67e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a682:	6013      	str	r3, [r2, #0]
 800a684:	e008      	b.n	800a698 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	015a      	lsls	r2, r3, #5
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	4413      	add	r3, r2
 800a68e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a692:	461a      	mov	r2, r3
 800a694:	2300      	movs	r3, #0
 800a696:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	015a      	lsls	r2, r3, #5
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	4413      	add	r3, r2
 800a6a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	015a      	lsls	r2, r3, #5
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a6bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	613b      	str	r3, [r7, #16]
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c6:	693a      	ldr	r2, [r7, #16]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d3b7      	bcc.n	800a63c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6d2:	691b      	ldr	r3, [r3, #16]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a6ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d105      	bne.n	800a700 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	699b      	ldr	r3, [r3, #24]
 800a6f8:	f043 0210 	orr.w	r2, r3, #16
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	699a      	ldr	r2, [r3, #24]
 800a704:	4b0e      	ldr	r3, [pc, #56]	; (800a740 <USB_DevInit+0x2b4>)
 800a706:	4313      	orrs	r3, r2
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d005      	beq.n	800a71e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	f043 0208 	orr.w	r2, r3, #8
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a71e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a720:	2b01      	cmp	r3, #1
 800a722:	d105      	bne.n	800a730 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	699a      	ldr	r2, [r3, #24]
 800a728:	4b06      	ldr	r3, [pc, #24]	; (800a744 <USB_DevInit+0x2b8>)
 800a72a:	4313      	orrs	r3, r2
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a730:	7dfb      	ldrb	r3, [r7, #23]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3718      	adds	r7, #24
 800a736:	46bd      	mov	sp, r7
 800a738:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a73c:	b004      	add	sp, #16
 800a73e:	4770      	bx	lr
 800a740:	803c3800 	.word	0x803c3800
 800a744:	40000004 	.word	0x40000004

0800a748 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a752:	2300      	movs	r3, #0
 800a754:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	3301      	adds	r3, #1
 800a75a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	4a13      	ldr	r2, [pc, #76]	; (800a7ac <USB_FlushTxFifo+0x64>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d901      	bls.n	800a768 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a764:	2303      	movs	r3, #3
 800a766:	e01b      	b.n	800a7a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	daf2      	bge.n	800a756 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a770:	2300      	movs	r3, #0
 800a772:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	019b      	lsls	r3, r3, #6
 800a778:	f043 0220 	orr.w	r2, r3, #32
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	3301      	adds	r3, #1
 800a784:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	4a08      	ldr	r2, [pc, #32]	; (800a7ac <USB_FlushTxFifo+0x64>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d901      	bls.n	800a792 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a78e:	2303      	movs	r3, #3
 800a790:	e006      	b.n	800a7a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	f003 0320 	and.w	r3, r3, #32
 800a79a:	2b20      	cmp	r3, #32
 800a79c:	d0f0      	beq.n	800a780 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3714      	adds	r7, #20
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	00030d40 	.word	0x00030d40

0800a7b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	4a11      	ldr	r2, [pc, #68]	; (800a80c <USB_FlushRxFifo+0x5c>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d901      	bls.n	800a7ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	e018      	b.n	800a800 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	691b      	ldr	r3, [r3, #16]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	daf2      	bge.n	800a7bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2210      	movs	r2, #16
 800a7de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	3301      	adds	r3, #1
 800a7e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	4a08      	ldr	r2, [pc, #32]	; (800a80c <USB_FlushRxFifo+0x5c>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d901      	bls.n	800a7f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	e006      	b.n	800a800 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	f003 0310 	and.w	r3, r3, #16
 800a7fa:	2b10      	cmp	r3, #16
 800a7fc:	d0f0      	beq.n	800a7e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3714      	adds	r7, #20
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr
 800a80c:	00030d40 	.word	0x00030d40

0800a810 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a810:	b480      	push	{r7}
 800a812:	b085      	sub	sp, #20
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	460b      	mov	r3, r1
 800a81a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	78fb      	ldrb	r3, [r7, #3]
 800a82a:	68f9      	ldr	r1, [r7, #12]
 800a82c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a830:	4313      	orrs	r3, r2
 800a832:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3714      	adds	r7, #20
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr

0800a842 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a842:	b480      	push	{r7}
 800a844:	b085      	sub	sp, #20
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a85c:	f023 0303 	bic.w	r3, r3, #3
 800a860:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	68fa      	ldr	r2, [r7, #12]
 800a86c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a870:	f043 0302 	orr.w	r3, r3, #2
 800a874:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	695b      	ldr	r3, [r3, #20]
 800a890:	f003 0301 	and.w	r3, r3, #1
}
 800a894:	4618      	mov	r0, r3
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	4a13      	ldr	r2, [pc, #76]	; (800a904 <USB_CoreReset+0x64>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d901      	bls.n	800a8be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e01b      	b.n	800a8f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	691b      	ldr	r3, [r3, #16]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	daf2      	bge.n	800a8ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	691b      	ldr	r3, [r3, #16]
 800a8ce:	f043 0201 	orr.w	r2, r3, #1
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	4a09      	ldr	r2, [pc, #36]	; (800a904 <USB_CoreReset+0x64>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d901      	bls.n	800a8e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	e006      	b.n	800a8f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	691b      	ldr	r3, [r3, #16]
 800a8ec:	f003 0301 	and.w	r3, r3, #1
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d0f0      	beq.n	800a8d6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	00030d40 	.word	0x00030d40

0800a908 <__NVIC_SetPriority>:
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	6039      	str	r1, [r7, #0]
 800a912:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a914:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	db0a      	blt.n	800a932 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	490c      	ldr	r1, [pc, #48]	; (800a954 <__NVIC_SetPriority+0x4c>)
 800a922:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a926:	0112      	lsls	r2, r2, #4
 800a928:	b2d2      	uxtb	r2, r2
 800a92a:	440b      	add	r3, r1
 800a92c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a930:	e00a      	b.n	800a948 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	b2da      	uxtb	r2, r3
 800a936:	4908      	ldr	r1, [pc, #32]	; (800a958 <__NVIC_SetPriority+0x50>)
 800a938:	88fb      	ldrh	r3, [r7, #6]
 800a93a:	f003 030f 	and.w	r3, r3, #15
 800a93e:	3b04      	subs	r3, #4
 800a940:	0112      	lsls	r2, r2, #4
 800a942:	b2d2      	uxtb	r2, r2
 800a944:	440b      	add	r3, r1
 800a946:	761a      	strb	r2, [r3, #24]
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr
 800a954:	e000e100 	.word	0xe000e100
 800a958:	e000ed00 	.word	0xe000ed00

0800a95c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a95c:	b580      	push	{r7, lr}
 800a95e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a960:	4b05      	ldr	r3, [pc, #20]	; (800a978 <SysTick_Handler+0x1c>)
 800a962:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a964:	f002 fcb4 	bl	800d2d0 <xTaskGetSchedulerState>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d001      	beq.n	800a972 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a96e:	f003 fb9b 	bl	800e0a8 <xPortSysTickHandler>
  }
}
 800a972:	bf00      	nop
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	e000e010 	.word	0xe000e010

0800a97c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a97c:	b580      	push	{r7, lr}
 800a97e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a980:	2100      	movs	r1, #0
 800a982:	f06f 0004 	mvn.w	r0, #4
 800a986:	f7ff ffbf 	bl	800a908 <__NVIC_SetPriority>
#endif
}
 800a98a:	bf00      	nop
 800a98c:	bd80      	pop	{r7, pc}
	...

0800a990 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a996:	f3ef 8305 	mrs	r3, IPSR
 800a99a:	603b      	str	r3, [r7, #0]
  return(result);
 800a99c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d003      	beq.n	800a9aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a9a2:	f06f 0305 	mvn.w	r3, #5
 800a9a6:	607b      	str	r3, [r7, #4]
 800a9a8:	e00c      	b.n	800a9c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a9aa:	4b0a      	ldr	r3, [pc, #40]	; (800a9d4 <osKernelInitialize+0x44>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d105      	bne.n	800a9be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a9b2:	4b08      	ldr	r3, [pc, #32]	; (800a9d4 <osKernelInitialize+0x44>)
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	607b      	str	r3, [r7, #4]
 800a9bc:	e002      	b.n	800a9c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a9be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a9c4:	687b      	ldr	r3, [r7, #4]
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	370c      	adds	r7, #12
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	24000984 	.word	0x24000984

0800a9d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b082      	sub	sp, #8
 800a9dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9de:	f3ef 8305 	mrs	r3, IPSR
 800a9e2:	603b      	str	r3, [r7, #0]
  return(result);
 800a9e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d003      	beq.n	800a9f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a9ea:	f06f 0305 	mvn.w	r3, #5
 800a9ee:	607b      	str	r3, [r7, #4]
 800a9f0:	e010      	b.n	800aa14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a9f2:	4b0b      	ldr	r3, [pc, #44]	; (800aa20 <osKernelStart+0x48>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d109      	bne.n	800aa0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a9fa:	f7ff ffbf 	bl	800a97c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a9fe:	4b08      	ldr	r3, [pc, #32]	; (800aa20 <osKernelStart+0x48>)
 800aa00:	2202      	movs	r2, #2
 800aa02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aa04:	f002 f808 	bl	800ca18 <vTaskStartScheduler>
      stat = osOK;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	607b      	str	r3, [r7, #4]
 800aa0c:	e002      	b.n	800aa14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800aa0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800aa14:	687b      	ldr	r3, [r7, #4]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	24000984 	.word	0x24000984

0800aa24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b08e      	sub	sp, #56	; 0x38
 800aa28:	af04      	add	r7, sp, #16
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aa30:	2300      	movs	r3, #0
 800aa32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa34:	f3ef 8305 	mrs	r3, IPSR
 800aa38:	617b      	str	r3, [r7, #20]
  return(result);
 800aa3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d17e      	bne.n	800ab3e <osThreadNew+0x11a>
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d07b      	beq.n	800ab3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800aa46:	2380      	movs	r3, #128	; 0x80
 800aa48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800aa4a:	2318      	movs	r3, #24
 800aa4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800aa52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d045      	beq.n	800aaea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d002      	beq.n	800aa6c <osThreadNew+0x48>
        name = attr->name;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d002      	beq.n	800aa7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d008      	beq.n	800aa92 <osThreadNew+0x6e>
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	2b38      	cmp	r3, #56	; 0x38
 800aa84:	d805      	bhi.n	800aa92 <osThreadNew+0x6e>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	f003 0301 	and.w	r3, r3, #1
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <osThreadNew+0x72>
        return (NULL);
 800aa92:	2300      	movs	r3, #0
 800aa94:	e054      	b.n	800ab40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	695b      	ldr	r3, [r3, #20]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d003      	beq.n	800aaa6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	695b      	ldr	r3, [r3, #20]
 800aaa2:	089b      	lsrs	r3, r3, #2
 800aaa4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00e      	beq.n	800aacc <osThreadNew+0xa8>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	2bbb      	cmp	r3, #187	; 0xbb
 800aab4:	d90a      	bls.n	800aacc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d006      	beq.n	800aacc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d002      	beq.n	800aacc <osThreadNew+0xa8>
        mem = 1;
 800aac6:	2301      	movs	r3, #1
 800aac8:	61bb      	str	r3, [r7, #24]
 800aaca:	e010      	b.n	800aaee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10c      	bne.n	800aaee <osThreadNew+0xca>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d108      	bne.n	800aaee <osThreadNew+0xca>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	691b      	ldr	r3, [r3, #16]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d104      	bne.n	800aaee <osThreadNew+0xca>
          mem = 0;
 800aae4:	2300      	movs	r3, #0
 800aae6:	61bb      	str	r3, [r7, #24]
 800aae8:	e001      	b.n	800aaee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800aaea:	2300      	movs	r3, #0
 800aaec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d110      	bne.n	800ab16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800aafc:	9202      	str	r2, [sp, #8]
 800aafe:	9301      	str	r3, [sp, #4]
 800ab00:	69fb      	ldr	r3, [r7, #28]
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	6a3a      	ldr	r2, [r7, #32]
 800ab08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab0a:	68f8      	ldr	r0, [r7, #12]
 800ab0c:	f001 fcc0 	bl	800c490 <xTaskCreateStatic>
 800ab10:	4603      	mov	r3, r0
 800ab12:	613b      	str	r3, [r7, #16]
 800ab14:	e013      	b.n	800ab3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d110      	bne.n	800ab3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ab1c:	6a3b      	ldr	r3, [r7, #32]
 800ab1e:	b29a      	uxth	r2, r3
 800ab20:	f107 0310 	add.w	r3, r7, #16
 800ab24:	9301      	str	r3, [sp, #4]
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	9300      	str	r3, [sp, #0]
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f001 fd0b 	bl	800c54a <xTaskCreate>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d001      	beq.n	800ab3e <osThreadNew+0x11a>
            hTask = NULL;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ab3e:	693b      	ldr	r3, [r7, #16]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3728      	adds	r7, #40	; 0x28
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <osThreadGetState>:
  id = (osThreadId_t)xTaskGetCurrentTaskHandle();

  return (id);
}

osThreadState_t osThreadGetState (osThreadId_t thread_id) {
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab54:	f3ef 8305 	mrs	r3, IPSR
 800ab58:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
  osThreadState_t state;

  if (IS_IRQ() || (hTask == NULL)) {
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d102      	bne.n	800ab66 <osThreadGetState+0x1e>
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d103      	bne.n	800ab6e <osThreadGetState+0x26>
    state = osThreadError;
 800ab66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab6a:	617b      	str	r3, [r7, #20]
 800ab6c:	e022      	b.n	800abb4 <osThreadGetState+0x6c>
  }
  else {
    switch (eTaskGetState (hTask)) {
 800ab6e:	6938      	ldr	r0, [r7, #16]
 800ab70:	f001 feec 	bl	800c94c <eTaskGetState>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b04      	cmp	r3, #4
 800ab78:	d818      	bhi.n	800abac <osThreadGetState+0x64>
 800ab7a:	a201      	add	r2, pc, #4	; (adr r2, 800ab80 <osThreadGetState+0x38>)
 800ab7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab80:	0800ab95 	.word	0x0800ab95
 800ab84:	0800ab9b 	.word	0x0800ab9b
 800ab88:	0800aba1 	.word	0x0800aba1
 800ab8c:	0800aba1 	.word	0x0800aba1
 800ab90:	0800aba7 	.word	0x0800aba7
      case eRunning:   state = osThreadRunning;    break;
 800ab94:	2302      	movs	r3, #2
 800ab96:	617b      	str	r3, [r7, #20]
 800ab98:	e00c      	b.n	800abb4 <osThreadGetState+0x6c>
      case eReady:     state = osThreadReady;      break;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	617b      	str	r3, [r7, #20]
 800ab9e:	e009      	b.n	800abb4 <osThreadGetState+0x6c>
      case eBlocked:
      case eSuspended: state = osThreadBlocked;    break;
 800aba0:	2303      	movs	r3, #3
 800aba2:	617b      	str	r3, [r7, #20]
 800aba4:	e006      	b.n	800abb4 <osThreadGetState+0x6c>
      case eDeleted:   state = osThreadTerminated; break;
 800aba6:	2304      	movs	r3, #4
 800aba8:	617b      	str	r3, [r7, #20]
 800abaa:	e003      	b.n	800abb4 <osThreadGetState+0x6c>
      case eInvalid:
      default:         state = osThreadError;      break;
 800abac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abb0:	617b      	str	r3, [r7, #20]
 800abb2:	bf00      	nop
    }
  }

  return (state);
 800abb4:	697b      	ldr	r3, [r7, #20]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3718      	adds	r7, #24
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop

0800abc0 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800abc0:	b580      	push	{r7, lr}
 800abc2:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800abc4:	2000      	movs	r0, #0
 800abc6:	f001 fe1b 	bl	800c800 <vTaskDelete>
#endif
  for (;;);
 800abca:	e7fe      	b.n	800abca <osThreadExit+0xa>

0800abcc <osThreadTerminate>:
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800abcc:	b580      	push	{r7, lr}
 800abce:	b086      	sub	sp, #24
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abd8:	f3ef 8305 	mrs	r3, IPSR
 800abdc:	60bb      	str	r3, [r7, #8]
  return(result);
 800abde:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d003      	beq.n	800abec <osThreadTerminate+0x20>
    stat = osErrorISR;
 800abe4:	f06f 0305 	mvn.w	r3, #5
 800abe8:	617b      	str	r3, [r7, #20]
 800abea:	e017      	b.n	800ac1c <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d103      	bne.n	800abfa <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 800abf2:	f06f 0303 	mvn.w	r3, #3
 800abf6:	617b      	str	r3, [r7, #20]
 800abf8:	e010      	b.n	800ac1c <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800abfa:	6938      	ldr	r0, [r7, #16]
 800abfc:	f001 fea6 	bl	800c94c <eTaskGetState>
 800ac00:	4603      	mov	r3, r0
 800ac02:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 800ac04:	7bfb      	ldrb	r3, [r7, #15]
 800ac06:	2b04      	cmp	r3, #4
 800ac08:	d005      	beq.n	800ac16 <osThreadTerminate+0x4a>
      stat = osOK;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800ac0e:	6938      	ldr	r0, [r7, #16]
 800ac10:	f001 fdf6 	bl	800c800 <vTaskDelete>
 800ac14:	e002      	b.n	800ac1c <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800ac16:	f06f 0302 	mvn.w	r3, #2
 800ac1a:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800ac1c:	697b      	ldr	r3, [r7, #20]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3718      	adds	r7, #24
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b084      	sub	sp, #16
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac2e:	f3ef 8305 	mrs	r3, IPSR
 800ac32:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d003      	beq.n	800ac42 <osDelay+0x1c>
    stat = osErrorISR;
 800ac3a:	f06f 0305 	mvn.w	r3, #5
 800ac3e:	60fb      	str	r3, [r7, #12]
 800ac40:	e007      	b.n	800ac52 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ac42:	2300      	movs	r3, #0
 800ac44:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d002      	beq.n	800ac52 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f001 fe49 	bl	800c8e4 <vTaskDelay>
    }
  }

  return (stat);
 800ac52:	68fb      	ldr	r3, [r7, #12]
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b088      	sub	sp, #32
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ac64:	2300      	movs	r3, #0
 800ac66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac68:	f3ef 8305 	mrs	r3, IPSR
 800ac6c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac6e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d174      	bne.n	800ad5e <osMutexNew+0x102>
    if (attr != NULL) {
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d003      	beq.n	800ac82 <osMutexNew+0x26>
      type = attr->attr_bits;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	61bb      	str	r3, [r7, #24]
 800ac80:	e001      	b.n	800ac86 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ac82:	2300      	movs	r3, #0
 800ac84:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	f003 0301 	and.w	r3, r3, #1
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d002      	beq.n	800ac96 <osMutexNew+0x3a>
      rmtx = 1U;
 800ac90:	2301      	movs	r3, #1
 800ac92:	617b      	str	r3, [r7, #20]
 800ac94:	e001      	b.n	800ac9a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ac96:	2300      	movs	r3, #0
 800ac98:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	f003 0308 	and.w	r3, r3, #8
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d15c      	bne.n	800ad5e <osMutexNew+0x102>
      mem = -1;
 800aca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aca8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d015      	beq.n	800acdc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d006      	beq.n	800acc6 <osMutexNew+0x6a>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	2b4f      	cmp	r3, #79	; 0x4f
 800acbe:	d902      	bls.n	800acc6 <osMutexNew+0x6a>
          mem = 1;
 800acc0:	2301      	movs	r3, #1
 800acc2:	613b      	str	r3, [r7, #16]
 800acc4:	e00c      	b.n	800ace0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d108      	bne.n	800ace0 <osMutexNew+0x84>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d104      	bne.n	800ace0 <osMutexNew+0x84>
            mem = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	613b      	str	r3, [r7, #16]
 800acda:	e001      	b.n	800ace0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800acdc:	2300      	movs	r3, #0
 800acde:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d112      	bne.n	800ad0c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d007      	beq.n	800acfc <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	4619      	mov	r1, r3
 800acf2:	2004      	movs	r0, #4
 800acf4:	f000 fce1 	bl	800b6ba <xQueueCreateMutexStatic>
 800acf8:	61f8      	str	r0, [r7, #28]
 800acfa:	e016      	b.n	800ad2a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	4619      	mov	r1, r3
 800ad02:	2001      	movs	r0, #1
 800ad04:	f000 fcd9 	bl	800b6ba <xQueueCreateMutexStatic>
 800ad08:	61f8      	str	r0, [r7, #28]
 800ad0a:	e00e      	b.n	800ad2a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d10b      	bne.n	800ad2a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d004      	beq.n	800ad22 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800ad18:	2004      	movs	r0, #4
 800ad1a:	f000 fcb6 	bl	800b68a <xQueueCreateMutex>
 800ad1e:	61f8      	str	r0, [r7, #28]
 800ad20:	e003      	b.n	800ad2a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800ad22:	2001      	movs	r0, #1
 800ad24:	f000 fcb1 	bl	800b68a <xQueueCreateMutex>
 800ad28:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00c      	beq.n	800ad4a <osMutexNew+0xee>
        if (attr != NULL) {
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d003      	beq.n	800ad3e <osMutexNew+0xe2>
          name = attr->name;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	60fb      	str	r3, [r7, #12]
 800ad3c:	e001      	b.n	800ad42 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800ad42:	68f9      	ldr	r1, [r7, #12]
 800ad44:	69f8      	ldr	r0, [r7, #28]
 800ad46:	f001 fb1b 	bl	800c380 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ad4a:	69fb      	ldr	r3, [r7, #28]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d006      	beq.n	800ad5e <osMutexNew+0x102>
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d003      	beq.n	800ad5e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	f043 0301 	orr.w	r3, r3, #1
 800ad5c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800ad5e:	69fb      	ldr	r3, [r7, #28]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3720      	adds	r7, #32
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b08a      	sub	sp, #40	; 0x28
 800ad6c:	af02      	add	r7, sp, #8
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ad74:	2300      	movs	r3, #0
 800ad76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad78:	f3ef 8305 	mrs	r3, IPSR
 800ad7c:	613b      	str	r3, [r7, #16]
  return(result);
 800ad7e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d175      	bne.n	800ae70 <osSemaphoreNew+0x108>
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d072      	beq.n	800ae70 <osSemaphoreNew+0x108>
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d86e      	bhi.n	800ae70 <osSemaphoreNew+0x108>
    mem = -1;
 800ad92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d015      	beq.n	800adca <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d006      	beq.n	800adb4 <osSemaphoreNew+0x4c>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	2b4f      	cmp	r3, #79	; 0x4f
 800adac:	d902      	bls.n	800adb4 <osSemaphoreNew+0x4c>
        mem = 1;
 800adae:	2301      	movs	r3, #1
 800adb0:	61bb      	str	r3, [r7, #24]
 800adb2:	e00c      	b.n	800adce <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d108      	bne.n	800adce <osSemaphoreNew+0x66>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d104      	bne.n	800adce <osSemaphoreNew+0x66>
          mem = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	61bb      	str	r3, [r7, #24]
 800adc8:	e001      	b.n	800adce <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800adca:	2300      	movs	r3, #0
 800adcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800add4:	d04c      	beq.n	800ae70 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2b01      	cmp	r3, #1
 800adda:	d128      	bne.n	800ae2e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d10a      	bne.n	800adf8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	2203      	movs	r2, #3
 800ade8:	9200      	str	r2, [sp, #0]
 800adea:	2200      	movs	r2, #0
 800adec:	2100      	movs	r1, #0
 800adee:	2001      	movs	r0, #1
 800adf0:	f000 fb5c 	bl	800b4ac <xQueueGenericCreateStatic>
 800adf4:	61f8      	str	r0, [r7, #28]
 800adf6:	e005      	b.n	800ae04 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800adf8:	2203      	movs	r2, #3
 800adfa:	2100      	movs	r1, #0
 800adfc:	2001      	movs	r0, #1
 800adfe:	f000 fbcd 	bl	800b59c <xQueueGenericCreate>
 800ae02:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d022      	beq.n	800ae50 <osSemaphoreNew+0xe8>
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d01f      	beq.n	800ae50 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ae10:	2300      	movs	r3, #0
 800ae12:	2200      	movs	r2, #0
 800ae14:	2100      	movs	r1, #0
 800ae16:	69f8      	ldr	r0, [r7, #28]
 800ae18:	f000 fcd4 	bl	800b7c4 <xQueueGenericSend>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d016      	beq.n	800ae50 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ae22:	69f8      	ldr	r0, [r7, #28]
 800ae24:	f001 f960 	bl	800c0e8 <vQueueDelete>
            hSemaphore = NULL;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	61fb      	str	r3, [r7, #28]
 800ae2c:	e010      	b.n	800ae50 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d108      	bne.n	800ae46 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	461a      	mov	r2, r3
 800ae3a:	68b9      	ldr	r1, [r7, #8]
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f000 fc57 	bl	800b6f0 <xQueueCreateCountingSemaphoreStatic>
 800ae42:	61f8      	str	r0, [r7, #28]
 800ae44:	e004      	b.n	800ae50 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ae46:	68b9      	ldr	r1, [r7, #8]
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f000 fc88 	bl	800b75e <xQueueCreateCountingSemaphore>
 800ae4e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00c      	beq.n	800ae70 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d003      	beq.n	800ae64 <osSemaphoreNew+0xfc>
          name = attr->name;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	617b      	str	r3, [r7, #20]
 800ae62:	e001      	b.n	800ae68 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ae64:	2300      	movs	r3, #0
 800ae66:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ae68:	6979      	ldr	r1, [r7, #20]
 800ae6a:	69f8      	ldr	r0, [r7, #28]
 800ae6c:	f001 fa88 	bl	800c380 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ae70:	69fb      	ldr	r3, [r7, #28]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3720      	adds	r7, #32
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
	...

0800ae7c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d103      	bne.n	800ae9c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ae94:	f06f 0303 	mvn.w	r3, #3
 800ae98:	617b      	str	r3, [r7, #20]
 800ae9a:	e039      	b.n	800af10 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae9c:	f3ef 8305 	mrs	r3, IPSR
 800aea0:	60fb      	str	r3, [r7, #12]
  return(result);
 800aea2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d022      	beq.n	800aeee <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d003      	beq.n	800aeb6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800aeae:	f06f 0303 	mvn.w	r3, #3
 800aeb2:	617b      	str	r3, [r7, #20]
 800aeb4:	e02c      	b.n	800af10 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800aeba:	f107 0308 	add.w	r3, r7, #8
 800aebe:	461a      	mov	r2, r3
 800aec0:	2100      	movs	r1, #0
 800aec2:	6938      	ldr	r0, [r7, #16]
 800aec4:	f001 f890 	bl	800bfe8 <xQueueReceiveFromISR>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d003      	beq.n	800aed6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800aece:	f06f 0302 	mvn.w	r3, #2
 800aed2:	617b      	str	r3, [r7, #20]
 800aed4:	e01c      	b.n	800af10 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d019      	beq.n	800af10 <osSemaphoreAcquire+0x94>
 800aedc:	4b0f      	ldr	r3, [pc, #60]	; (800af1c <osSemaphoreAcquire+0xa0>)
 800aede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	f3bf 8f6f 	isb	sy
 800aeec:	e010      	b.n	800af10 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6938      	ldr	r0, [r7, #16]
 800aef2:	f000 ff6d 	bl	800bdd0 <xQueueSemaphoreTake>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d009      	beq.n	800af10 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d003      	beq.n	800af0a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800af02:	f06f 0301 	mvn.w	r3, #1
 800af06:	617b      	str	r3, [r7, #20]
 800af08:	e002      	b.n	800af10 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800af0a:	f06f 0302 	mvn.w	r3, #2
 800af0e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800af10:	697b      	ldr	r3, [r7, #20]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3718      	adds	r7, #24
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	e000ed04 	.word	0xe000ed04

0800af20 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800af20:	b580      	push	{r7, lr}
 800af22:	b086      	sub	sp, #24
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800af2c:	2300      	movs	r3, #0
 800af2e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d103      	bne.n	800af3e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800af36:	f06f 0303 	mvn.w	r3, #3
 800af3a:	617b      	str	r3, [r7, #20]
 800af3c:	e02c      	b.n	800af98 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af3e:	f3ef 8305 	mrs	r3, IPSR
 800af42:	60fb      	str	r3, [r7, #12]
  return(result);
 800af44:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800af46:	2b00      	cmp	r3, #0
 800af48:	d01a      	beq.n	800af80 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800af4a:	2300      	movs	r3, #0
 800af4c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800af4e:	f107 0308 	add.w	r3, r7, #8
 800af52:	4619      	mov	r1, r3
 800af54:	6938      	ldr	r0, [r7, #16]
 800af56:	f000 fdce 	bl	800baf6 <xQueueGiveFromISR>
 800af5a:	4603      	mov	r3, r0
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d003      	beq.n	800af68 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800af60:	f06f 0302 	mvn.w	r3, #2
 800af64:	617b      	str	r3, [r7, #20]
 800af66:	e017      	b.n	800af98 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d014      	beq.n	800af98 <osSemaphoreRelease+0x78>
 800af6e:	4b0d      	ldr	r3, [pc, #52]	; (800afa4 <osSemaphoreRelease+0x84>)
 800af70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af74:	601a      	str	r2, [r3, #0]
 800af76:	f3bf 8f4f 	dsb	sy
 800af7a:	f3bf 8f6f 	isb	sy
 800af7e:	e00b      	b.n	800af98 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800af80:	2300      	movs	r3, #0
 800af82:	2200      	movs	r2, #0
 800af84:	2100      	movs	r1, #0
 800af86:	6938      	ldr	r0, [r7, #16]
 800af88:	f000 fc1c 	bl	800b7c4 <xQueueGenericSend>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d002      	beq.n	800af98 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800af92:	f06f 0302 	mvn.w	r3, #2
 800af96:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800af98:	697b      	ldr	r3, [r7, #20]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3718      	adds	r7, #24
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	e000ed04 	.word	0xe000ed04

0800afa8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b08a      	sub	sp, #40	; 0x28
 800afac:	af02      	add	r7, sp, #8
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800afb4:	2300      	movs	r3, #0
 800afb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afb8:	f3ef 8305 	mrs	r3, IPSR
 800afbc:	613b      	str	r3, [r7, #16]
  return(result);
 800afbe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d15f      	bne.n	800b084 <osMessageQueueNew+0xdc>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d05c      	beq.n	800b084 <osMessageQueueNew+0xdc>
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d059      	beq.n	800b084 <osMessageQueueNew+0xdc>
    mem = -1;
 800afd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afd4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d029      	beq.n	800b030 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d012      	beq.n	800b00a <osMessageQueueNew+0x62>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	68db      	ldr	r3, [r3, #12]
 800afe8:	2b4f      	cmp	r3, #79	; 0x4f
 800afea:	d90e      	bls.n	800b00a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00a      	beq.n	800b00a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	695a      	ldr	r2, [r3, #20]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	68b9      	ldr	r1, [r7, #8]
 800affc:	fb01 f303 	mul.w	r3, r1, r3
 800b000:	429a      	cmp	r2, r3
 800b002:	d302      	bcc.n	800b00a <osMessageQueueNew+0x62>
        mem = 1;
 800b004:	2301      	movs	r3, #1
 800b006:	61bb      	str	r3, [r7, #24]
 800b008:	e014      	b.n	800b034 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d110      	bne.n	800b034 <osMessageQueueNew+0x8c>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d10c      	bne.n	800b034 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d108      	bne.n	800b034 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	695b      	ldr	r3, [r3, #20]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d104      	bne.n	800b034 <osMessageQueueNew+0x8c>
          mem = 0;
 800b02a:	2300      	movs	r3, #0
 800b02c:	61bb      	str	r3, [r7, #24]
 800b02e:	e001      	b.n	800b034 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b030:	2300      	movs	r3, #0
 800b032:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	2b01      	cmp	r3, #1
 800b038:	d10b      	bne.n	800b052 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	691a      	ldr	r2, [r3, #16]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	2100      	movs	r1, #0
 800b044:	9100      	str	r1, [sp, #0]
 800b046:	68b9      	ldr	r1, [r7, #8]
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f000 fa2f 	bl	800b4ac <xQueueGenericCreateStatic>
 800b04e:	61f8      	str	r0, [r7, #28]
 800b050:	e008      	b.n	800b064 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d105      	bne.n	800b064 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b058:	2200      	movs	r2, #0
 800b05a:	68b9      	ldr	r1, [r7, #8]
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	f000 fa9d 	bl	800b59c <xQueueGenericCreate>
 800b062:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00c      	beq.n	800b084 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d003      	beq.n	800b078 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	617b      	str	r3, [r7, #20]
 800b076:	e001      	b.n	800b07c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b078:	2300      	movs	r3, #0
 800b07a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b07c:	6979      	ldr	r1, [r7, #20]
 800b07e:	69f8      	ldr	r0, [r7, #28]
 800b080:	f001 f97e 	bl	800c380 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b084:	69fb      	ldr	r3, [r7, #28]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3720      	adds	r7, #32
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
	...

0800b090 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b090:	b580      	push	{r7, lr}
 800b092:	b088      	sub	sp, #32
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	603b      	str	r3, [r7, #0]
 800b09c:	4613      	mov	r3, r2
 800b09e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0a8:	f3ef 8305 	mrs	r3, IPSR
 800b0ac:	617b      	str	r3, [r7, #20]
  return(result);
 800b0ae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d028      	beq.n	800b106 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d005      	beq.n	800b0c6 <osMessageQueuePut+0x36>
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d002      	beq.n	800b0c6 <osMessageQueuePut+0x36>
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d003      	beq.n	800b0ce <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b0c6:	f06f 0303 	mvn.w	r3, #3
 800b0ca:	61fb      	str	r3, [r7, #28]
 800b0cc:	e038      	b.n	800b140 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b0d2:	f107 0210 	add.w	r2, r7, #16
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	68b9      	ldr	r1, [r7, #8]
 800b0da:	69b8      	ldr	r0, [r7, #24]
 800b0dc:	f000 fc70 	bl	800b9c0 <xQueueGenericSendFromISR>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d003      	beq.n	800b0ee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b0e6:	f06f 0302 	mvn.w	r3, #2
 800b0ea:	61fb      	str	r3, [r7, #28]
 800b0ec:	e028      	b.n	800b140 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d025      	beq.n	800b140 <osMessageQueuePut+0xb0>
 800b0f4:	4b15      	ldr	r3, [pc, #84]	; (800b14c <osMessageQueuePut+0xbc>)
 800b0f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0fa:	601a      	str	r2, [r3, #0]
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	f3bf 8f6f 	isb	sy
 800b104:	e01c      	b.n	800b140 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d002      	beq.n	800b112 <osMessageQueuePut+0x82>
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d103      	bne.n	800b11a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b112:	f06f 0303 	mvn.w	r3, #3
 800b116:	61fb      	str	r3, [r7, #28]
 800b118:	e012      	b.n	800b140 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b11a:	2300      	movs	r3, #0
 800b11c:	683a      	ldr	r2, [r7, #0]
 800b11e:	68b9      	ldr	r1, [r7, #8]
 800b120:	69b8      	ldr	r0, [r7, #24]
 800b122:	f000 fb4f 	bl	800b7c4 <xQueueGenericSend>
 800b126:	4603      	mov	r3, r0
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d009      	beq.n	800b140 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d003      	beq.n	800b13a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b132:	f06f 0301 	mvn.w	r3, #1
 800b136:	61fb      	str	r3, [r7, #28]
 800b138:	e002      	b.n	800b140 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b13a:	f06f 0302 	mvn.w	r3, #2
 800b13e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b140:	69fb      	ldr	r3, [r7, #28]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3720      	adds	r7, #32
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	e000ed04 	.word	0xe000ed04

0800b150 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b150:	b580      	push	{r7, lr}
 800b152:	b088      	sub	sp, #32
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
 800b15c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b162:	2300      	movs	r3, #0
 800b164:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b166:	f3ef 8305 	mrs	r3, IPSR
 800b16a:	617b      	str	r3, [r7, #20]
  return(result);
 800b16c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d028      	beq.n	800b1c4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d005      	beq.n	800b184 <osMessageQueueGet+0x34>
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d002      	beq.n	800b184 <osMessageQueueGet+0x34>
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d003      	beq.n	800b18c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b184:	f06f 0303 	mvn.w	r3, #3
 800b188:	61fb      	str	r3, [r7, #28]
 800b18a:	e037      	b.n	800b1fc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b18c:	2300      	movs	r3, #0
 800b18e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b190:	f107 0310 	add.w	r3, r7, #16
 800b194:	461a      	mov	r2, r3
 800b196:	68b9      	ldr	r1, [r7, #8]
 800b198:	69b8      	ldr	r0, [r7, #24]
 800b19a:	f000 ff25 	bl	800bfe8 <xQueueReceiveFromISR>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d003      	beq.n	800b1ac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b1a4:	f06f 0302 	mvn.w	r3, #2
 800b1a8:	61fb      	str	r3, [r7, #28]
 800b1aa:	e027      	b.n	800b1fc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b1ac:	693b      	ldr	r3, [r7, #16]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d024      	beq.n	800b1fc <osMessageQueueGet+0xac>
 800b1b2:	4b15      	ldr	r3, [pc, #84]	; (800b208 <osMessageQueueGet+0xb8>)
 800b1b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1b8:	601a      	str	r2, [r3, #0]
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	e01b      	b.n	800b1fc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d002      	beq.n	800b1d0 <osMessageQueueGet+0x80>
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d103      	bne.n	800b1d8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b1d0:	f06f 0303 	mvn.w	r3, #3
 800b1d4:	61fb      	str	r3, [r7, #28]
 800b1d6:	e011      	b.n	800b1fc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b1d8:	683a      	ldr	r2, [r7, #0]
 800b1da:	68b9      	ldr	r1, [r7, #8]
 800b1dc:	69b8      	ldr	r0, [r7, #24]
 800b1de:	f000 fd17 	bl	800bc10 <xQueueReceive>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d009      	beq.n	800b1fc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d003      	beq.n	800b1f6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b1ee:	f06f 0301 	mvn.w	r3, #1
 800b1f2:	61fb      	str	r3, [r7, #28]
 800b1f4:	e002      	b.n	800b1fc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b1f6:	f06f 0302 	mvn.w	r3, #2
 800b1fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b1fc:	69fb      	ldr	r3, [r7, #28]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3720      	adds	r7, #32
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	e000ed04 	.word	0xe000ed04

0800b20c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b20c:	b480      	push	{r7}
 800b20e:	b085      	sub	sp, #20
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	4a07      	ldr	r2, [pc, #28]	; (800b238 <vApplicationGetIdleTaskMemory+0x2c>)
 800b21c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	4a06      	ldr	r2, [pc, #24]	; (800b23c <vApplicationGetIdleTaskMemory+0x30>)
 800b222:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2280      	movs	r2, #128	; 0x80
 800b228:	601a      	str	r2, [r3, #0]
}
 800b22a:	bf00      	nop
 800b22c:	3714      	adds	r7, #20
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr
 800b236:	bf00      	nop
 800b238:	24000988 	.word	0x24000988
 800b23c:	24000a44 	.word	0x24000a44

0800b240 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	4a07      	ldr	r2, [pc, #28]	; (800b26c <vApplicationGetTimerTaskMemory+0x2c>)
 800b250:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	4a06      	ldr	r2, [pc, #24]	; (800b270 <vApplicationGetTimerTaskMemory+0x30>)
 800b256:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b25e:	601a      	str	r2, [r3, #0]
}
 800b260:	bf00      	nop
 800b262:	3714      	adds	r7, #20
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr
 800b26c:	24000c44 	.word	0x24000c44
 800b270:	24000d00 	.word	0x24000d00

0800b274 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f103 0208 	add.w	r2, r3, #8
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b28c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f103 0208 	add.w	r2, r3, #8
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f103 0208 	add.w	r2, r3, #8
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b2a8:	bf00      	nop
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b2c2:	bf00      	nop
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b085      	sub	sp, #20
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
 800b2d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	689a      	ldr	r2, [r3, #8]
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	683a      	ldr	r2, [r7, #0]
 800b2f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	1c5a      	adds	r2, r3, #1
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	601a      	str	r2, [r3, #0]
}
 800b30a:	bf00      	nop
 800b30c:	3714      	adds	r7, #20
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b316:	b480      	push	{r7}
 800b318:	b085      	sub	sp, #20
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b32c:	d103      	bne.n	800b336 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	691b      	ldr	r3, [r3, #16]
 800b332:	60fb      	str	r3, [r7, #12]
 800b334:	e00c      	b.n	800b350 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	3308      	adds	r3, #8
 800b33a:	60fb      	str	r3, [r7, #12]
 800b33c:	e002      	b.n	800b344 <vListInsert+0x2e>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	60fb      	str	r3, [r7, #12]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68ba      	ldr	r2, [r7, #8]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d2f6      	bcs.n	800b33e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	685a      	ldr	r2, [r3, #4]
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	683a      	ldr	r2, [r7, #0]
 800b35e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	683a      	ldr	r2, [r7, #0]
 800b36a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	1c5a      	adds	r2, r3, #1
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	601a      	str	r2, [r3, #0]
}
 800b37c:	bf00      	nop
 800b37e:	3714      	adds	r7, #20
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b388:	b480      	push	{r7}
 800b38a:	b085      	sub	sp, #20
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	6892      	ldr	r2, [r2, #8]
 800b39e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	6852      	ldr	r2, [r2, #4]
 800b3a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d103      	bne.n	800b3bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	689a      	ldr	r2, [r3, #8]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2200      	movs	r2, #0
 800b3c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	1e5a      	subs	r2, r3, #1
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3714      	adds	r7, #20
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d10a      	bne.n	800b406 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f4:	f383 8811 	msr	BASEPRI, r3
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b402:	bf00      	nop
 800b404:	e7fe      	b.n	800b404 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b406:	f002 fdbd 	bl	800df84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b412:	68f9      	ldr	r1, [r7, #12]
 800b414:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b416:	fb01 f303 	mul.w	r3, r1, r3
 800b41a:	441a      	add	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2200      	movs	r2, #0
 800b424:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b436:	3b01      	subs	r3, #1
 800b438:	68f9      	ldr	r1, [r7, #12]
 800b43a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b43c:	fb01 f303 	mul.w	r3, r1, r3
 800b440:	441a      	add	r2, r3
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	22ff      	movs	r2, #255	; 0xff
 800b44a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	22ff      	movs	r2, #255	; 0xff
 800b452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d114      	bne.n	800b486 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	691b      	ldr	r3, [r3, #16]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d01a      	beq.n	800b49a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	3310      	adds	r3, #16
 800b468:	4618      	mov	r0, r3
 800b46a:	f001 fd6f 	bl	800cf4c <xTaskRemoveFromEventList>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d012      	beq.n	800b49a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b474:	4b0c      	ldr	r3, [pc, #48]	; (800b4a8 <xQueueGenericReset+0xcc>)
 800b476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b47a:	601a      	str	r2, [r3, #0]
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	f3bf 8f6f 	isb	sy
 800b484:	e009      	b.n	800b49a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	3310      	adds	r3, #16
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7ff fef2 	bl	800b274 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	3324      	adds	r3, #36	; 0x24
 800b494:	4618      	mov	r0, r3
 800b496:	f7ff feed 	bl	800b274 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b49a:	f002 fda3 	bl	800dfe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b49e:	2301      	movs	r3, #1
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	e000ed04 	.word	0xe000ed04

0800b4ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b08e      	sub	sp, #56	; 0x38
 800b4b0:	af02      	add	r7, sp, #8
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	607a      	str	r2, [r7, #4]
 800b4b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d10a      	bne.n	800b4d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c4:	f383 8811 	msr	BASEPRI, r3
 800b4c8:	f3bf 8f6f 	isb	sy
 800b4cc:	f3bf 8f4f 	dsb	sy
 800b4d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b4d2:	bf00      	nop
 800b4d4:	e7fe      	b.n	800b4d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10a      	bne.n	800b4f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b4dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e0:	f383 8811 	msr	BASEPRI, r3
 800b4e4:	f3bf 8f6f 	isb	sy
 800b4e8:	f3bf 8f4f 	dsb	sy
 800b4ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b4ee:	bf00      	nop
 800b4f0:	e7fe      	b.n	800b4f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d002      	beq.n	800b4fe <xQueueGenericCreateStatic+0x52>
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d001      	beq.n	800b502 <xQueueGenericCreateStatic+0x56>
 800b4fe:	2301      	movs	r3, #1
 800b500:	e000      	b.n	800b504 <xQueueGenericCreateStatic+0x58>
 800b502:	2300      	movs	r3, #0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d10a      	bne.n	800b51e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	623b      	str	r3, [r7, #32]
}
 800b51a:	bf00      	nop
 800b51c:	e7fe      	b.n	800b51c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d102      	bne.n	800b52a <xQueueGenericCreateStatic+0x7e>
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d101      	bne.n	800b52e <xQueueGenericCreateStatic+0x82>
 800b52a:	2301      	movs	r3, #1
 800b52c:	e000      	b.n	800b530 <xQueueGenericCreateStatic+0x84>
 800b52e:	2300      	movs	r3, #0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d10a      	bne.n	800b54a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b538:	f383 8811 	msr	BASEPRI, r3
 800b53c:	f3bf 8f6f 	isb	sy
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	61fb      	str	r3, [r7, #28]
}
 800b546:	bf00      	nop
 800b548:	e7fe      	b.n	800b548 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b54a:	2350      	movs	r3, #80	; 0x50
 800b54c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	2b50      	cmp	r3, #80	; 0x50
 800b552:	d00a      	beq.n	800b56a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b558:	f383 8811 	msr	BASEPRI, r3
 800b55c:	f3bf 8f6f 	isb	sy
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	61bb      	str	r3, [r7, #24]
}
 800b566:	bf00      	nop
 800b568:	e7fe      	b.n	800b568 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b56a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00d      	beq.n	800b592 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b578:	2201      	movs	r2, #1
 800b57a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b57e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b584:	9300      	str	r3, [sp, #0]
 800b586:	4613      	mov	r3, r2
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	68b9      	ldr	r1, [r7, #8]
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f000 f83f 	bl	800b610 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b594:	4618      	mov	r0, r3
 800b596:	3730      	adds	r7, #48	; 0x30
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08a      	sub	sp, #40	; 0x28
 800b5a0:	af02      	add	r7, sp, #8
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	60b9      	str	r1, [r7, #8]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d10a      	bne.n	800b5c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	613b      	str	r3, [r7, #16]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	68ba      	ldr	r2, [r7, #8]
 800b5ca:	fb02 f303 	mul.w	r3, r2, r3
 800b5ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	3350      	adds	r3, #80	; 0x50
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f002 fdf7 	bl	800e1c8 <pvPortMalloc>
 800b5da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b5dc:	69bb      	ldr	r3, [r7, #24]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d011      	beq.n	800b606 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	3350      	adds	r3, #80	; 0x50
 800b5ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b5f4:	79fa      	ldrb	r2, [r7, #7]
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	9300      	str	r3, [sp, #0]
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	697a      	ldr	r2, [r7, #20]
 800b5fe:	68b9      	ldr	r1, [r7, #8]
 800b600:	68f8      	ldr	r0, [r7, #12]
 800b602:	f000 f805 	bl	800b610 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b606:	69bb      	ldr	r3, [r7, #24]
	}
 800b608:	4618      	mov	r0, r3
 800b60a:	3720      	adds	r7, #32
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b084      	sub	sp, #16
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	607a      	str	r2, [r7, #4]
 800b61c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d103      	bne.n	800b62c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	69ba      	ldr	r2, [r7, #24]
 800b628:	601a      	str	r2, [r3, #0]
 800b62a:	e002      	b.n	800b632 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b62c:	69bb      	ldr	r3, [r7, #24]
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b632:	69bb      	ldr	r3, [r7, #24]
 800b634:	68fa      	ldr	r2, [r7, #12]
 800b636:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b638:	69bb      	ldr	r3, [r7, #24]
 800b63a:	68ba      	ldr	r2, [r7, #8]
 800b63c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b63e:	2101      	movs	r1, #1
 800b640:	69b8      	ldr	r0, [r7, #24]
 800b642:	f7ff fecb 	bl	800b3dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	78fa      	ldrb	r2, [r7, #3]
 800b64a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b64e:	bf00      	nop
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b656:	b580      	push	{r7, lr}
 800b658:	b082      	sub	sp, #8
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d00e      	beq.n	800b682 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b676:	2300      	movs	r3, #0
 800b678:	2200      	movs	r2, #0
 800b67a:	2100      	movs	r1, #0
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 f8a1 	bl	800b7c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b682:	bf00      	nop
 800b684:	3708      	adds	r7, #8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b086      	sub	sp, #24
 800b68e:	af00      	add	r7, sp, #0
 800b690:	4603      	mov	r3, r0
 800b692:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b694:	2301      	movs	r3, #1
 800b696:	617b      	str	r3, [r7, #20]
 800b698:	2300      	movs	r3, #0
 800b69a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b69c:	79fb      	ldrb	r3, [r7, #7]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	6939      	ldr	r1, [r7, #16]
 800b6a2:	6978      	ldr	r0, [r7, #20]
 800b6a4:	f7ff ff7a 	bl	800b59c <xQueueGenericCreate>
 800b6a8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f7ff ffd3 	bl	800b656 <prvInitialiseMutex>

		return xNewQueue;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
	}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3718      	adds	r7, #24
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b088      	sub	sp, #32
 800b6be:	af02      	add	r7, sp, #8
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	6039      	str	r1, [r7, #0]
 800b6c4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	617b      	str	r3, [r7, #20]
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b6ce:	79fb      	ldrb	r3, [r7, #7]
 800b6d0:	9300      	str	r3, [sp, #0]
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	6939      	ldr	r1, [r7, #16]
 800b6d8:	6978      	ldr	r0, [r7, #20]
 800b6da:	f7ff fee7 	bl	800b4ac <xQueueGenericCreateStatic>
 800b6de:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	f7ff ffb8 	bl	800b656 <prvInitialiseMutex>

		return xNewQueue;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
	}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3718      	adds	r7, #24
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b08a      	sub	sp, #40	; 0x28
 800b6f4:	af02      	add	r7, sp, #8
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d10a      	bne.n	800b718 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b706:	f383 8811 	msr	BASEPRI, r3
 800b70a:	f3bf 8f6f 	isb	sy
 800b70e:	f3bf 8f4f 	dsb	sy
 800b712:	61bb      	str	r3, [r7, #24]
}
 800b714:	bf00      	nop
 800b716:	e7fe      	b.n	800b716 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d90a      	bls.n	800b736 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b724:	f383 8811 	msr	BASEPRI, r3
 800b728:	f3bf 8f6f 	isb	sy
 800b72c:	f3bf 8f4f 	dsb	sy
 800b730:	617b      	str	r3, [r7, #20]
}
 800b732:	bf00      	nop
 800b734:	e7fe      	b.n	800b734 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b736:	2302      	movs	r3, #2
 800b738:	9300      	str	r3, [sp, #0]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2200      	movs	r2, #0
 800b73e:	2100      	movs	r1, #0
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f7ff feb3 	bl	800b4ac <xQueueGenericCreateStatic>
 800b746:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b748:	69fb      	ldr	r3, [r7, #28]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d002      	beq.n	800b754 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	68ba      	ldr	r2, [r7, #8]
 800b752:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b754:	69fb      	ldr	r3, [r7, #28]
	}
 800b756:	4618      	mov	r0, r3
 800b758:	3720      	adds	r7, #32
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b086      	sub	sp, #24
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d10a      	bne.n	800b784 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	613b      	str	r3, [r7, #16]
}
 800b780:	bf00      	nop
 800b782:	e7fe      	b.n	800b782 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b784:	683a      	ldr	r2, [r7, #0]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d90a      	bls.n	800b7a2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b790:	f383 8811 	msr	BASEPRI, r3
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	60fb      	str	r3, [r7, #12]
}
 800b79e:	bf00      	nop
 800b7a0:	e7fe      	b.n	800b7a0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b7a2:	2202      	movs	r2, #2
 800b7a4:	2100      	movs	r1, #0
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f7ff fef8 	bl	800b59c <xQueueGenericCreate>
 800b7ac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d002      	beq.n	800b7ba <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b7ba:	697b      	ldr	r3, [r7, #20]
	}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3718      	adds	r7, #24
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b08e      	sub	sp, #56	; 0x38
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	607a      	str	r2, [r7, #4]
 800b7d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d10a      	bne.n	800b7f6 <xQueueGenericSend+0x32>
	__asm volatile
 800b7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e4:	f383 8811 	msr	BASEPRI, r3
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b7f2:	bf00      	nop
 800b7f4:	e7fe      	b.n	800b7f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d103      	bne.n	800b804 <xQueueGenericSend+0x40>
 800b7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b800:	2b00      	cmp	r3, #0
 800b802:	d101      	bne.n	800b808 <xQueueGenericSend+0x44>
 800b804:	2301      	movs	r3, #1
 800b806:	e000      	b.n	800b80a <xQueueGenericSend+0x46>
 800b808:	2300      	movs	r3, #0
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d10a      	bne.n	800b824 <xQueueGenericSend+0x60>
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b820:	bf00      	nop
 800b822:	e7fe      	b.n	800b822 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	2b02      	cmp	r3, #2
 800b828:	d103      	bne.n	800b832 <xQueueGenericSend+0x6e>
 800b82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d101      	bne.n	800b836 <xQueueGenericSend+0x72>
 800b832:	2301      	movs	r3, #1
 800b834:	e000      	b.n	800b838 <xQueueGenericSend+0x74>
 800b836:	2300      	movs	r3, #0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d10a      	bne.n	800b852 <xQueueGenericSend+0x8e>
	__asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	623b      	str	r3, [r7, #32]
}
 800b84e:	bf00      	nop
 800b850:	e7fe      	b.n	800b850 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b852:	f001 fd3d 	bl	800d2d0 <xTaskGetSchedulerState>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d102      	bne.n	800b862 <xQueueGenericSend+0x9e>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d101      	bne.n	800b866 <xQueueGenericSend+0xa2>
 800b862:	2301      	movs	r3, #1
 800b864:	e000      	b.n	800b868 <xQueueGenericSend+0xa4>
 800b866:	2300      	movs	r3, #0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10a      	bne.n	800b882 <xQueueGenericSend+0xbe>
	__asm volatile
 800b86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b870:	f383 8811 	msr	BASEPRI, r3
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	61fb      	str	r3, [r7, #28]
}
 800b87e:	bf00      	nop
 800b880:	e7fe      	b.n	800b880 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b882:	f002 fb7f 	bl	800df84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b88e:	429a      	cmp	r2, r3
 800b890:	d302      	bcc.n	800b898 <xQueueGenericSend+0xd4>
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	2b02      	cmp	r3, #2
 800b896:	d129      	bne.n	800b8ec <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b898:	683a      	ldr	r2, [r7, #0]
 800b89a:	68b9      	ldr	r1, [r7, #8]
 800b89c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b89e:	f000 fc5e 	bl	800c15e <prvCopyDataToQueue>
 800b8a2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d010      	beq.n	800b8ce <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ae:	3324      	adds	r3, #36	; 0x24
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f001 fb4b 	bl	800cf4c <xTaskRemoveFromEventList>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d013      	beq.n	800b8e4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b8bc:	4b3f      	ldr	r3, [pc, #252]	; (800b9bc <xQueueGenericSend+0x1f8>)
 800b8be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8c2:	601a      	str	r2, [r3, #0]
 800b8c4:	f3bf 8f4f 	dsb	sy
 800b8c8:	f3bf 8f6f 	isb	sy
 800b8cc:	e00a      	b.n	800b8e4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d007      	beq.n	800b8e4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b8d4:	4b39      	ldr	r3, [pc, #228]	; (800b9bc <xQueueGenericSend+0x1f8>)
 800b8d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8da:	601a      	str	r2, [r3, #0]
 800b8dc:	f3bf 8f4f 	dsb	sy
 800b8e0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b8e4:	f002 fb7e 	bl	800dfe4 <vPortExitCritical>
				return pdPASS;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	e063      	b.n	800b9b4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d103      	bne.n	800b8fa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b8f2:	f002 fb77 	bl	800dfe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	e05c      	b.n	800b9b4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d106      	bne.n	800b90e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b900:	f107 0314 	add.w	r3, r7, #20
 800b904:	4618      	mov	r0, r3
 800b906:	f001 fb85 	bl	800d014 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b90a:	2301      	movs	r3, #1
 800b90c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b90e:	f002 fb69 	bl	800dfe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b912:	f001 f8f1 	bl	800caf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b916:	f002 fb35 	bl	800df84 <vPortEnterCritical>
 800b91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b920:	b25b      	sxtb	r3, r3
 800b922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b926:	d103      	bne.n	800b930 <xQueueGenericSend+0x16c>
 800b928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92a:	2200      	movs	r2, #0
 800b92c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b932:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b936:	b25b      	sxtb	r3, r3
 800b938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b93c:	d103      	bne.n	800b946 <xQueueGenericSend+0x182>
 800b93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b940:	2200      	movs	r2, #0
 800b942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b946:	f002 fb4d 	bl	800dfe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b94a:	1d3a      	adds	r2, r7, #4
 800b94c:	f107 0314 	add.w	r3, r7, #20
 800b950:	4611      	mov	r1, r2
 800b952:	4618      	mov	r0, r3
 800b954:	f001 fb74 	bl	800d040 <xTaskCheckForTimeOut>
 800b958:	4603      	mov	r3, r0
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d124      	bne.n	800b9a8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b95e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b960:	f000 fcf5 	bl	800c34e <prvIsQueueFull>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d018      	beq.n	800b99c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96c:	3310      	adds	r3, #16
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	4611      	mov	r1, r2
 800b972:	4618      	mov	r0, r3
 800b974:	f001 fa9a 	bl	800ceac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b978:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b97a:	f000 fc80 	bl	800c27e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b97e:	f001 f8c9 	bl	800cb14 <xTaskResumeAll>
 800b982:	4603      	mov	r3, r0
 800b984:	2b00      	cmp	r3, #0
 800b986:	f47f af7c 	bne.w	800b882 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b98a:	4b0c      	ldr	r3, [pc, #48]	; (800b9bc <xQueueGenericSend+0x1f8>)
 800b98c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b990:	601a      	str	r2, [r3, #0]
 800b992:	f3bf 8f4f 	dsb	sy
 800b996:	f3bf 8f6f 	isb	sy
 800b99a:	e772      	b.n	800b882 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b99c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b99e:	f000 fc6e 	bl	800c27e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b9a2:	f001 f8b7 	bl	800cb14 <xTaskResumeAll>
 800b9a6:	e76c      	b.n	800b882 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b9a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9aa:	f000 fc68 	bl	800c27e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b9ae:	f001 f8b1 	bl	800cb14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b9b2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3738      	adds	r7, #56	; 0x38
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	e000ed04 	.word	0xe000ed04

0800b9c0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b090      	sub	sp, #64	; 0x40
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	607a      	str	r2, [r7, #4]
 800b9cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d10a      	bne.n	800b9ee <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9dc:	f383 8811 	msr	BASEPRI, r3
 800b9e0:	f3bf 8f6f 	isb	sy
 800b9e4:	f3bf 8f4f 	dsb	sy
 800b9e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b9ea:	bf00      	nop
 800b9ec:	e7fe      	b.n	800b9ec <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d103      	bne.n	800b9fc <xQueueGenericSendFromISR+0x3c>
 800b9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d101      	bne.n	800ba00 <xQueueGenericSendFromISR+0x40>
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e000      	b.n	800ba02 <xQueueGenericSendFromISR+0x42>
 800ba00:	2300      	movs	r3, #0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10a      	bne.n	800ba1c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ba06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0a:	f383 8811 	msr	BASEPRI, r3
 800ba0e:	f3bf 8f6f 	isb	sy
 800ba12:	f3bf 8f4f 	dsb	sy
 800ba16:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba18:	bf00      	nop
 800ba1a:	e7fe      	b.n	800ba1a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	d103      	bne.n	800ba2a <xQueueGenericSendFromISR+0x6a>
 800ba22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d101      	bne.n	800ba2e <xQueueGenericSendFromISR+0x6e>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e000      	b.n	800ba30 <xQueueGenericSendFromISR+0x70>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d10a      	bne.n	800ba4a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ba34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba38:	f383 8811 	msr	BASEPRI, r3
 800ba3c:	f3bf 8f6f 	isb	sy
 800ba40:	f3bf 8f4f 	dsb	sy
 800ba44:	623b      	str	r3, [r7, #32]
}
 800ba46:	bf00      	nop
 800ba48:	e7fe      	b.n	800ba48 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba4a:	f002 fb7d 	bl	800e148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ba4e:	f3ef 8211 	mrs	r2, BASEPRI
 800ba52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba56:	f383 8811 	msr	BASEPRI, r3
 800ba5a:	f3bf 8f6f 	isb	sy
 800ba5e:	f3bf 8f4f 	dsb	sy
 800ba62:	61fa      	str	r2, [r7, #28]
 800ba64:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ba66:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba68:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d302      	bcc.n	800ba7c <xQueueGenericSendFromISR+0xbc>
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d12f      	bne.n	800badc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba8c:	683a      	ldr	r2, [r7, #0]
 800ba8e:	68b9      	ldr	r1, [r7, #8]
 800ba90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ba92:	f000 fb64 	bl	800c15e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ba9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba9e:	d112      	bne.n	800bac6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800baa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d016      	beq.n	800bad6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800baa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baaa:	3324      	adds	r3, #36	; 0x24
 800baac:	4618      	mov	r0, r3
 800baae:	f001 fa4d 	bl	800cf4c <xTaskRemoveFromEventList>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00e      	beq.n	800bad6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d00b      	beq.n	800bad6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2201      	movs	r2, #1
 800bac2:	601a      	str	r2, [r3, #0]
 800bac4:	e007      	b.n	800bad6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bac6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800baca:	3301      	adds	r3, #1
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	b25a      	sxtb	r2, r3
 800bad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bad6:	2301      	movs	r3, #1
 800bad8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800bada:	e001      	b.n	800bae0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800badc:	2300      	movs	r3, #0
 800bade:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bae2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800baea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800baec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3740      	adds	r7, #64	; 0x40
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b08e      	sub	sp, #56	; 0x38
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
 800bafe:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d10a      	bne.n	800bb20 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb0e:	f383 8811 	msr	BASEPRI, r3
 800bb12:	f3bf 8f6f 	isb	sy
 800bb16:	f3bf 8f4f 	dsb	sy
 800bb1a:	623b      	str	r3, [r7, #32]
}
 800bb1c:	bf00      	nop
 800bb1e:	e7fe      	b.n	800bb1e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d00a      	beq.n	800bb3e <xQueueGiveFromISR+0x48>
	__asm volatile
 800bb28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2c:	f383 8811 	msr	BASEPRI, r3
 800bb30:	f3bf 8f6f 	isb	sy
 800bb34:	f3bf 8f4f 	dsb	sy
 800bb38:	61fb      	str	r3, [r7, #28]
}
 800bb3a:	bf00      	nop
 800bb3c:	e7fe      	b.n	800bb3c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d103      	bne.n	800bb4e <xQueueGiveFromISR+0x58>
 800bb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d101      	bne.n	800bb52 <xQueueGiveFromISR+0x5c>
 800bb4e:	2301      	movs	r3, #1
 800bb50:	e000      	b.n	800bb54 <xQueueGiveFromISR+0x5e>
 800bb52:	2300      	movs	r3, #0
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10a      	bne.n	800bb6e <xQueueGiveFromISR+0x78>
	__asm volatile
 800bb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5c:	f383 8811 	msr	BASEPRI, r3
 800bb60:	f3bf 8f6f 	isb	sy
 800bb64:	f3bf 8f4f 	dsb	sy
 800bb68:	61bb      	str	r3, [r7, #24]
}
 800bb6a:	bf00      	nop
 800bb6c:	e7fe      	b.n	800bb6c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb6e:	f002 faeb 	bl	800e148 <vPortValidateInterruptPriority>
	__asm volatile
 800bb72:	f3ef 8211 	mrs	r2, BASEPRI
 800bb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	617a      	str	r2, [r7, #20]
 800bb88:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bb8a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bb94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d22b      	bcs.n	800bbf6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbaa:	1c5a      	adds	r2, r3, #1
 800bbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbae:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bbb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bbb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbb8:	d112      	bne.n	800bbe0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d016      	beq.n	800bbf0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc4:	3324      	adds	r3, #36	; 0x24
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f001 f9c0 	bl	800cf4c <xTaskRemoveFromEventList>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00e      	beq.n	800bbf0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00b      	beq.n	800bbf0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	601a      	str	r2, [r3, #0]
 800bbde:	e007      	b.n	800bbf0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bbe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bbe4:	3301      	adds	r3, #1
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	b25a      	sxtb	r2, r3
 800bbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	637b      	str	r3, [r7, #52]	; 0x34
 800bbf4:	e001      	b.n	800bbfa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	637b      	str	r3, [r7, #52]	; 0x34
 800bbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f383 8811 	msr	BASEPRI, r3
}
 800bc04:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3738      	adds	r7, #56	; 0x38
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b08c      	sub	sp, #48	; 0x30
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10a      	bne.n	800bc40 <xQueueReceive+0x30>
	__asm volatile
 800bc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2e:	f383 8811 	msr	BASEPRI, r3
 800bc32:	f3bf 8f6f 	isb	sy
 800bc36:	f3bf 8f4f 	dsb	sy
 800bc3a:	623b      	str	r3, [r7, #32]
}
 800bc3c:	bf00      	nop
 800bc3e:	e7fe      	b.n	800bc3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d103      	bne.n	800bc4e <xQueueReceive+0x3e>
 800bc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d101      	bne.n	800bc52 <xQueueReceive+0x42>
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e000      	b.n	800bc54 <xQueueReceive+0x44>
 800bc52:	2300      	movs	r3, #0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d10a      	bne.n	800bc6e <xQueueReceive+0x5e>
	__asm volatile
 800bc58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5c:	f383 8811 	msr	BASEPRI, r3
 800bc60:	f3bf 8f6f 	isb	sy
 800bc64:	f3bf 8f4f 	dsb	sy
 800bc68:	61fb      	str	r3, [r7, #28]
}
 800bc6a:	bf00      	nop
 800bc6c:	e7fe      	b.n	800bc6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc6e:	f001 fb2f 	bl	800d2d0 <xTaskGetSchedulerState>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d102      	bne.n	800bc7e <xQueueReceive+0x6e>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d101      	bne.n	800bc82 <xQueueReceive+0x72>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e000      	b.n	800bc84 <xQueueReceive+0x74>
 800bc82:	2300      	movs	r3, #0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d10a      	bne.n	800bc9e <xQueueReceive+0x8e>
	__asm volatile
 800bc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc8c:	f383 8811 	msr	BASEPRI, r3
 800bc90:	f3bf 8f6f 	isb	sy
 800bc94:	f3bf 8f4f 	dsb	sy
 800bc98:	61bb      	str	r3, [r7, #24]
}
 800bc9a:	bf00      	nop
 800bc9c:	e7fe      	b.n	800bc9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc9e:	f002 f971 	bl	800df84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bca6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d01f      	beq.n	800bcee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bcae:	68b9      	ldr	r1, [r7, #8]
 800bcb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcb2:	f000 fabe 	bl	800c232 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb8:	1e5a      	subs	r2, r3, #1
 800bcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc0:	691b      	ldr	r3, [r3, #16]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d00f      	beq.n	800bce6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc8:	3310      	adds	r3, #16
 800bcca:	4618      	mov	r0, r3
 800bccc:	f001 f93e 	bl	800cf4c <xTaskRemoveFromEventList>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d007      	beq.n	800bce6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bcd6:	4b3d      	ldr	r3, [pc, #244]	; (800bdcc <xQueueReceive+0x1bc>)
 800bcd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bce6:	f002 f97d 	bl	800dfe4 <vPortExitCritical>
				return pdPASS;
 800bcea:	2301      	movs	r3, #1
 800bcec:	e069      	b.n	800bdc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d103      	bne.n	800bcfc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bcf4:	f002 f976 	bl	800dfe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	e062      	b.n	800bdc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d106      	bne.n	800bd10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd02:	f107 0310 	add.w	r3, r7, #16
 800bd06:	4618      	mov	r0, r3
 800bd08:	f001 f984 	bl	800d014 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd10:	f002 f968 	bl	800dfe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd14:	f000 fef0 	bl	800caf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd18:	f002 f934 	bl	800df84 <vPortEnterCritical>
 800bd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd22:	b25b      	sxtb	r3, r3
 800bd24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd28:	d103      	bne.n	800bd32 <xQueueReceive+0x122>
 800bd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd38:	b25b      	sxtb	r3, r3
 800bd3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd3e:	d103      	bne.n	800bd48 <xQueueReceive+0x138>
 800bd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd42:	2200      	movs	r2, #0
 800bd44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd48:	f002 f94c 	bl	800dfe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd4c:	1d3a      	adds	r2, r7, #4
 800bd4e:	f107 0310 	add.w	r3, r7, #16
 800bd52:	4611      	mov	r1, r2
 800bd54:	4618      	mov	r0, r3
 800bd56:	f001 f973 	bl	800d040 <xTaskCheckForTimeOut>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d123      	bne.n	800bda8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd62:	f000 fade 	bl	800c322 <prvIsQueueEmpty>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d017      	beq.n	800bd9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd6e:	3324      	adds	r3, #36	; 0x24
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	4611      	mov	r1, r2
 800bd74:	4618      	mov	r0, r3
 800bd76:	f001 f899 	bl	800ceac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd7c:	f000 fa7f 	bl	800c27e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd80:	f000 fec8 	bl	800cb14 <xTaskResumeAll>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d189      	bne.n	800bc9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800bd8a:	4b10      	ldr	r3, [pc, #64]	; (800bdcc <xQueueReceive+0x1bc>)
 800bd8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd90:	601a      	str	r2, [r3, #0]
 800bd92:	f3bf 8f4f 	dsb	sy
 800bd96:	f3bf 8f6f 	isb	sy
 800bd9a:	e780      	b.n	800bc9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bd9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd9e:	f000 fa6e 	bl	800c27e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bda2:	f000 feb7 	bl	800cb14 <xTaskResumeAll>
 800bda6:	e77a      	b.n	800bc9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bda8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdaa:	f000 fa68 	bl	800c27e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdae:	f000 feb1 	bl	800cb14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdb4:	f000 fab5 	bl	800c322 <prvIsQueueEmpty>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f43f af6f 	beq.w	800bc9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bdc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3730      	adds	r7, #48	; 0x30
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	e000ed04 	.word	0xe000ed04

0800bdd0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b08e      	sub	sp, #56	; 0x38
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bdda:	2300      	movs	r3, #0
 800bddc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bde2:	2300      	movs	r3, #0
 800bde4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10a      	bne.n	800be02 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf0:	f383 8811 	msr	BASEPRI, r3
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	f3bf 8f4f 	dsb	sy
 800bdfc:	623b      	str	r3, [r7, #32]
}
 800bdfe:	bf00      	nop
 800be00:	e7fe      	b.n	800be00 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00a      	beq.n	800be20 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800be0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	61fb      	str	r3, [r7, #28]
}
 800be1c:	bf00      	nop
 800be1e:	e7fe      	b.n	800be1e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be20:	f001 fa56 	bl	800d2d0 <xTaskGetSchedulerState>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d102      	bne.n	800be30 <xQueueSemaphoreTake+0x60>
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d101      	bne.n	800be34 <xQueueSemaphoreTake+0x64>
 800be30:	2301      	movs	r3, #1
 800be32:	e000      	b.n	800be36 <xQueueSemaphoreTake+0x66>
 800be34:	2300      	movs	r3, #0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10a      	bne.n	800be50 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800be3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3e:	f383 8811 	msr	BASEPRI, r3
 800be42:	f3bf 8f6f 	isb	sy
 800be46:	f3bf 8f4f 	dsb	sy
 800be4a:	61bb      	str	r3, [r7, #24]
}
 800be4c:	bf00      	nop
 800be4e:	e7fe      	b.n	800be4e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be50:	f002 f898 	bl	800df84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800be54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be58:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800be5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d024      	beq.n	800beaa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800be60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be62:	1e5a      	subs	r2, r3, #1
 800be64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be66:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d104      	bne.n	800be7a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800be70:	f001 fba4 	bl	800d5bc <pvTaskIncrementMutexHeldCount>
 800be74:	4602      	mov	r2, r0
 800be76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be78:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be7c:	691b      	ldr	r3, [r3, #16]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00f      	beq.n	800bea2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be84:	3310      	adds	r3, #16
 800be86:	4618      	mov	r0, r3
 800be88:	f001 f860 	bl	800cf4c <xTaskRemoveFromEventList>
 800be8c:	4603      	mov	r3, r0
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d007      	beq.n	800bea2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be92:	4b54      	ldr	r3, [pc, #336]	; (800bfe4 <xQueueSemaphoreTake+0x214>)
 800be94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be98:	601a      	str	r2, [r3, #0]
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bea2:	f002 f89f 	bl	800dfe4 <vPortExitCritical>
				return pdPASS;
 800bea6:	2301      	movs	r3, #1
 800bea8:	e097      	b.n	800bfda <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d111      	bne.n	800bed4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800beb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d00a      	beq.n	800becc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800beb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beba:	f383 8811 	msr	BASEPRI, r3
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	f3bf 8f4f 	dsb	sy
 800bec6:	617b      	str	r3, [r7, #20]
}
 800bec8:	bf00      	nop
 800beca:	e7fe      	b.n	800beca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800becc:	f002 f88a 	bl	800dfe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bed0:	2300      	movs	r3, #0
 800bed2:	e082      	b.n	800bfda <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d106      	bne.n	800bee8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800beda:	f107 030c 	add.w	r3, r7, #12
 800bede:	4618      	mov	r0, r3
 800bee0:	f001 f898 	bl	800d014 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bee4:	2301      	movs	r3, #1
 800bee6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bee8:	f002 f87c 	bl	800dfe4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800beec:	f000 fe04 	bl	800caf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bef0:	f002 f848 	bl	800df84 <vPortEnterCritical>
 800bef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800befa:	b25b      	sxtb	r3, r3
 800befc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf00:	d103      	bne.n	800bf0a <xQueueSemaphoreTake+0x13a>
 800bf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf04:	2200      	movs	r2, #0
 800bf06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf10:	b25b      	sxtb	r3, r3
 800bf12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf16:	d103      	bne.n	800bf20 <xQueueSemaphoreTake+0x150>
 800bf18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf20:	f002 f860 	bl	800dfe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf24:	463a      	mov	r2, r7
 800bf26:	f107 030c 	add.w	r3, r7, #12
 800bf2a:	4611      	mov	r1, r2
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f001 f887 	bl	800d040 <xTaskCheckForTimeOut>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d132      	bne.n	800bf9e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf3a:	f000 f9f2 	bl	800c322 <prvIsQueueEmpty>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d026      	beq.n	800bf92 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d109      	bne.n	800bf60 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bf4c:	f002 f81a 	bl	800df84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	4618      	mov	r0, r3
 800bf56:	f001 f9d9 	bl	800d30c <xTaskPriorityInherit>
 800bf5a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bf5c:	f002 f842 	bl	800dfe4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf62:	3324      	adds	r3, #36	; 0x24
 800bf64:	683a      	ldr	r2, [r7, #0]
 800bf66:	4611      	mov	r1, r2
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f000 ff9f 	bl	800ceac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf70:	f000 f985 	bl	800c27e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf74:	f000 fdce 	bl	800cb14 <xTaskResumeAll>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f47f af68 	bne.w	800be50 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bf80:	4b18      	ldr	r3, [pc, #96]	; (800bfe4 <xQueueSemaphoreTake+0x214>)
 800bf82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf86:	601a      	str	r2, [r3, #0]
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	e75e      	b.n	800be50 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bf92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf94:	f000 f973 	bl	800c27e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf98:	f000 fdbc 	bl	800cb14 <xTaskResumeAll>
 800bf9c:	e758      	b.n	800be50 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bf9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfa0:	f000 f96d 	bl	800c27e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfa4:	f000 fdb6 	bl	800cb14 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bfa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfaa:	f000 f9ba 	bl	800c322 <prvIsQueueEmpty>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f43f af4d 	beq.w	800be50 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00d      	beq.n	800bfd8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bfbc:	f001 ffe2 	bl	800df84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bfc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfc2:	f000 f8b4 	bl	800c12e <prvGetDisinheritPriorityAfterTimeout>
 800bfc6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f001 fa72 	bl	800d4b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bfd4:	f002 f806 	bl	800dfe4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bfd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3738      	adds	r7, #56	; 0x38
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	e000ed04 	.word	0xe000ed04

0800bfe8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b08e      	sub	sp, #56	; 0x38
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d10a      	bne.n	800c014 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c002:	f383 8811 	msr	BASEPRI, r3
 800c006:	f3bf 8f6f 	isb	sy
 800c00a:	f3bf 8f4f 	dsb	sy
 800c00e:	623b      	str	r3, [r7, #32]
}
 800c010:	bf00      	nop
 800c012:	e7fe      	b.n	800c012 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d103      	bne.n	800c022 <xQueueReceiveFromISR+0x3a>
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d101      	bne.n	800c026 <xQueueReceiveFromISR+0x3e>
 800c022:	2301      	movs	r3, #1
 800c024:	e000      	b.n	800c028 <xQueueReceiveFromISR+0x40>
 800c026:	2300      	movs	r3, #0
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d10a      	bne.n	800c042 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c030:	f383 8811 	msr	BASEPRI, r3
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	61fb      	str	r3, [r7, #28]
}
 800c03e:	bf00      	nop
 800c040:	e7fe      	b.n	800c040 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c042:	f002 f881 	bl	800e148 <vPortValidateInterruptPriority>
	__asm volatile
 800c046:	f3ef 8211 	mrs	r2, BASEPRI
 800c04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c04e:	f383 8811 	msr	BASEPRI, r3
 800c052:	f3bf 8f6f 	isb	sy
 800c056:	f3bf 8f4f 	dsb	sy
 800c05a:	61ba      	str	r2, [r7, #24]
 800c05c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c05e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c060:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c066:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d02f      	beq.n	800c0ce <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c078:	68b9      	ldr	r1, [r7, #8]
 800c07a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c07c:	f000 f8d9 	bl	800c232 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c082:	1e5a      	subs	r2, r3, #1
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c088:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c08c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c090:	d112      	bne.n	800c0b8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d016      	beq.n	800c0c8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09c:	3310      	adds	r3, #16
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f000 ff54 	bl	800cf4c <xTaskRemoveFromEventList>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d00e      	beq.n	800c0c8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00b      	beq.n	800c0c8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	601a      	str	r2, [r3, #0]
 800c0b6:	e007      	b.n	800c0c8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c0b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0bc:	3301      	adds	r3, #1
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	b25a      	sxtb	r2, r3
 800c0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	637b      	str	r3, [r7, #52]	; 0x34
 800c0cc:	e001      	b.n	800c0d2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	637b      	str	r3, [r7, #52]	; 0x34
 800c0d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	f383 8811 	msr	BASEPRI, r3
}
 800c0dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c0de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3738      	adds	r7, #56	; 0x38
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10a      	bne.n	800c110 <vQueueDelete+0x28>
	__asm volatile
 800c0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fe:	f383 8811 	msr	BASEPRI, r3
 800c102:	f3bf 8f6f 	isb	sy
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	60bb      	str	r3, [r7, #8]
}
 800c10c:	bf00      	nop
 800c10e:	e7fe      	b.n	800c10e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c110:	68f8      	ldr	r0, [r7, #12]
 800c112:	f000 f95f 	bl	800c3d4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d102      	bne.n	800c126 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f002 f91d 	bl	800e360 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c126:	bf00      	nop
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c12e:	b480      	push	{r7}
 800c130:	b085      	sub	sp, #20
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d006      	beq.n	800c14c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c148:	60fb      	str	r3, [r7, #12]
 800c14a:	e001      	b.n	800c150 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c14c:	2300      	movs	r3, #0
 800c14e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c150:	68fb      	ldr	r3, [r7, #12]
	}
 800c152:	4618      	mov	r0, r3
 800c154:	3714      	adds	r7, #20
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr

0800c15e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b086      	sub	sp, #24
 800c162:	af00      	add	r7, sp, #0
 800c164:	60f8      	str	r0, [r7, #12]
 800c166:	60b9      	str	r1, [r7, #8]
 800c168:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c16a:	2300      	movs	r3, #0
 800c16c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c172:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d10d      	bne.n	800c198 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d14d      	bne.n	800c220 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	4618      	mov	r0, r3
 800c18a:	f001 f927 	bl	800d3dc <xTaskPriorityDisinherit>
 800c18e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2200      	movs	r2, #0
 800c194:	609a      	str	r2, [r3, #8]
 800c196:	e043      	b.n	800c220 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d119      	bne.n	800c1d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	6858      	ldr	r0, [r3, #4]
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	68b9      	ldr	r1, [r7, #8]
 800c1aa:	f002 fb1a 	bl	800e7e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	685a      	ldr	r2, [r3, #4]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b6:	441a      	add	r2, r3
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	685a      	ldr	r2, [r3, #4]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d32b      	bcc.n	800c220 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	605a      	str	r2, [r3, #4]
 800c1d0:	e026      	b.n	800c220 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	68d8      	ldr	r0, [r3, #12]
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1da:	461a      	mov	r2, r3
 800c1dc:	68b9      	ldr	r1, [r7, #8]
 800c1de:	f002 fb00 	bl	800e7e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	68da      	ldr	r2, [r3, #12]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ea:	425b      	negs	r3, r3
 800c1ec:	441a      	add	r2, r3
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	68da      	ldr	r2, [r3, #12]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	429a      	cmp	r2, r3
 800c1fc:	d207      	bcs.n	800c20e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	689a      	ldr	r2, [r3, #8]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c206:	425b      	negs	r3, r3
 800c208:	441a      	add	r2, r3
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2b02      	cmp	r3, #2
 800c212:	d105      	bne.n	800c220 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d002      	beq.n	800c220 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	3b01      	subs	r3, #1
 800c21e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	1c5a      	adds	r2, r3, #1
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c228:	697b      	ldr	r3, [r7, #20]
}
 800c22a:	4618      	mov	r0, r3
 800c22c:	3718      	adds	r7, #24
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}

0800c232 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c232:	b580      	push	{r7, lr}
 800c234:	b082      	sub	sp, #8
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
 800c23a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c240:	2b00      	cmp	r3, #0
 800c242:	d018      	beq.n	800c276 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	68da      	ldr	r2, [r3, #12]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c24c:	441a      	add	r2, r3
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	68da      	ldr	r2, [r3, #12]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d303      	bcc.n	800c266 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	68d9      	ldr	r1, [r3, #12]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c26e:	461a      	mov	r2, r3
 800c270:	6838      	ldr	r0, [r7, #0]
 800c272:	f002 fab6 	bl	800e7e2 <memcpy>
	}
}
 800c276:	bf00      	nop
 800c278:	3708      	adds	r7, #8
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}

0800c27e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c27e:	b580      	push	{r7, lr}
 800c280:	b084      	sub	sp, #16
 800c282:	af00      	add	r7, sp, #0
 800c284:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c286:	f001 fe7d 	bl	800df84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c290:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c292:	e011      	b.n	800c2b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d012      	beq.n	800c2c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	3324      	adds	r3, #36	; 0x24
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f000 fe53 	bl	800cf4c <xTaskRemoveFromEventList>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d001      	beq.n	800c2b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2ac:	f000 ff2a 	bl	800d104 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c2b0:	7bfb      	ldrb	r3, [r7, #15]
 800c2b2:	3b01      	subs	r3, #1
 800c2b4:	b2db      	uxtb	r3, r3
 800c2b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	dce9      	bgt.n	800c294 <prvUnlockQueue+0x16>
 800c2c0:	e000      	b.n	800c2c4 <prvUnlockQueue+0x46>
					break;
 800c2c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	22ff      	movs	r2, #255	; 0xff
 800c2c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c2cc:	f001 fe8a 	bl	800dfe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c2d0:	f001 fe58 	bl	800df84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2dc:	e011      	b.n	800c302 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d012      	beq.n	800c30c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	3310      	adds	r3, #16
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f000 fe2e 	bl	800cf4c <xTaskRemoveFromEventList>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d001      	beq.n	800c2fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c2f6:	f000 ff05 	bl	800d104 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c2fa:	7bbb      	ldrb	r3, [r7, #14]
 800c2fc:	3b01      	subs	r3, #1
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c302:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c306:	2b00      	cmp	r3, #0
 800c308:	dce9      	bgt.n	800c2de <prvUnlockQueue+0x60>
 800c30a:	e000      	b.n	800c30e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c30c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	22ff      	movs	r2, #255	; 0xff
 800c312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c316:	f001 fe65 	bl	800dfe4 <vPortExitCritical>
}
 800c31a:	bf00      	nop
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c322:	b580      	push	{r7, lr}
 800c324:	b084      	sub	sp, #16
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c32a:	f001 fe2b 	bl	800df84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c332:	2b00      	cmp	r3, #0
 800c334:	d102      	bne.n	800c33c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c336:	2301      	movs	r3, #1
 800c338:	60fb      	str	r3, [r7, #12]
 800c33a:	e001      	b.n	800c340 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c33c:	2300      	movs	r3, #0
 800c33e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c340:	f001 fe50 	bl	800dfe4 <vPortExitCritical>

	return xReturn;
 800c344:	68fb      	ldr	r3, [r7, #12]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c34e:	b580      	push	{r7, lr}
 800c350:	b084      	sub	sp, #16
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c356:	f001 fe15 	bl	800df84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c362:	429a      	cmp	r2, r3
 800c364:	d102      	bne.n	800c36c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c366:	2301      	movs	r3, #1
 800c368:	60fb      	str	r3, [r7, #12]
 800c36a:	e001      	b.n	800c370 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c36c:	2300      	movs	r3, #0
 800c36e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c370:	f001 fe38 	bl	800dfe4 <vPortExitCritical>

	return xReturn;
 800c374:	68fb      	ldr	r3, [r7, #12]
}
 800c376:	4618      	mov	r0, r3
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
	...

0800c380 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c380:	b480      	push	{r7}
 800c382:	b085      	sub	sp, #20
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c38a:	2300      	movs	r3, #0
 800c38c:	60fb      	str	r3, [r7, #12]
 800c38e:	e014      	b.n	800c3ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c390:	4a0f      	ldr	r2, [pc, #60]	; (800c3d0 <vQueueAddToRegistry+0x50>)
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d10b      	bne.n	800c3b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c39c:	490c      	ldr	r1, [pc, #48]	; (800c3d0 <vQueueAddToRegistry+0x50>)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	683a      	ldr	r2, [r7, #0]
 800c3a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c3a6:	4a0a      	ldr	r2, [pc, #40]	; (800c3d0 <vQueueAddToRegistry+0x50>)
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	00db      	lsls	r3, r3, #3
 800c3ac:	4413      	add	r3, r2
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c3b2:	e006      	b.n	800c3c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	60fb      	str	r3, [r7, #12]
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2b07      	cmp	r3, #7
 800c3be:	d9e7      	bls.n	800c390 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c3c0:	bf00      	nop
 800c3c2:	bf00      	nop
 800c3c4:	3714      	adds	r7, #20
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr
 800c3ce:	bf00      	nop
 800c3d0:	24001100 	.word	0x24001100

0800c3d4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c3dc:	2300      	movs	r3, #0
 800c3de:	60fb      	str	r3, [r7, #12]
 800c3e0:	e016      	b.n	800c410 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c3e2:	4a10      	ldr	r2, [pc, #64]	; (800c424 <vQueueUnregisterQueue+0x50>)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	00db      	lsls	r3, r3, #3
 800c3e8:	4413      	add	r3, r2
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	429a      	cmp	r2, r3
 800c3f0:	d10b      	bne.n	800c40a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c3f2:	4a0c      	ldr	r2, [pc, #48]	; (800c424 <vQueueUnregisterQueue+0x50>)
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c3fc:	4a09      	ldr	r2, [pc, #36]	; (800c424 <vQueueUnregisterQueue+0x50>)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	00db      	lsls	r3, r3, #3
 800c402:	4413      	add	r3, r2
 800c404:	2200      	movs	r2, #0
 800c406:	605a      	str	r2, [r3, #4]
				break;
 800c408:	e006      	b.n	800c418 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	3301      	adds	r3, #1
 800c40e:	60fb      	str	r3, [r7, #12]
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2b07      	cmp	r3, #7
 800c414:	d9e5      	bls.n	800c3e2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c416:	bf00      	nop
 800c418:	bf00      	nop
 800c41a:	3714      	adds	r7, #20
 800c41c:	46bd      	mov	sp, r7
 800c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c422:	4770      	bx	lr
 800c424:	24001100 	.word	0x24001100

0800c428 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b086      	sub	sp, #24
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c438:	f001 fda4 	bl	800df84 <vPortEnterCritical>
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c442:	b25b      	sxtb	r3, r3
 800c444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c448:	d103      	bne.n	800c452 <vQueueWaitForMessageRestricted+0x2a>
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	2200      	movs	r2, #0
 800c44e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c458:	b25b      	sxtb	r3, r3
 800c45a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c45e:	d103      	bne.n	800c468 <vQueueWaitForMessageRestricted+0x40>
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	2200      	movs	r2, #0
 800c464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c468:	f001 fdbc 	bl	800dfe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c470:	2b00      	cmp	r3, #0
 800c472:	d106      	bne.n	800c482 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	3324      	adds	r3, #36	; 0x24
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	68b9      	ldr	r1, [r7, #8]
 800c47c:	4618      	mov	r0, r3
 800c47e:	f000 fd39 	bl	800cef4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c482:	6978      	ldr	r0, [r7, #20]
 800c484:	f7ff fefb 	bl	800c27e <prvUnlockQueue>
	}
 800c488:	bf00      	nop
 800c48a:	3718      	adds	r7, #24
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c490:	b580      	push	{r7, lr}
 800c492:	b08e      	sub	sp, #56	; 0x38
 800c494:	af04      	add	r7, sp, #16
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	607a      	str	r2, [r7, #4]
 800c49c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10a      	bne.n	800c4ba <xTaskCreateStatic+0x2a>
	__asm volatile
 800c4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a8:	f383 8811 	msr	BASEPRI, r3
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	623b      	str	r3, [r7, #32]
}
 800c4b6:	bf00      	nop
 800c4b8:	e7fe      	b.n	800c4b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d10a      	bne.n	800c4d6 <xTaskCreateStatic+0x46>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	61fb      	str	r3, [r7, #28]
}
 800c4d2:	bf00      	nop
 800c4d4:	e7fe      	b.n	800c4d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c4d6:	23bc      	movs	r3, #188	; 0xbc
 800c4d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	2bbc      	cmp	r3, #188	; 0xbc
 800c4de:	d00a      	beq.n	800c4f6 <xTaskCreateStatic+0x66>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	61bb      	str	r3, [r7, #24]
}
 800c4f2:	bf00      	nop
 800c4f4:	e7fe      	b.n	800c4f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c4f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d01e      	beq.n	800c53c <xTaskCreateStatic+0xac>
 800c4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c500:	2b00      	cmp	r3, #0
 800c502:	d01b      	beq.n	800c53c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c506:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c50c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c510:	2202      	movs	r2, #2
 800c512:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c516:	2300      	movs	r3, #0
 800c518:	9303      	str	r3, [sp, #12]
 800c51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51c:	9302      	str	r3, [sp, #8]
 800c51e:	f107 0314 	add.w	r3, r7, #20
 800c522:	9301      	str	r3, [sp, #4]
 800c524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c526:	9300      	str	r3, [sp, #0]
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	68b9      	ldr	r1, [r7, #8]
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f000 f850 	bl	800c5d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c536:	f000 f8f3 	bl	800c720 <prvAddNewTaskToReadyList>
 800c53a:	e001      	b.n	800c540 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c53c:	2300      	movs	r3, #0
 800c53e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c540:	697b      	ldr	r3, [r7, #20]
	}
 800c542:	4618      	mov	r0, r3
 800c544:	3728      	adds	r7, #40	; 0x28
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b08c      	sub	sp, #48	; 0x30
 800c54e:	af04      	add	r7, sp, #16
 800c550:	60f8      	str	r0, [r7, #12]
 800c552:	60b9      	str	r1, [r7, #8]
 800c554:	603b      	str	r3, [r7, #0]
 800c556:	4613      	mov	r3, r2
 800c558:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c55a:	88fb      	ldrh	r3, [r7, #6]
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	4618      	mov	r0, r3
 800c560:	f001 fe32 	bl	800e1c8 <pvPortMalloc>
 800c564:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c566:	697b      	ldr	r3, [r7, #20]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00e      	beq.n	800c58a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c56c:	20bc      	movs	r0, #188	; 0xbc
 800c56e:	f001 fe2b 	bl	800e1c8 <pvPortMalloc>
 800c572:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c574:	69fb      	ldr	r3, [r7, #28]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d003      	beq.n	800c582 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	697a      	ldr	r2, [r7, #20]
 800c57e:	631a      	str	r2, [r3, #48]	; 0x30
 800c580:	e005      	b.n	800c58e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c582:	6978      	ldr	r0, [r7, #20]
 800c584:	f001 feec 	bl	800e360 <vPortFree>
 800c588:	e001      	b.n	800c58e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c58a:	2300      	movs	r3, #0
 800c58c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d017      	beq.n	800c5c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c594:	69fb      	ldr	r3, [r7, #28]
 800c596:	2200      	movs	r2, #0
 800c598:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c59c:	88fa      	ldrh	r2, [r7, #6]
 800c59e:	2300      	movs	r3, #0
 800c5a0:	9303      	str	r3, [sp, #12]
 800c5a2:	69fb      	ldr	r3, [r7, #28]
 800c5a4:	9302      	str	r3, [sp, #8]
 800c5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a8:	9301      	str	r3, [sp, #4]
 800c5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ac:	9300      	str	r3, [sp, #0]
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	68b9      	ldr	r1, [r7, #8]
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	f000 f80e 	bl	800c5d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c5b8:	69f8      	ldr	r0, [r7, #28]
 800c5ba:	f000 f8b1 	bl	800c720 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	61bb      	str	r3, [r7, #24]
 800c5c2:	e002      	b.n	800c5ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c5c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c5ca:	69bb      	ldr	r3, [r7, #24]
	}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3720      	adds	r7, #32
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b088      	sub	sp, #32
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
 800c5e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	21a5      	movs	r1, #165	; 0xa5
 800c5ee:	f002 f906 	bl	800e7fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5f6:	6879      	ldr	r1, [r7, #4]
 800c5f8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c5fc:	440b      	add	r3, r1
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	4413      	add	r3, r2
 800c602:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c604:	69bb      	ldr	r3, [r7, #24]
 800c606:	f023 0307 	bic.w	r3, r3, #7
 800c60a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	f003 0307 	and.w	r3, r3, #7
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00a      	beq.n	800c62c <prvInitialiseNewTask+0x58>
	__asm volatile
 800c616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61a:	f383 8811 	msr	BASEPRI, r3
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f3bf 8f4f 	dsb	sy
 800c626:	617b      	str	r3, [r7, #20]
}
 800c628:	bf00      	nop
 800c62a:	e7fe      	b.n	800c62a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d01f      	beq.n	800c672 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c632:	2300      	movs	r3, #0
 800c634:	61fb      	str	r3, [r7, #28]
 800c636:	e012      	b.n	800c65e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c638:	68ba      	ldr	r2, [r7, #8]
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	4413      	add	r3, r2
 800c63e:	7819      	ldrb	r1, [r3, #0]
 800c640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	4413      	add	r3, r2
 800c646:	3334      	adds	r3, #52	; 0x34
 800c648:	460a      	mov	r2, r1
 800c64a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	69fb      	ldr	r3, [r7, #28]
 800c650:	4413      	add	r3, r2
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d006      	beq.n	800c666 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	3301      	adds	r3, #1
 800c65c:	61fb      	str	r3, [r7, #28]
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	2b0f      	cmp	r3, #15
 800c662:	d9e9      	bls.n	800c638 <prvInitialiseNewTask+0x64>
 800c664:	e000      	b.n	800c668 <prvInitialiseNewTask+0x94>
			{
				break;
 800c666:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66a:	2200      	movs	r2, #0
 800c66c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c670:	e003      	b.n	800c67a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c674:	2200      	movs	r2, #0
 800c676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67c:	2b37      	cmp	r3, #55	; 0x37
 800c67e:	d901      	bls.n	800c684 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c680:	2337      	movs	r3, #55	; 0x37
 800c682:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c688:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c68c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c68e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c692:	2200      	movs	r2, #0
 800c694:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c698:	3304      	adds	r3, #4
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7fe fe0a 	bl	800b2b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a2:	3318      	adds	r3, #24
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7fe fe05 	bl	800b2b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d2:	3354      	adds	r3, #84	; 0x54
 800c6d4:	2260      	movs	r2, #96	; 0x60
 800c6d6:	2100      	movs	r1, #0
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f002 f890 	bl	800e7fe <memset>
 800c6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e0:	4a0c      	ldr	r2, [pc, #48]	; (800c714 <prvInitialiseNewTask+0x140>)
 800c6e2:	659a      	str	r2, [r3, #88]	; 0x58
 800c6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e6:	4a0c      	ldr	r2, [pc, #48]	; (800c718 <prvInitialiseNewTask+0x144>)
 800c6e8:	65da      	str	r2, [r3, #92]	; 0x5c
 800c6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ec:	4a0b      	ldr	r2, [pc, #44]	; (800c71c <prvInitialiseNewTask+0x148>)
 800c6ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c6f0:	683a      	ldr	r2, [r7, #0]
 800c6f2:	68f9      	ldr	r1, [r7, #12]
 800c6f4:	69b8      	ldr	r0, [r7, #24]
 800c6f6:	f001 fb17 	bl	800dd28 <pxPortInitialiseStack>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c702:	2b00      	cmp	r3, #0
 800c704:	d002      	beq.n	800c70c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c70a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c70c:	bf00      	nop
 800c70e:	3720      	adds	r7, #32
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	0800ff28 	.word	0x0800ff28
 800c718:	0800ff48 	.word	0x0800ff48
 800c71c:	0800ff08 	.word	0x0800ff08

0800c720 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c728:	f001 fc2c 	bl	800df84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c72c:	4b2d      	ldr	r3, [pc, #180]	; (800c7e4 <prvAddNewTaskToReadyList+0xc4>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	3301      	adds	r3, #1
 800c732:	4a2c      	ldr	r2, [pc, #176]	; (800c7e4 <prvAddNewTaskToReadyList+0xc4>)
 800c734:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c736:	4b2c      	ldr	r3, [pc, #176]	; (800c7e8 <prvAddNewTaskToReadyList+0xc8>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d109      	bne.n	800c752 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c73e:	4a2a      	ldr	r2, [pc, #168]	; (800c7e8 <prvAddNewTaskToReadyList+0xc8>)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c744:	4b27      	ldr	r3, [pc, #156]	; (800c7e4 <prvAddNewTaskToReadyList+0xc4>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b01      	cmp	r3, #1
 800c74a:	d110      	bne.n	800c76e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c74c:	f000 fcfe 	bl	800d14c <prvInitialiseTaskLists>
 800c750:	e00d      	b.n	800c76e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c752:	4b26      	ldr	r3, [pc, #152]	; (800c7ec <prvAddNewTaskToReadyList+0xcc>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d109      	bne.n	800c76e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c75a:	4b23      	ldr	r3, [pc, #140]	; (800c7e8 <prvAddNewTaskToReadyList+0xc8>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c764:	429a      	cmp	r2, r3
 800c766:	d802      	bhi.n	800c76e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c768:	4a1f      	ldr	r2, [pc, #124]	; (800c7e8 <prvAddNewTaskToReadyList+0xc8>)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c76e:	4b20      	ldr	r3, [pc, #128]	; (800c7f0 <prvAddNewTaskToReadyList+0xd0>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	3301      	adds	r3, #1
 800c774:	4a1e      	ldr	r2, [pc, #120]	; (800c7f0 <prvAddNewTaskToReadyList+0xd0>)
 800c776:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c778:	4b1d      	ldr	r3, [pc, #116]	; (800c7f0 <prvAddNewTaskToReadyList+0xd0>)
 800c77a:	681a      	ldr	r2, [r3, #0]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c784:	4b1b      	ldr	r3, [pc, #108]	; (800c7f4 <prvAddNewTaskToReadyList+0xd4>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d903      	bls.n	800c794 <prvAddNewTaskToReadyList+0x74>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c790:	4a18      	ldr	r2, [pc, #96]	; (800c7f4 <prvAddNewTaskToReadyList+0xd4>)
 800c792:	6013      	str	r3, [r2, #0]
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c798:	4613      	mov	r3, r2
 800c79a:	009b      	lsls	r3, r3, #2
 800c79c:	4413      	add	r3, r2
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	4a15      	ldr	r2, [pc, #84]	; (800c7f8 <prvAddNewTaskToReadyList+0xd8>)
 800c7a2:	441a      	add	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	3304      	adds	r3, #4
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	4610      	mov	r0, r2
 800c7ac:	f7fe fd8f 	bl	800b2ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c7b0:	f001 fc18 	bl	800dfe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c7b4:	4b0d      	ldr	r3, [pc, #52]	; (800c7ec <prvAddNewTaskToReadyList+0xcc>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d00e      	beq.n	800c7da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c7bc:	4b0a      	ldr	r3, [pc, #40]	; (800c7e8 <prvAddNewTaskToReadyList+0xc8>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d207      	bcs.n	800c7da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c7ca:	4b0c      	ldr	r3, [pc, #48]	; (800c7fc <prvAddNewTaskToReadyList+0xdc>)
 800c7cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7d0:	601a      	str	r2, [r3, #0]
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7da:	bf00      	nop
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	24001614 	.word	0x24001614
 800c7e8:	24001140 	.word	0x24001140
 800c7ec:	24001620 	.word	0x24001620
 800c7f0:	24001630 	.word	0x24001630
 800c7f4:	2400161c 	.word	0x2400161c
 800c7f8:	24001144 	.word	0x24001144
 800c7fc:	e000ed04 	.word	0xe000ed04

0800c800 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c800:	b580      	push	{r7, lr}
 800c802:	b084      	sub	sp, #16
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c808:	f001 fbbc 	bl	800df84 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d102      	bne.n	800c818 <vTaskDelete+0x18>
 800c812:	4b2c      	ldr	r3, [pc, #176]	; (800c8c4 <vTaskDelete+0xc4>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	e000      	b.n	800c81a <vTaskDelete+0x1a>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	3304      	adds	r3, #4
 800c820:	4618      	mov	r0, r3
 800c822:	f7fe fdb1 	bl	800b388 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d004      	beq.n	800c838 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	3318      	adds	r3, #24
 800c832:	4618      	mov	r0, r3
 800c834:	f7fe fda8 	bl	800b388 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c838:	4b23      	ldr	r3, [pc, #140]	; (800c8c8 <vTaskDelete+0xc8>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	3301      	adds	r3, #1
 800c83e:	4a22      	ldr	r2, [pc, #136]	; (800c8c8 <vTaskDelete+0xc8>)
 800c840:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c842:	4b20      	ldr	r3, [pc, #128]	; (800c8c4 <vTaskDelete+0xc4>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d10b      	bne.n	800c864 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	3304      	adds	r3, #4
 800c850:	4619      	mov	r1, r3
 800c852:	481e      	ldr	r0, [pc, #120]	; (800c8cc <vTaskDelete+0xcc>)
 800c854:	f7fe fd3b 	bl	800b2ce <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c858:	4b1d      	ldr	r3, [pc, #116]	; (800c8d0 <vTaskDelete+0xd0>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	3301      	adds	r3, #1
 800c85e:	4a1c      	ldr	r2, [pc, #112]	; (800c8d0 <vTaskDelete+0xd0>)
 800c860:	6013      	str	r3, [r2, #0]
 800c862:	e009      	b.n	800c878 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c864:	4b1b      	ldr	r3, [pc, #108]	; (800c8d4 <vTaskDelete+0xd4>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	3b01      	subs	r3, #1
 800c86a:	4a1a      	ldr	r2, [pc, #104]	; (800c8d4 <vTaskDelete+0xd4>)
 800c86c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	f000 fcda 	bl	800d228 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c874:	f000 fd0c 	bl	800d290 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800c878:	f001 fbb4 	bl	800dfe4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c87c:	4b16      	ldr	r3, [pc, #88]	; (800c8d8 <vTaskDelete+0xd8>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d01b      	beq.n	800c8bc <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800c884:	4b0f      	ldr	r3, [pc, #60]	; (800c8c4 <vTaskDelete+0xc4>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	68fa      	ldr	r2, [r7, #12]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d116      	bne.n	800c8bc <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c88e:	4b13      	ldr	r3, [pc, #76]	; (800c8dc <vTaskDelete+0xdc>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d00a      	beq.n	800c8ac <vTaskDelete+0xac>
	__asm volatile
 800c896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89a:	f383 8811 	msr	BASEPRI, r3
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	60bb      	str	r3, [r7, #8]
}
 800c8a8:	bf00      	nop
 800c8aa:	e7fe      	b.n	800c8aa <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800c8ac:	4b0c      	ldr	r3, [pc, #48]	; (800c8e0 <vTaskDelete+0xe0>)
 800c8ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8b2:	601a      	str	r2, [r3, #0]
 800c8b4:	f3bf 8f4f 	dsb	sy
 800c8b8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c8bc:	bf00      	nop
 800c8be:	3710      	adds	r7, #16
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	24001140 	.word	0x24001140
 800c8c8:	24001630 	.word	0x24001630
 800c8cc:	240015e8 	.word	0x240015e8
 800c8d0:	240015fc 	.word	0x240015fc
 800c8d4:	24001614 	.word	0x24001614
 800c8d8:	24001620 	.word	0x24001620
 800c8dc:	2400163c 	.word	0x2400163c
 800c8e0:	e000ed04 	.word	0xe000ed04

0800c8e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d017      	beq.n	800c926 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c8f6:	4b13      	ldr	r3, [pc, #76]	; (800c944 <vTaskDelay+0x60>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00a      	beq.n	800c914 <vTaskDelay+0x30>
	__asm volatile
 800c8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c902:	f383 8811 	msr	BASEPRI, r3
 800c906:	f3bf 8f6f 	isb	sy
 800c90a:	f3bf 8f4f 	dsb	sy
 800c90e:	60bb      	str	r3, [r7, #8]
}
 800c910:	bf00      	nop
 800c912:	e7fe      	b.n	800c912 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c914:	f000 f8f0 	bl	800caf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c918:	2100      	movs	r1, #0
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 fe62 	bl	800d5e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c920:	f000 f8f8 	bl	800cb14 <xTaskResumeAll>
 800c924:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d107      	bne.n	800c93c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c92c:	4b06      	ldr	r3, [pc, #24]	; (800c948 <vTaskDelay+0x64>)
 800c92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c932:	601a      	str	r2, [r3, #0]
 800c934:	f3bf 8f4f 	dsb	sy
 800c938:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c93c:	bf00      	nop
 800c93e:	3710      	adds	r7, #16
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	2400163c 	.word	0x2400163c
 800c948:	e000ed04 	.word	0xe000ed04

0800c94c <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b088      	sub	sp, #32
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d10a      	bne.n	800c974 <eTaskGetState+0x28>
	__asm volatile
 800c95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	60bb      	str	r3, [r7, #8]
}
 800c970:	bf00      	nop
 800c972:	e7fe      	b.n	800c972 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800c974:	4b23      	ldr	r3, [pc, #140]	; (800ca04 <eTaskGetState+0xb8>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	69ba      	ldr	r2, [r7, #24]
 800c97a:	429a      	cmp	r2, r3
 800c97c:	d102      	bne.n	800c984 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800c97e:	2300      	movs	r3, #0
 800c980:	77fb      	strb	r3, [r7, #31]
 800c982:	e03a      	b.n	800c9fa <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800c984:	f001 fafe 	bl	800df84 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800c988:	69bb      	ldr	r3, [r7, #24]
 800c98a:	695b      	ldr	r3, [r3, #20]
 800c98c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800c98e:	4b1e      	ldr	r3, [pc, #120]	; (800ca08 <eTaskGetState+0xbc>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800c994:	4b1d      	ldr	r3, [pc, #116]	; (800ca0c <eTaskGetState+0xc0>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800c99a:	f001 fb23 	bl	800dfe4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800c99e:	697a      	ldr	r2, [r7, #20]
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d003      	beq.n	800c9ae <eTaskGetState+0x62>
 800c9a6:	697a      	ldr	r2, [r7, #20]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d102      	bne.n	800c9b4 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800c9ae:	2302      	movs	r3, #2
 800c9b0:	77fb      	strb	r3, [r7, #31]
 800c9b2:	e022      	b.n	800c9fa <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	4a16      	ldr	r2, [pc, #88]	; (800ca10 <eTaskGetState+0xc4>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d112      	bne.n	800c9e2 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d10b      	bne.n	800c9dc <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c9c4:	69bb      	ldr	r3, [r7, #24]
 800c9c6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d102      	bne.n	800c9d6 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800c9d0:	2302      	movs	r3, #2
 800c9d2:	77fb      	strb	r3, [r7, #31]
 800c9d4:	e011      	b.n	800c9fa <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800c9d6:	2303      	movs	r3, #3
 800c9d8:	77fb      	strb	r3, [r7, #31]
 800c9da:	e00e      	b.n	800c9fa <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800c9dc:	2302      	movs	r3, #2
 800c9de:	77fb      	strb	r3, [r7, #31]
 800c9e0:	e00b      	b.n	800c9fa <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	4a0b      	ldr	r2, [pc, #44]	; (800ca14 <eTaskGetState+0xc8>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d002      	beq.n	800c9f0 <eTaskGetState+0xa4>
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d102      	bne.n	800c9f6 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800c9f0:	2304      	movs	r3, #4
 800c9f2:	77fb      	strb	r3, [r7, #31]
 800c9f4:	e001      	b.n	800c9fa <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800c9fa:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3720      	adds	r7, #32
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	24001140 	.word	0x24001140
 800ca08:	240015cc 	.word	0x240015cc
 800ca0c:	240015d0 	.word	0x240015d0
 800ca10:	24001600 	.word	0x24001600
 800ca14:	240015e8 	.word	0x240015e8

0800ca18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b08a      	sub	sp, #40	; 0x28
 800ca1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ca22:	2300      	movs	r3, #0
 800ca24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ca26:	463a      	mov	r2, r7
 800ca28:	1d39      	adds	r1, r7, #4
 800ca2a:	f107 0308 	add.w	r3, r7, #8
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fe fbec 	bl	800b20c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ca34:	6839      	ldr	r1, [r7, #0]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	9202      	str	r2, [sp, #8]
 800ca3c:	9301      	str	r3, [sp, #4]
 800ca3e:	2300      	movs	r3, #0
 800ca40:	9300      	str	r3, [sp, #0]
 800ca42:	2300      	movs	r3, #0
 800ca44:	460a      	mov	r2, r1
 800ca46:	4924      	ldr	r1, [pc, #144]	; (800cad8 <vTaskStartScheduler+0xc0>)
 800ca48:	4824      	ldr	r0, [pc, #144]	; (800cadc <vTaskStartScheduler+0xc4>)
 800ca4a:	f7ff fd21 	bl	800c490 <xTaskCreateStatic>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	4a23      	ldr	r2, [pc, #140]	; (800cae0 <vTaskStartScheduler+0xc8>)
 800ca52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ca54:	4b22      	ldr	r3, [pc, #136]	; (800cae0 <vTaskStartScheduler+0xc8>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d002      	beq.n	800ca62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	617b      	str	r3, [r7, #20]
 800ca60:	e001      	b.n	800ca66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ca62:	2300      	movs	r3, #0
 800ca64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d102      	bne.n	800ca72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ca6c:	f000 fe0e 	bl	800d68c <xTimerCreateTimerTask>
 800ca70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d11b      	bne.n	800cab0 <vTaskStartScheduler+0x98>
	__asm volatile
 800ca78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca7c:	f383 8811 	msr	BASEPRI, r3
 800ca80:	f3bf 8f6f 	isb	sy
 800ca84:	f3bf 8f4f 	dsb	sy
 800ca88:	613b      	str	r3, [r7, #16]
}
 800ca8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ca8c:	4b15      	ldr	r3, [pc, #84]	; (800cae4 <vTaskStartScheduler+0xcc>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	3354      	adds	r3, #84	; 0x54
 800ca92:	4a15      	ldr	r2, [pc, #84]	; (800cae8 <vTaskStartScheduler+0xd0>)
 800ca94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ca96:	4b15      	ldr	r3, [pc, #84]	; (800caec <vTaskStartScheduler+0xd4>)
 800ca98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ca9e:	4b14      	ldr	r3, [pc, #80]	; (800caf0 <vTaskStartScheduler+0xd8>)
 800caa0:	2201      	movs	r2, #1
 800caa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800caa4:	4b13      	ldr	r3, [pc, #76]	; (800caf4 <vTaskStartScheduler+0xdc>)
 800caa6:	2200      	movs	r2, #0
 800caa8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800caaa:	f001 f9c9 	bl	800de40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800caae:	e00e      	b.n	800cace <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cab6:	d10a      	bne.n	800cace <vTaskStartScheduler+0xb6>
	__asm volatile
 800cab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cabc:	f383 8811 	msr	BASEPRI, r3
 800cac0:	f3bf 8f6f 	isb	sy
 800cac4:	f3bf 8f4f 	dsb	sy
 800cac8:	60fb      	str	r3, [r7, #12]
}
 800caca:	bf00      	nop
 800cacc:	e7fe      	b.n	800cacc <vTaskStartScheduler+0xb4>
}
 800cace:	bf00      	nop
 800cad0:	3718      	adds	r7, #24
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	0800fd88 	.word	0x0800fd88
 800cadc:	0800d11d 	.word	0x0800d11d
 800cae0:	24001638 	.word	0x24001638
 800cae4:	24001140 	.word	0x24001140
 800cae8:	24000018 	.word	0x24000018
 800caec:	24001634 	.word	0x24001634
 800caf0:	24001620 	.word	0x24001620
 800caf4:	24001618 	.word	0x24001618

0800caf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800caf8:	b480      	push	{r7}
 800cafa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cafc:	4b04      	ldr	r3, [pc, #16]	; (800cb10 <vTaskSuspendAll+0x18>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	3301      	adds	r3, #1
 800cb02:	4a03      	ldr	r2, [pc, #12]	; (800cb10 <vTaskSuspendAll+0x18>)
 800cb04:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cb06:	bf00      	nop
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr
 800cb10:	2400163c 	.word	0x2400163c

0800cb14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cb22:	4b42      	ldr	r3, [pc, #264]	; (800cc2c <xTaskResumeAll+0x118>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d10a      	bne.n	800cb40 <xTaskResumeAll+0x2c>
	__asm volatile
 800cb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb2e:	f383 8811 	msr	BASEPRI, r3
 800cb32:	f3bf 8f6f 	isb	sy
 800cb36:	f3bf 8f4f 	dsb	sy
 800cb3a:	603b      	str	r3, [r7, #0]
}
 800cb3c:	bf00      	nop
 800cb3e:	e7fe      	b.n	800cb3e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cb40:	f001 fa20 	bl	800df84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cb44:	4b39      	ldr	r3, [pc, #228]	; (800cc2c <xTaskResumeAll+0x118>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	3b01      	subs	r3, #1
 800cb4a:	4a38      	ldr	r2, [pc, #224]	; (800cc2c <xTaskResumeAll+0x118>)
 800cb4c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb4e:	4b37      	ldr	r3, [pc, #220]	; (800cc2c <xTaskResumeAll+0x118>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d162      	bne.n	800cc1c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cb56:	4b36      	ldr	r3, [pc, #216]	; (800cc30 <xTaskResumeAll+0x11c>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d05e      	beq.n	800cc1c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb5e:	e02f      	b.n	800cbc0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb60:	4b34      	ldr	r3, [pc, #208]	; (800cc34 <xTaskResumeAll+0x120>)
 800cb62:	68db      	ldr	r3, [r3, #12]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	3318      	adds	r3, #24
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7fe fc0b 	bl	800b388 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	3304      	adds	r3, #4
 800cb76:	4618      	mov	r0, r3
 800cb78:	f7fe fc06 	bl	800b388 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb80:	4b2d      	ldr	r3, [pc, #180]	; (800cc38 <xTaskResumeAll+0x124>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	429a      	cmp	r2, r3
 800cb86:	d903      	bls.n	800cb90 <xTaskResumeAll+0x7c>
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb8c:	4a2a      	ldr	r2, [pc, #168]	; (800cc38 <xTaskResumeAll+0x124>)
 800cb8e:	6013      	str	r3, [r2, #0]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb94:	4613      	mov	r3, r2
 800cb96:	009b      	lsls	r3, r3, #2
 800cb98:	4413      	add	r3, r2
 800cb9a:	009b      	lsls	r3, r3, #2
 800cb9c:	4a27      	ldr	r2, [pc, #156]	; (800cc3c <xTaskResumeAll+0x128>)
 800cb9e:	441a      	add	r2, r3
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	3304      	adds	r3, #4
 800cba4:	4619      	mov	r1, r3
 800cba6:	4610      	mov	r0, r2
 800cba8:	f7fe fb91 	bl	800b2ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbb0:	4b23      	ldr	r3, [pc, #140]	; (800cc40 <xTaskResumeAll+0x12c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d302      	bcc.n	800cbc0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cbba:	4b22      	ldr	r3, [pc, #136]	; (800cc44 <xTaskResumeAll+0x130>)
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cbc0:	4b1c      	ldr	r3, [pc, #112]	; (800cc34 <xTaskResumeAll+0x120>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1cb      	bne.n	800cb60 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d001      	beq.n	800cbd2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cbce:	f000 fb5f 	bl	800d290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cbd2:	4b1d      	ldr	r3, [pc, #116]	; (800cc48 <xTaskResumeAll+0x134>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d010      	beq.n	800cc00 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cbde:	f000 f847 	bl	800cc70 <xTaskIncrementTick>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d002      	beq.n	800cbee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cbe8:	4b16      	ldr	r3, [pc, #88]	; (800cc44 <xTaskResumeAll+0x130>)
 800cbea:	2201      	movs	r2, #1
 800cbec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	3b01      	subs	r3, #1
 800cbf2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d1f1      	bne.n	800cbde <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800cbfa:	4b13      	ldr	r3, [pc, #76]	; (800cc48 <xTaskResumeAll+0x134>)
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cc00:	4b10      	ldr	r3, [pc, #64]	; (800cc44 <xTaskResumeAll+0x130>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d009      	beq.n	800cc1c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cc0c:	4b0f      	ldr	r3, [pc, #60]	; (800cc4c <xTaskResumeAll+0x138>)
 800cc0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc12:	601a      	str	r2, [r3, #0]
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cc1c:	f001 f9e2 	bl	800dfe4 <vPortExitCritical>

	return xAlreadyYielded;
 800cc20:	68bb      	ldr	r3, [r7, #8]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	2400163c 	.word	0x2400163c
 800cc30:	24001614 	.word	0x24001614
 800cc34:	240015d4 	.word	0x240015d4
 800cc38:	2400161c 	.word	0x2400161c
 800cc3c:	24001144 	.word	0x24001144
 800cc40:	24001140 	.word	0x24001140
 800cc44:	24001628 	.word	0x24001628
 800cc48:	24001624 	.word	0x24001624
 800cc4c:	e000ed04 	.word	0xe000ed04

0800cc50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cc56:	4b05      	ldr	r3, [pc, #20]	; (800cc6c <xTaskGetTickCount+0x1c>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cc5c:	687b      	ldr	r3, [r7, #4]
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	370c      	adds	r7, #12
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	24001618 	.word	0x24001618

0800cc70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b086      	sub	sp, #24
 800cc74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc76:	2300      	movs	r3, #0
 800cc78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc7a:	4b4f      	ldr	r3, [pc, #316]	; (800cdb8 <xTaskIncrementTick+0x148>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	f040 808f 	bne.w	800cda2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc84:	4b4d      	ldr	r3, [pc, #308]	; (800cdbc <xTaskIncrementTick+0x14c>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cc8c:	4a4b      	ldr	r2, [pc, #300]	; (800cdbc <xTaskIncrementTick+0x14c>)
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d120      	bne.n	800ccda <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc98:	4b49      	ldr	r3, [pc, #292]	; (800cdc0 <xTaskIncrementTick+0x150>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d00a      	beq.n	800ccb8 <xTaskIncrementTick+0x48>
	__asm volatile
 800cca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca6:	f383 8811 	msr	BASEPRI, r3
 800ccaa:	f3bf 8f6f 	isb	sy
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	603b      	str	r3, [r7, #0]
}
 800ccb4:	bf00      	nop
 800ccb6:	e7fe      	b.n	800ccb6 <xTaskIncrementTick+0x46>
 800ccb8:	4b41      	ldr	r3, [pc, #260]	; (800cdc0 <xTaskIncrementTick+0x150>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	60fb      	str	r3, [r7, #12]
 800ccbe:	4b41      	ldr	r3, [pc, #260]	; (800cdc4 <xTaskIncrementTick+0x154>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4a3f      	ldr	r2, [pc, #252]	; (800cdc0 <xTaskIncrementTick+0x150>)
 800ccc4:	6013      	str	r3, [r2, #0]
 800ccc6:	4a3f      	ldr	r2, [pc, #252]	; (800cdc4 <xTaskIncrementTick+0x154>)
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	6013      	str	r3, [r2, #0]
 800cccc:	4b3e      	ldr	r3, [pc, #248]	; (800cdc8 <xTaskIncrementTick+0x158>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	4a3d      	ldr	r2, [pc, #244]	; (800cdc8 <xTaskIncrementTick+0x158>)
 800ccd4:	6013      	str	r3, [r2, #0]
 800ccd6:	f000 fadb 	bl	800d290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ccda:	4b3c      	ldr	r3, [pc, #240]	; (800cdcc <xTaskIncrementTick+0x15c>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	693a      	ldr	r2, [r7, #16]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d349      	bcc.n	800cd78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cce4:	4b36      	ldr	r3, [pc, #216]	; (800cdc0 <xTaskIncrementTick+0x150>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d104      	bne.n	800ccf8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccee:	4b37      	ldr	r3, [pc, #220]	; (800cdcc <xTaskIncrementTick+0x15c>)
 800ccf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccf4:	601a      	str	r2, [r3, #0]
					break;
 800ccf6:	e03f      	b.n	800cd78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccf8:	4b31      	ldr	r3, [pc, #196]	; (800cdc0 <xTaskIncrementTick+0x150>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	68db      	ldr	r3, [r3, #12]
 800ccfe:	68db      	ldr	r3, [r3, #12]
 800cd00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	685b      	ldr	r3, [r3, #4]
 800cd06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cd08:	693a      	ldr	r2, [r7, #16]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d203      	bcs.n	800cd18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cd10:	4a2e      	ldr	r2, [pc, #184]	; (800cdcc <xTaskIncrementTick+0x15c>)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cd16:	e02f      	b.n	800cd78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	3304      	adds	r3, #4
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fe fb33 	bl	800b388 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d004      	beq.n	800cd34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	3318      	adds	r3, #24
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fe fb2a 	bl	800b388 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cd34:	68bb      	ldr	r3, [r7, #8]
 800cd36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd38:	4b25      	ldr	r3, [pc, #148]	; (800cdd0 <xTaskIncrementTick+0x160>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d903      	bls.n	800cd48 <xTaskIncrementTick+0xd8>
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd44:	4a22      	ldr	r2, [pc, #136]	; (800cdd0 <xTaskIncrementTick+0x160>)
 800cd46:	6013      	str	r3, [r2, #0]
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	009b      	lsls	r3, r3, #2
 800cd50:	4413      	add	r3, r2
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	4a1f      	ldr	r2, [pc, #124]	; (800cdd4 <xTaskIncrementTick+0x164>)
 800cd56:	441a      	add	r2, r3
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	3304      	adds	r3, #4
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	4610      	mov	r0, r2
 800cd60:	f7fe fab5 	bl	800b2ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd68:	4b1b      	ldr	r3, [pc, #108]	; (800cdd8 <xTaskIncrementTick+0x168>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d3b8      	bcc.n	800cce4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cd72:	2301      	movs	r3, #1
 800cd74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd76:	e7b5      	b.n	800cce4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd78:	4b17      	ldr	r3, [pc, #92]	; (800cdd8 <xTaskIncrementTick+0x168>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd7e:	4915      	ldr	r1, [pc, #84]	; (800cdd4 <xTaskIncrementTick+0x164>)
 800cd80:	4613      	mov	r3, r2
 800cd82:	009b      	lsls	r3, r3, #2
 800cd84:	4413      	add	r3, r2
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	440b      	add	r3, r1
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d901      	bls.n	800cd94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800cd90:	2301      	movs	r3, #1
 800cd92:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cd94:	4b11      	ldr	r3, [pc, #68]	; (800cddc <xTaskIncrementTick+0x16c>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d007      	beq.n	800cdac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	617b      	str	r3, [r7, #20]
 800cda0:	e004      	b.n	800cdac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cda2:	4b0f      	ldr	r3, [pc, #60]	; (800cde0 <xTaskIncrementTick+0x170>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	3301      	adds	r3, #1
 800cda8:	4a0d      	ldr	r2, [pc, #52]	; (800cde0 <xTaskIncrementTick+0x170>)
 800cdaa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cdac:	697b      	ldr	r3, [r7, #20]
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3718      	adds	r7, #24
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}
 800cdb6:	bf00      	nop
 800cdb8:	2400163c 	.word	0x2400163c
 800cdbc:	24001618 	.word	0x24001618
 800cdc0:	240015cc 	.word	0x240015cc
 800cdc4:	240015d0 	.word	0x240015d0
 800cdc8:	2400162c 	.word	0x2400162c
 800cdcc:	24001634 	.word	0x24001634
 800cdd0:	2400161c 	.word	0x2400161c
 800cdd4:	24001144 	.word	0x24001144
 800cdd8:	24001140 	.word	0x24001140
 800cddc:	24001628 	.word	0x24001628
 800cde0:	24001624 	.word	0x24001624

0800cde4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cde4:	b480      	push	{r7}
 800cde6:	b085      	sub	sp, #20
 800cde8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cdea:	4b2a      	ldr	r3, [pc, #168]	; (800ce94 <vTaskSwitchContext+0xb0>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d003      	beq.n	800cdfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cdf2:	4b29      	ldr	r3, [pc, #164]	; (800ce98 <vTaskSwitchContext+0xb4>)
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cdf8:	e046      	b.n	800ce88 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cdfa:	4b27      	ldr	r3, [pc, #156]	; (800ce98 <vTaskSwitchContext+0xb4>)
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce00:	4b26      	ldr	r3, [pc, #152]	; (800ce9c <vTaskSwitchContext+0xb8>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	60fb      	str	r3, [r7, #12]
 800ce06:	e010      	b.n	800ce2a <vTaskSwitchContext+0x46>
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10a      	bne.n	800ce24 <vTaskSwitchContext+0x40>
	__asm volatile
 800ce0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce12:	f383 8811 	msr	BASEPRI, r3
 800ce16:	f3bf 8f6f 	isb	sy
 800ce1a:	f3bf 8f4f 	dsb	sy
 800ce1e:	607b      	str	r3, [r7, #4]
}
 800ce20:	bf00      	nop
 800ce22:	e7fe      	b.n	800ce22 <vTaskSwitchContext+0x3e>
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	3b01      	subs	r3, #1
 800ce28:	60fb      	str	r3, [r7, #12]
 800ce2a:	491d      	ldr	r1, [pc, #116]	; (800cea0 <vTaskSwitchContext+0xbc>)
 800ce2c:	68fa      	ldr	r2, [r7, #12]
 800ce2e:	4613      	mov	r3, r2
 800ce30:	009b      	lsls	r3, r3, #2
 800ce32:	4413      	add	r3, r2
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	440b      	add	r3, r1
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d0e4      	beq.n	800ce08 <vTaskSwitchContext+0x24>
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	4613      	mov	r3, r2
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	4413      	add	r3, r2
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	4a15      	ldr	r2, [pc, #84]	; (800cea0 <vTaskSwitchContext+0xbc>)
 800ce4a:	4413      	add	r3, r2
 800ce4c:	60bb      	str	r3, [r7, #8]
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	685a      	ldr	r2, [r3, #4]
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	605a      	str	r2, [r3, #4]
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	685a      	ldr	r2, [r3, #4]
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	3308      	adds	r3, #8
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d104      	bne.n	800ce6e <vTaskSwitchContext+0x8a>
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	685a      	ldr	r2, [r3, #4]
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	605a      	str	r2, [r3, #4]
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	4a0b      	ldr	r2, [pc, #44]	; (800cea4 <vTaskSwitchContext+0xc0>)
 800ce76:	6013      	str	r3, [r2, #0]
 800ce78:	4a08      	ldr	r2, [pc, #32]	; (800ce9c <vTaskSwitchContext+0xb8>)
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ce7e:	4b09      	ldr	r3, [pc, #36]	; (800cea4 <vTaskSwitchContext+0xc0>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	3354      	adds	r3, #84	; 0x54
 800ce84:	4a08      	ldr	r2, [pc, #32]	; (800cea8 <vTaskSwitchContext+0xc4>)
 800ce86:	6013      	str	r3, [r2, #0]
}
 800ce88:	bf00      	nop
 800ce8a:	3714      	adds	r7, #20
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr
 800ce94:	2400163c 	.word	0x2400163c
 800ce98:	24001628 	.word	0x24001628
 800ce9c:	2400161c 	.word	0x2400161c
 800cea0:	24001144 	.word	0x24001144
 800cea4:	24001140 	.word	0x24001140
 800cea8:	24000018 	.word	0x24000018

0800ceac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10a      	bne.n	800ced2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec0:	f383 8811 	msr	BASEPRI, r3
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	f3bf 8f4f 	dsb	sy
 800cecc:	60fb      	str	r3, [r7, #12]
}
 800cece:	bf00      	nop
 800ced0:	e7fe      	b.n	800ced0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ced2:	4b07      	ldr	r3, [pc, #28]	; (800cef0 <vTaskPlaceOnEventList+0x44>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	3318      	adds	r3, #24
 800ced8:	4619      	mov	r1, r3
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f7fe fa1b 	bl	800b316 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cee0:	2101      	movs	r1, #1
 800cee2:	6838      	ldr	r0, [r7, #0]
 800cee4:	f000 fb7e 	bl	800d5e4 <prvAddCurrentTaskToDelayedList>
}
 800cee8:	bf00      	nop
 800ceea:	3710      	adds	r7, #16
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	24001140 	.word	0x24001140

0800cef4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b086      	sub	sp, #24
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d10a      	bne.n	800cf1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cf06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf0a:	f383 8811 	msr	BASEPRI, r3
 800cf0e:	f3bf 8f6f 	isb	sy
 800cf12:	f3bf 8f4f 	dsb	sy
 800cf16:	617b      	str	r3, [r7, #20]
}
 800cf18:	bf00      	nop
 800cf1a:	e7fe      	b.n	800cf1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cf1c:	4b0a      	ldr	r3, [pc, #40]	; (800cf48 <vTaskPlaceOnEventListRestricted+0x54>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	3318      	adds	r3, #24
 800cf22:	4619      	mov	r1, r3
 800cf24:	68f8      	ldr	r0, [r7, #12]
 800cf26:	f7fe f9d2 	bl	800b2ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d002      	beq.n	800cf36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cf30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cf36:	6879      	ldr	r1, [r7, #4]
 800cf38:	68b8      	ldr	r0, [r7, #8]
 800cf3a:	f000 fb53 	bl	800d5e4 <prvAddCurrentTaskToDelayedList>
	}
 800cf3e:	bf00      	nop
 800cf40:	3718      	adds	r7, #24
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	24001140 	.word	0x24001140

0800cf4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b086      	sub	sp, #24
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d10a      	bne.n	800cf78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf66:	f383 8811 	msr	BASEPRI, r3
 800cf6a:	f3bf 8f6f 	isb	sy
 800cf6e:	f3bf 8f4f 	dsb	sy
 800cf72:	60fb      	str	r3, [r7, #12]
}
 800cf74:	bf00      	nop
 800cf76:	e7fe      	b.n	800cf76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	3318      	adds	r3, #24
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7fe fa03 	bl	800b388 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf82:	4b1e      	ldr	r3, [pc, #120]	; (800cffc <xTaskRemoveFromEventList+0xb0>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d11d      	bne.n	800cfc6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	3304      	adds	r3, #4
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7fe f9fa 	bl	800b388 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf98:	4b19      	ldr	r3, [pc, #100]	; (800d000 <xTaskRemoveFromEventList+0xb4>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d903      	bls.n	800cfa8 <xTaskRemoveFromEventList+0x5c>
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa4:	4a16      	ldr	r2, [pc, #88]	; (800d000 <xTaskRemoveFromEventList+0xb4>)
 800cfa6:	6013      	str	r3, [r2, #0]
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfac:	4613      	mov	r3, r2
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	4413      	add	r3, r2
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	4a13      	ldr	r2, [pc, #76]	; (800d004 <xTaskRemoveFromEventList+0xb8>)
 800cfb6:	441a      	add	r2, r3
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	3304      	adds	r3, #4
 800cfbc:	4619      	mov	r1, r3
 800cfbe:	4610      	mov	r0, r2
 800cfc0:	f7fe f985 	bl	800b2ce <vListInsertEnd>
 800cfc4:	e005      	b.n	800cfd2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	3318      	adds	r3, #24
 800cfca:	4619      	mov	r1, r3
 800cfcc:	480e      	ldr	r0, [pc, #56]	; (800d008 <xTaskRemoveFromEventList+0xbc>)
 800cfce:	f7fe f97e 	bl	800b2ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cfd2:	693b      	ldr	r3, [r7, #16]
 800cfd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd6:	4b0d      	ldr	r3, [pc, #52]	; (800d00c <xTaskRemoveFromEventList+0xc0>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d905      	bls.n	800cfec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cfe4:	4b0a      	ldr	r3, [pc, #40]	; (800d010 <xTaskRemoveFromEventList+0xc4>)
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	601a      	str	r2, [r3, #0]
 800cfea:	e001      	b.n	800cff0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cfec:	2300      	movs	r3, #0
 800cfee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cff0:	697b      	ldr	r3, [r7, #20]
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3718      	adds	r7, #24
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	2400163c 	.word	0x2400163c
 800d000:	2400161c 	.word	0x2400161c
 800d004:	24001144 	.word	0x24001144
 800d008:	240015d4 	.word	0x240015d4
 800d00c:	24001140 	.word	0x24001140
 800d010:	24001628 	.word	0x24001628

0800d014 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d01c:	4b06      	ldr	r3, [pc, #24]	; (800d038 <vTaskInternalSetTimeOutState+0x24>)
 800d01e:	681a      	ldr	r2, [r3, #0]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d024:	4b05      	ldr	r3, [pc, #20]	; (800d03c <vTaskInternalSetTimeOutState+0x28>)
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	605a      	str	r2, [r3, #4]
}
 800d02c:	bf00      	nop
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr
 800d038:	2400162c 	.word	0x2400162c
 800d03c:	24001618 	.word	0x24001618

0800d040 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b088      	sub	sp, #32
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d10a      	bne.n	800d066 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d054:	f383 8811 	msr	BASEPRI, r3
 800d058:	f3bf 8f6f 	isb	sy
 800d05c:	f3bf 8f4f 	dsb	sy
 800d060:	613b      	str	r3, [r7, #16]
}
 800d062:	bf00      	nop
 800d064:	e7fe      	b.n	800d064 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d10a      	bne.n	800d082 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d070:	f383 8811 	msr	BASEPRI, r3
 800d074:	f3bf 8f6f 	isb	sy
 800d078:	f3bf 8f4f 	dsb	sy
 800d07c:	60fb      	str	r3, [r7, #12]
}
 800d07e:	bf00      	nop
 800d080:	e7fe      	b.n	800d080 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d082:	f000 ff7f 	bl	800df84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d086:	4b1d      	ldr	r3, [pc, #116]	; (800d0fc <xTaskCheckForTimeOut+0xbc>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	69ba      	ldr	r2, [r7, #24]
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d09e:	d102      	bne.n	800d0a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	61fb      	str	r3, [r7, #28]
 800d0a4:	e023      	b.n	800d0ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	4b15      	ldr	r3, [pc, #84]	; (800d100 <xTaskCheckForTimeOut+0xc0>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d007      	beq.n	800d0c2 <xTaskCheckForTimeOut+0x82>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	69ba      	ldr	r2, [r7, #24]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d302      	bcc.n	800d0c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	61fb      	str	r3, [r7, #28]
 800d0c0:	e015      	b.n	800d0ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	697a      	ldr	r2, [r7, #20]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d20b      	bcs.n	800d0e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	1ad2      	subs	r2, r2, r3
 800d0d4:	683b      	ldr	r3, [r7, #0]
 800d0d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	f7ff ff9b 	bl	800d014 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	61fb      	str	r3, [r7, #28]
 800d0e2:	e004      	b.n	800d0ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d0ee:	f000 ff79 	bl	800dfe4 <vPortExitCritical>

	return xReturn;
 800d0f2:	69fb      	ldr	r3, [r7, #28]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3720      	adds	r7, #32
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	24001618 	.word	0x24001618
 800d100:	2400162c 	.word	0x2400162c

0800d104 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d104:	b480      	push	{r7}
 800d106:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d108:	4b03      	ldr	r3, [pc, #12]	; (800d118 <vTaskMissedYield+0x14>)
 800d10a:	2201      	movs	r2, #1
 800d10c:	601a      	str	r2, [r3, #0]
}
 800d10e:	bf00      	nop
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr
 800d118:	24001628 	.word	0x24001628

0800d11c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d124:	f000 f852 	bl	800d1cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d128:	4b06      	ldr	r3, [pc, #24]	; (800d144 <prvIdleTask+0x28>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d9f9      	bls.n	800d124 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d130:	4b05      	ldr	r3, [pc, #20]	; (800d148 <prvIdleTask+0x2c>)
 800d132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d136:	601a      	str	r2, [r3, #0]
 800d138:	f3bf 8f4f 	dsb	sy
 800d13c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d140:	e7f0      	b.n	800d124 <prvIdleTask+0x8>
 800d142:	bf00      	nop
 800d144:	24001144 	.word	0x24001144
 800d148:	e000ed04 	.word	0xe000ed04

0800d14c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d152:	2300      	movs	r3, #0
 800d154:	607b      	str	r3, [r7, #4]
 800d156:	e00c      	b.n	800d172 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	4613      	mov	r3, r2
 800d15c:	009b      	lsls	r3, r3, #2
 800d15e:	4413      	add	r3, r2
 800d160:	009b      	lsls	r3, r3, #2
 800d162:	4a12      	ldr	r2, [pc, #72]	; (800d1ac <prvInitialiseTaskLists+0x60>)
 800d164:	4413      	add	r3, r2
 800d166:	4618      	mov	r0, r3
 800d168:	f7fe f884 	bl	800b274 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	3301      	adds	r3, #1
 800d170:	607b      	str	r3, [r7, #4]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2b37      	cmp	r3, #55	; 0x37
 800d176:	d9ef      	bls.n	800d158 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d178:	480d      	ldr	r0, [pc, #52]	; (800d1b0 <prvInitialiseTaskLists+0x64>)
 800d17a:	f7fe f87b 	bl	800b274 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d17e:	480d      	ldr	r0, [pc, #52]	; (800d1b4 <prvInitialiseTaskLists+0x68>)
 800d180:	f7fe f878 	bl	800b274 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d184:	480c      	ldr	r0, [pc, #48]	; (800d1b8 <prvInitialiseTaskLists+0x6c>)
 800d186:	f7fe f875 	bl	800b274 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d18a:	480c      	ldr	r0, [pc, #48]	; (800d1bc <prvInitialiseTaskLists+0x70>)
 800d18c:	f7fe f872 	bl	800b274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d190:	480b      	ldr	r0, [pc, #44]	; (800d1c0 <prvInitialiseTaskLists+0x74>)
 800d192:	f7fe f86f 	bl	800b274 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d196:	4b0b      	ldr	r3, [pc, #44]	; (800d1c4 <prvInitialiseTaskLists+0x78>)
 800d198:	4a05      	ldr	r2, [pc, #20]	; (800d1b0 <prvInitialiseTaskLists+0x64>)
 800d19a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d19c:	4b0a      	ldr	r3, [pc, #40]	; (800d1c8 <prvInitialiseTaskLists+0x7c>)
 800d19e:	4a05      	ldr	r2, [pc, #20]	; (800d1b4 <prvInitialiseTaskLists+0x68>)
 800d1a0:	601a      	str	r2, [r3, #0]
}
 800d1a2:	bf00      	nop
 800d1a4:	3708      	adds	r7, #8
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	24001144 	.word	0x24001144
 800d1b0:	240015a4 	.word	0x240015a4
 800d1b4:	240015b8 	.word	0x240015b8
 800d1b8:	240015d4 	.word	0x240015d4
 800d1bc:	240015e8 	.word	0x240015e8
 800d1c0:	24001600 	.word	0x24001600
 800d1c4:	240015cc 	.word	0x240015cc
 800d1c8:	240015d0 	.word	0x240015d0

0800d1cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b082      	sub	sp, #8
 800d1d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1d2:	e019      	b.n	800d208 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d1d4:	f000 fed6 	bl	800df84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1d8:	4b10      	ldr	r3, [pc, #64]	; (800d21c <prvCheckTasksWaitingTermination+0x50>)
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	3304      	adds	r3, #4
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7fe f8cf 	bl	800b388 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d1ea:	4b0d      	ldr	r3, [pc, #52]	; (800d220 <prvCheckTasksWaitingTermination+0x54>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	4a0b      	ldr	r2, [pc, #44]	; (800d220 <prvCheckTasksWaitingTermination+0x54>)
 800d1f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d1f4:	4b0b      	ldr	r3, [pc, #44]	; (800d224 <prvCheckTasksWaitingTermination+0x58>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	4a0a      	ldr	r2, [pc, #40]	; (800d224 <prvCheckTasksWaitingTermination+0x58>)
 800d1fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d1fe:	f000 fef1 	bl	800dfe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 f810 	bl	800d228 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d208:	4b06      	ldr	r3, [pc, #24]	; (800d224 <prvCheckTasksWaitingTermination+0x58>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1e1      	bne.n	800d1d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d210:	bf00      	nop
 800d212:	bf00      	nop
 800d214:	3708      	adds	r7, #8
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	240015e8 	.word	0x240015e8
 800d220:	24001614 	.word	0x24001614
 800d224:	240015fc 	.word	0x240015fc

0800d228 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	3354      	adds	r3, #84	; 0x54
 800d234:	4618      	mov	r0, r3
 800d236:	f001 fc87 	bl	800eb48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d240:	2b00      	cmp	r3, #0
 800d242:	d108      	bne.n	800d256 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d248:	4618      	mov	r0, r3
 800d24a:	f001 f889 	bl	800e360 <vPortFree>
				vPortFree( pxTCB );
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f001 f886 	bl	800e360 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d254:	e018      	b.n	800d288 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d25c:	2b01      	cmp	r3, #1
 800d25e:	d103      	bne.n	800d268 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f001 f87d 	bl	800e360 <vPortFree>
	}
 800d266:	e00f      	b.n	800d288 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d26e:	2b02      	cmp	r3, #2
 800d270:	d00a      	beq.n	800d288 <prvDeleteTCB+0x60>
	__asm volatile
 800d272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d276:	f383 8811 	msr	BASEPRI, r3
 800d27a:	f3bf 8f6f 	isb	sy
 800d27e:	f3bf 8f4f 	dsb	sy
 800d282:	60fb      	str	r3, [r7, #12]
}
 800d284:	bf00      	nop
 800d286:	e7fe      	b.n	800d286 <prvDeleteTCB+0x5e>
	}
 800d288:	bf00      	nop
 800d28a:	3710      	adds	r7, #16
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d296:	4b0c      	ldr	r3, [pc, #48]	; (800d2c8 <prvResetNextTaskUnblockTime+0x38>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d104      	bne.n	800d2aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d2a0:	4b0a      	ldr	r3, [pc, #40]	; (800d2cc <prvResetNextTaskUnblockTime+0x3c>)
 800d2a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d2a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d2a8:	e008      	b.n	800d2bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2aa:	4b07      	ldr	r3, [pc, #28]	; (800d2c8 <prvResetNextTaskUnblockTime+0x38>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	4a04      	ldr	r2, [pc, #16]	; (800d2cc <prvResetNextTaskUnblockTime+0x3c>)
 800d2ba:	6013      	str	r3, [r2, #0]
}
 800d2bc:	bf00      	nop
 800d2be:	370c      	adds	r7, #12
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr
 800d2c8:	240015cc 	.word	0x240015cc
 800d2cc:	24001634 	.word	0x24001634

0800d2d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d2d6:	4b0b      	ldr	r3, [pc, #44]	; (800d304 <xTaskGetSchedulerState+0x34>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d102      	bne.n	800d2e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	607b      	str	r3, [r7, #4]
 800d2e2:	e008      	b.n	800d2f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2e4:	4b08      	ldr	r3, [pc, #32]	; (800d308 <xTaskGetSchedulerState+0x38>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d102      	bne.n	800d2f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d2ec:	2302      	movs	r3, #2
 800d2ee:	607b      	str	r3, [r7, #4]
 800d2f0:	e001      	b.n	800d2f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d2f6:	687b      	ldr	r3, [r7, #4]
	}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	370c      	adds	r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr
 800d304:	24001620 	.word	0x24001620
 800d308:	2400163c 	.word	0x2400163c

0800d30c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d318:	2300      	movs	r3, #0
 800d31a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d051      	beq.n	800d3c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d326:	4b2a      	ldr	r3, [pc, #168]	; (800d3d0 <xTaskPriorityInherit+0xc4>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d241      	bcs.n	800d3b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	699b      	ldr	r3, [r3, #24]
 800d334:	2b00      	cmp	r3, #0
 800d336:	db06      	blt.n	800d346 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d338:	4b25      	ldr	r3, [pc, #148]	; (800d3d0 <xTaskPriorityInherit+0xc4>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d33e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	6959      	ldr	r1, [r3, #20]
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d34e:	4613      	mov	r3, r2
 800d350:	009b      	lsls	r3, r3, #2
 800d352:	4413      	add	r3, r2
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	4a1f      	ldr	r2, [pc, #124]	; (800d3d4 <xTaskPriorityInherit+0xc8>)
 800d358:	4413      	add	r3, r2
 800d35a:	4299      	cmp	r1, r3
 800d35c:	d122      	bne.n	800d3a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	3304      	adds	r3, #4
 800d362:	4618      	mov	r0, r3
 800d364:	f7fe f810 	bl	800b388 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d368:	4b19      	ldr	r3, [pc, #100]	; (800d3d0 <xTaskPriorityInherit+0xc4>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d376:	4b18      	ldr	r3, [pc, #96]	; (800d3d8 <xTaskPriorityInherit+0xcc>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d903      	bls.n	800d386 <xTaskPriorityInherit+0x7a>
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d382:	4a15      	ldr	r2, [pc, #84]	; (800d3d8 <xTaskPriorityInherit+0xcc>)
 800d384:	6013      	str	r3, [r2, #0]
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d38a:	4613      	mov	r3, r2
 800d38c:	009b      	lsls	r3, r3, #2
 800d38e:	4413      	add	r3, r2
 800d390:	009b      	lsls	r3, r3, #2
 800d392:	4a10      	ldr	r2, [pc, #64]	; (800d3d4 <xTaskPriorityInherit+0xc8>)
 800d394:	441a      	add	r2, r3
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	3304      	adds	r3, #4
 800d39a:	4619      	mov	r1, r3
 800d39c:	4610      	mov	r0, r2
 800d39e:	f7fd ff96 	bl	800b2ce <vListInsertEnd>
 800d3a2:	e004      	b.n	800d3ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d3a4:	4b0a      	ldr	r3, [pc, #40]	; (800d3d0 <xTaskPriorityInherit+0xc4>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	60fb      	str	r3, [r7, #12]
 800d3b2:	e008      	b.n	800d3c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d3b8:	4b05      	ldr	r3, [pc, #20]	; (800d3d0 <xTaskPriorityInherit+0xc4>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d201      	bcs.n	800d3c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
	}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3710      	adds	r7, #16
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	24001140 	.word	0x24001140
 800d3d4:	24001144 	.word	0x24001144
 800d3d8:	2400161c 	.word	0x2400161c

0800d3dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b086      	sub	sp, #24
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d056      	beq.n	800d4a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d3f2:	4b2e      	ldr	r3, [pc, #184]	; (800d4ac <xTaskPriorityDisinherit+0xd0>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	693a      	ldr	r2, [r7, #16]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d00a      	beq.n	800d412 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d400:	f383 8811 	msr	BASEPRI, r3
 800d404:	f3bf 8f6f 	isb	sy
 800d408:	f3bf 8f4f 	dsb	sy
 800d40c:	60fb      	str	r3, [r7, #12]
}
 800d40e:	bf00      	nop
 800d410:	e7fe      	b.n	800d410 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d416:	2b00      	cmp	r3, #0
 800d418:	d10a      	bne.n	800d430 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d41e:	f383 8811 	msr	BASEPRI, r3
 800d422:	f3bf 8f6f 	isb	sy
 800d426:	f3bf 8f4f 	dsb	sy
 800d42a:	60bb      	str	r3, [r7, #8]
}
 800d42c:	bf00      	nop
 800d42e:	e7fe      	b.n	800d42e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d434:	1e5a      	subs	r2, r3, #1
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d442:	429a      	cmp	r2, r3
 800d444:	d02c      	beq.n	800d4a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d128      	bne.n	800d4a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	3304      	adds	r3, #4
 800d452:	4618      	mov	r0, r3
 800d454:	f7fd ff98 	bl	800b388 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d464:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d470:	4b0f      	ldr	r3, [pc, #60]	; (800d4b0 <xTaskPriorityDisinherit+0xd4>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	429a      	cmp	r2, r3
 800d476:	d903      	bls.n	800d480 <xTaskPriorityDisinherit+0xa4>
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d47c:	4a0c      	ldr	r2, [pc, #48]	; (800d4b0 <xTaskPriorityDisinherit+0xd4>)
 800d47e:	6013      	str	r3, [r2, #0]
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d484:	4613      	mov	r3, r2
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	4413      	add	r3, r2
 800d48a:	009b      	lsls	r3, r3, #2
 800d48c:	4a09      	ldr	r2, [pc, #36]	; (800d4b4 <xTaskPriorityDisinherit+0xd8>)
 800d48e:	441a      	add	r2, r3
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	3304      	adds	r3, #4
 800d494:	4619      	mov	r1, r3
 800d496:	4610      	mov	r0, r2
 800d498:	f7fd ff19 	bl	800b2ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d49c:	2301      	movs	r3, #1
 800d49e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d4a0:	697b      	ldr	r3, [r7, #20]
	}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3718      	adds	r7, #24
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	24001140 	.word	0x24001140
 800d4b0:	2400161c 	.word	0x2400161c
 800d4b4:	24001144 	.word	0x24001144

0800d4b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b088      	sub	sp, #32
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d06a      	beq.n	800d5a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d4d0:	69bb      	ldr	r3, [r7, #24]
 800d4d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d10a      	bne.n	800d4ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4dc:	f383 8811 	msr	BASEPRI, r3
 800d4e0:	f3bf 8f6f 	isb	sy
 800d4e4:	f3bf 8f4f 	dsb	sy
 800d4e8:	60fb      	str	r3, [r7, #12]
}
 800d4ea:	bf00      	nop
 800d4ec:	e7fe      	b.n	800d4ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d4ee:	69bb      	ldr	r3, [r7, #24]
 800d4f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4f2:	683a      	ldr	r2, [r7, #0]
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d902      	bls.n	800d4fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	61fb      	str	r3, [r7, #28]
 800d4fc:	e002      	b.n	800d504 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d502:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d504:	69bb      	ldr	r3, [r7, #24]
 800d506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d508:	69fa      	ldr	r2, [r7, #28]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d04b      	beq.n	800d5a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d50e:	69bb      	ldr	r3, [r7, #24]
 800d510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d512:	697a      	ldr	r2, [r7, #20]
 800d514:	429a      	cmp	r2, r3
 800d516:	d146      	bne.n	800d5a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d518:	4b25      	ldr	r3, [pc, #148]	; (800d5b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	69ba      	ldr	r2, [r7, #24]
 800d51e:	429a      	cmp	r2, r3
 800d520:	d10a      	bne.n	800d538 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d526:	f383 8811 	msr	BASEPRI, r3
 800d52a:	f3bf 8f6f 	isb	sy
 800d52e:	f3bf 8f4f 	dsb	sy
 800d532:	60bb      	str	r3, [r7, #8]
}
 800d534:	bf00      	nop
 800d536:	e7fe      	b.n	800d536 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d538:	69bb      	ldr	r3, [r7, #24]
 800d53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d53c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d53e:	69bb      	ldr	r3, [r7, #24]
 800d540:	69fa      	ldr	r2, [r7, #28]
 800d542:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d544:	69bb      	ldr	r3, [r7, #24]
 800d546:	699b      	ldr	r3, [r3, #24]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	db04      	blt.n	800d556 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d556:	69bb      	ldr	r3, [r7, #24]
 800d558:	6959      	ldr	r1, [r3, #20]
 800d55a:	693a      	ldr	r2, [r7, #16]
 800d55c:	4613      	mov	r3, r2
 800d55e:	009b      	lsls	r3, r3, #2
 800d560:	4413      	add	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4a13      	ldr	r2, [pc, #76]	; (800d5b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d566:	4413      	add	r3, r2
 800d568:	4299      	cmp	r1, r3
 800d56a:	d11c      	bne.n	800d5a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d56c:	69bb      	ldr	r3, [r7, #24]
 800d56e:	3304      	adds	r3, #4
 800d570:	4618      	mov	r0, r3
 800d572:	f7fd ff09 	bl	800b388 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d576:	69bb      	ldr	r3, [r7, #24]
 800d578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d57a:	4b0f      	ldr	r3, [pc, #60]	; (800d5b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	429a      	cmp	r2, r3
 800d580:	d903      	bls.n	800d58a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d586:	4a0c      	ldr	r2, [pc, #48]	; (800d5b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d588:	6013      	str	r3, [r2, #0]
 800d58a:	69bb      	ldr	r3, [r7, #24]
 800d58c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d58e:	4613      	mov	r3, r2
 800d590:	009b      	lsls	r3, r3, #2
 800d592:	4413      	add	r3, r2
 800d594:	009b      	lsls	r3, r3, #2
 800d596:	4a07      	ldr	r2, [pc, #28]	; (800d5b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d598:	441a      	add	r2, r3
 800d59a:	69bb      	ldr	r3, [r7, #24]
 800d59c:	3304      	adds	r3, #4
 800d59e:	4619      	mov	r1, r3
 800d5a0:	4610      	mov	r0, r2
 800d5a2:	f7fd fe94 	bl	800b2ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d5a6:	bf00      	nop
 800d5a8:	3720      	adds	r7, #32
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}
 800d5ae:	bf00      	nop
 800d5b0:	24001140 	.word	0x24001140
 800d5b4:	24001144 	.word	0x24001144
 800d5b8:	2400161c 	.word	0x2400161c

0800d5bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d5bc:	b480      	push	{r7}
 800d5be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d5c0:	4b07      	ldr	r3, [pc, #28]	; (800d5e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d004      	beq.n	800d5d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d5c8:	4b05      	ldr	r3, [pc, #20]	; (800d5e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d5ce:	3201      	adds	r2, #1
 800d5d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d5d2:	4b03      	ldr	r3, [pc, #12]	; (800d5e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
	}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr
 800d5e0:	24001140 	.word	0x24001140

0800d5e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d5ee:	4b21      	ldr	r3, [pc, #132]	; (800d674 <prvAddCurrentTaskToDelayedList+0x90>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5f4:	4b20      	ldr	r3, [pc, #128]	; (800d678 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	3304      	adds	r3, #4
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7fd fec4 	bl	800b388 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d606:	d10a      	bne.n	800d61e <prvAddCurrentTaskToDelayedList+0x3a>
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d007      	beq.n	800d61e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d60e:	4b1a      	ldr	r3, [pc, #104]	; (800d678 <prvAddCurrentTaskToDelayedList+0x94>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	3304      	adds	r3, #4
 800d614:	4619      	mov	r1, r3
 800d616:	4819      	ldr	r0, [pc, #100]	; (800d67c <prvAddCurrentTaskToDelayedList+0x98>)
 800d618:	f7fd fe59 	bl	800b2ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d61c:	e026      	b.n	800d66c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d61e:	68fa      	ldr	r2, [r7, #12]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4413      	add	r3, r2
 800d624:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d626:	4b14      	ldr	r3, [pc, #80]	; (800d678 <prvAddCurrentTaskToDelayedList+0x94>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	68ba      	ldr	r2, [r7, #8]
 800d62c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d62e:	68ba      	ldr	r2, [r7, #8]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	429a      	cmp	r2, r3
 800d634:	d209      	bcs.n	800d64a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d636:	4b12      	ldr	r3, [pc, #72]	; (800d680 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	4b0f      	ldr	r3, [pc, #60]	; (800d678 <prvAddCurrentTaskToDelayedList+0x94>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	3304      	adds	r3, #4
 800d640:	4619      	mov	r1, r3
 800d642:	4610      	mov	r0, r2
 800d644:	f7fd fe67 	bl	800b316 <vListInsert>
}
 800d648:	e010      	b.n	800d66c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d64a:	4b0e      	ldr	r3, [pc, #56]	; (800d684 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	4b0a      	ldr	r3, [pc, #40]	; (800d678 <prvAddCurrentTaskToDelayedList+0x94>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	3304      	adds	r3, #4
 800d654:	4619      	mov	r1, r3
 800d656:	4610      	mov	r0, r2
 800d658:	f7fd fe5d 	bl	800b316 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d65c:	4b0a      	ldr	r3, [pc, #40]	; (800d688 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	68ba      	ldr	r2, [r7, #8]
 800d662:	429a      	cmp	r2, r3
 800d664:	d202      	bcs.n	800d66c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d666:	4a08      	ldr	r2, [pc, #32]	; (800d688 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	6013      	str	r3, [r2, #0]
}
 800d66c:	bf00      	nop
 800d66e:	3710      	adds	r7, #16
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	24001618 	.word	0x24001618
 800d678:	24001140 	.word	0x24001140
 800d67c:	24001600 	.word	0x24001600
 800d680:	240015d0 	.word	0x240015d0
 800d684:	240015cc 	.word	0x240015cc
 800d688:	24001634 	.word	0x24001634

0800d68c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b08a      	sub	sp, #40	; 0x28
 800d690:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d692:	2300      	movs	r3, #0
 800d694:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d696:	f000 fb07 	bl	800dca8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d69a:	4b1c      	ldr	r3, [pc, #112]	; (800d70c <xTimerCreateTimerTask+0x80>)
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d021      	beq.n	800d6e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d6aa:	1d3a      	adds	r2, r7, #4
 800d6ac:	f107 0108 	add.w	r1, r7, #8
 800d6b0:	f107 030c 	add.w	r3, r7, #12
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7fd fdc3 	bl	800b240 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d6ba:	6879      	ldr	r1, [r7, #4]
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	9202      	str	r2, [sp, #8]
 800d6c2:	9301      	str	r3, [sp, #4]
 800d6c4:	2302      	movs	r3, #2
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	460a      	mov	r2, r1
 800d6cc:	4910      	ldr	r1, [pc, #64]	; (800d710 <xTimerCreateTimerTask+0x84>)
 800d6ce:	4811      	ldr	r0, [pc, #68]	; (800d714 <xTimerCreateTimerTask+0x88>)
 800d6d0:	f7fe fede 	bl	800c490 <xTaskCreateStatic>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	4a10      	ldr	r2, [pc, #64]	; (800d718 <xTimerCreateTimerTask+0x8c>)
 800d6d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d6da:	4b0f      	ldr	r3, [pc, #60]	; (800d718 <xTimerCreateTimerTask+0x8c>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d001      	beq.n	800d6e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d10a      	bne.n	800d702 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d6ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f0:	f383 8811 	msr	BASEPRI, r3
 800d6f4:	f3bf 8f6f 	isb	sy
 800d6f8:	f3bf 8f4f 	dsb	sy
 800d6fc:	613b      	str	r3, [r7, #16]
}
 800d6fe:	bf00      	nop
 800d700:	e7fe      	b.n	800d700 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d702:	697b      	ldr	r3, [r7, #20]
}
 800d704:	4618      	mov	r0, r3
 800d706:	3718      	adds	r7, #24
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	24001670 	.word	0x24001670
 800d710:	0800fd90 	.word	0x0800fd90
 800d714:	0800d851 	.word	0x0800d851
 800d718:	24001674 	.word	0x24001674

0800d71c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b08a      	sub	sp, #40	; 0x28
 800d720:	af00      	add	r7, sp, #0
 800d722:	60f8      	str	r0, [r7, #12]
 800d724:	60b9      	str	r1, [r7, #8]
 800d726:	607a      	str	r2, [r7, #4]
 800d728:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d72a:	2300      	movs	r3, #0
 800d72c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10a      	bne.n	800d74a <xTimerGenericCommand+0x2e>
	__asm volatile
 800d734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	623b      	str	r3, [r7, #32]
}
 800d746:	bf00      	nop
 800d748:	e7fe      	b.n	800d748 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d74a:	4b1a      	ldr	r3, [pc, #104]	; (800d7b4 <xTimerGenericCommand+0x98>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d02a      	beq.n	800d7a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	2b05      	cmp	r3, #5
 800d762:	dc18      	bgt.n	800d796 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d764:	f7ff fdb4 	bl	800d2d0 <xTaskGetSchedulerState>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b02      	cmp	r3, #2
 800d76c:	d109      	bne.n	800d782 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d76e:	4b11      	ldr	r3, [pc, #68]	; (800d7b4 <xTimerGenericCommand+0x98>)
 800d770:	6818      	ldr	r0, [r3, #0]
 800d772:	f107 0110 	add.w	r1, r7, #16
 800d776:	2300      	movs	r3, #0
 800d778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d77a:	f7fe f823 	bl	800b7c4 <xQueueGenericSend>
 800d77e:	6278      	str	r0, [r7, #36]	; 0x24
 800d780:	e012      	b.n	800d7a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d782:	4b0c      	ldr	r3, [pc, #48]	; (800d7b4 <xTimerGenericCommand+0x98>)
 800d784:	6818      	ldr	r0, [r3, #0]
 800d786:	f107 0110 	add.w	r1, r7, #16
 800d78a:	2300      	movs	r3, #0
 800d78c:	2200      	movs	r2, #0
 800d78e:	f7fe f819 	bl	800b7c4 <xQueueGenericSend>
 800d792:	6278      	str	r0, [r7, #36]	; 0x24
 800d794:	e008      	b.n	800d7a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d796:	4b07      	ldr	r3, [pc, #28]	; (800d7b4 <xTimerGenericCommand+0x98>)
 800d798:	6818      	ldr	r0, [r3, #0]
 800d79a:	f107 0110 	add.w	r1, r7, #16
 800d79e:	2300      	movs	r3, #0
 800d7a0:	683a      	ldr	r2, [r7, #0]
 800d7a2:	f7fe f90d 	bl	800b9c0 <xQueueGenericSendFromISR>
 800d7a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3728      	adds	r7, #40	; 0x28
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	24001670 	.word	0x24001670

0800d7b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b088      	sub	sp, #32
 800d7bc:	af02      	add	r7, sp, #8
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7c2:	4b22      	ldr	r3, [pc, #136]	; (800d84c <prvProcessExpiredTimer+0x94>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	68db      	ldr	r3, [r3, #12]
 800d7c8:	68db      	ldr	r3, [r3, #12]
 800d7ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d7cc:	697b      	ldr	r3, [r7, #20]
 800d7ce:	3304      	adds	r3, #4
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7fd fdd9 	bl	800b388 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d7dc:	f003 0304 	and.w	r3, r3, #4
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d022      	beq.n	800d82a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	699a      	ldr	r2, [r3, #24]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	18d1      	adds	r1, r2, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	683a      	ldr	r2, [r7, #0]
 800d7f0:	6978      	ldr	r0, [r7, #20]
 800d7f2:	f000 f8d1 	bl	800d998 <prvInsertTimerInActiveList>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d01f      	beq.n	800d83c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	9300      	str	r3, [sp, #0]
 800d800:	2300      	movs	r3, #0
 800d802:	687a      	ldr	r2, [r7, #4]
 800d804:	2100      	movs	r1, #0
 800d806:	6978      	ldr	r0, [r7, #20]
 800d808:	f7ff ff88 	bl	800d71c <xTimerGenericCommand>
 800d80c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d113      	bne.n	800d83c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d818:	f383 8811 	msr	BASEPRI, r3
 800d81c:	f3bf 8f6f 	isb	sy
 800d820:	f3bf 8f4f 	dsb	sy
 800d824:	60fb      	str	r3, [r7, #12]
}
 800d826:	bf00      	nop
 800d828:	e7fe      	b.n	800d828 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d830:	f023 0301 	bic.w	r3, r3, #1
 800d834:	b2da      	uxtb	r2, r3
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	6a1b      	ldr	r3, [r3, #32]
 800d840:	6978      	ldr	r0, [r7, #20]
 800d842:	4798      	blx	r3
}
 800d844:	bf00      	nop
 800d846:	3718      	adds	r7, #24
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	24001668 	.word	0x24001668

0800d850 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d858:	f107 0308 	add.w	r3, r7, #8
 800d85c:	4618      	mov	r0, r3
 800d85e:	f000 f857 	bl	800d910 <prvGetNextExpireTime>
 800d862:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	4619      	mov	r1, r3
 800d868:	68f8      	ldr	r0, [r7, #12]
 800d86a:	f000 f803 	bl	800d874 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d86e:	f000 f8d5 	bl	800da1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d872:	e7f1      	b.n	800d858 <prvTimerTask+0x8>

0800d874 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d87e:	f7ff f93b 	bl	800caf8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d882:	f107 0308 	add.w	r3, r7, #8
 800d886:	4618      	mov	r0, r3
 800d888:	f000 f866 	bl	800d958 <prvSampleTimeNow>
 800d88c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d130      	bne.n	800d8f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d10a      	bne.n	800d8b0 <prvProcessTimerOrBlockTask+0x3c>
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d806      	bhi.n	800d8b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d8a2:	f7ff f937 	bl	800cb14 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d8a6:	68f9      	ldr	r1, [r7, #12]
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f7ff ff85 	bl	800d7b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d8ae:	e024      	b.n	800d8fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d008      	beq.n	800d8c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d8b6:	4b13      	ldr	r3, [pc, #76]	; (800d904 <prvProcessTimerOrBlockTask+0x90>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d101      	bne.n	800d8c4 <prvProcessTimerOrBlockTask+0x50>
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e000      	b.n	800d8c6 <prvProcessTimerOrBlockTask+0x52>
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d8c8:	4b0f      	ldr	r3, [pc, #60]	; (800d908 <prvProcessTimerOrBlockTask+0x94>)
 800d8ca:	6818      	ldr	r0, [r3, #0]
 800d8cc:	687a      	ldr	r2, [r7, #4]
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	1ad3      	subs	r3, r2, r3
 800d8d2:	683a      	ldr	r2, [r7, #0]
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	f7fe fda7 	bl	800c428 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d8da:	f7ff f91b 	bl	800cb14 <xTaskResumeAll>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d10a      	bne.n	800d8fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d8e4:	4b09      	ldr	r3, [pc, #36]	; (800d90c <prvProcessTimerOrBlockTask+0x98>)
 800d8e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8ea:	601a      	str	r2, [r3, #0]
 800d8ec:	f3bf 8f4f 	dsb	sy
 800d8f0:	f3bf 8f6f 	isb	sy
}
 800d8f4:	e001      	b.n	800d8fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d8f6:	f7ff f90d 	bl	800cb14 <xTaskResumeAll>
}
 800d8fa:	bf00      	nop
 800d8fc:	3710      	adds	r7, #16
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	2400166c 	.word	0x2400166c
 800d908:	24001670 	.word	0x24001670
 800d90c:	e000ed04 	.word	0xe000ed04

0800d910 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d910:	b480      	push	{r7}
 800d912:	b085      	sub	sp, #20
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d918:	4b0e      	ldr	r3, [pc, #56]	; (800d954 <prvGetNextExpireTime+0x44>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d101      	bne.n	800d926 <prvGetNextExpireTime+0x16>
 800d922:	2201      	movs	r2, #1
 800d924:	e000      	b.n	800d928 <prvGetNextExpireTime+0x18>
 800d926:	2200      	movs	r2, #0
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d105      	bne.n	800d940 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d934:	4b07      	ldr	r3, [pc, #28]	; (800d954 <prvGetNextExpireTime+0x44>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	68db      	ldr	r3, [r3, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	60fb      	str	r3, [r7, #12]
 800d93e:	e001      	b.n	800d944 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d940:	2300      	movs	r3, #0
 800d942:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d944:	68fb      	ldr	r3, [r7, #12]
}
 800d946:	4618      	mov	r0, r3
 800d948:	3714      	adds	r7, #20
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	24001668 	.word	0x24001668

0800d958 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d960:	f7ff f976 	bl	800cc50 <xTaskGetTickCount>
 800d964:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d966:	4b0b      	ldr	r3, [pc, #44]	; (800d994 <prvSampleTimeNow+0x3c>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	68fa      	ldr	r2, [r7, #12]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d205      	bcs.n	800d97c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d970:	f000 f936 	bl	800dbe0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2201      	movs	r2, #1
 800d978:	601a      	str	r2, [r3, #0]
 800d97a:	e002      	b.n	800d982 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d982:	4a04      	ldr	r2, [pc, #16]	; (800d994 <prvSampleTimeNow+0x3c>)
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d988:	68fb      	ldr	r3, [r7, #12]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3710      	adds	r7, #16
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
 800d992:	bf00      	nop
 800d994:	24001678 	.word	0x24001678

0800d998 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b086      	sub	sp, #24
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	607a      	str	r2, [r7, #4]
 800d9a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	68ba      	ldr	r2, [r7, #8]
 800d9ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	68fa      	ldr	r2, [r7, #12]
 800d9b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d9b6:	68ba      	ldr	r2, [r7, #8]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d812      	bhi.n	800d9e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	1ad2      	subs	r2, r2, r3
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	699b      	ldr	r3, [r3, #24]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d302      	bcc.n	800d9d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	617b      	str	r3, [r7, #20]
 800d9d0:	e01b      	b.n	800da0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d9d2:	4b10      	ldr	r3, [pc, #64]	; (800da14 <prvInsertTimerInActiveList+0x7c>)
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	3304      	adds	r3, #4
 800d9da:	4619      	mov	r1, r3
 800d9dc:	4610      	mov	r0, r2
 800d9de:	f7fd fc9a 	bl	800b316 <vListInsert>
 800d9e2:	e012      	b.n	800da0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d206      	bcs.n	800d9fa <prvInsertTimerInActiveList+0x62>
 800d9ec:	68ba      	ldr	r2, [r7, #8]
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d302      	bcc.n	800d9fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	617b      	str	r3, [r7, #20]
 800d9f8:	e007      	b.n	800da0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d9fa:	4b07      	ldr	r3, [pc, #28]	; (800da18 <prvInsertTimerInActiveList+0x80>)
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	3304      	adds	r3, #4
 800da02:	4619      	mov	r1, r3
 800da04:	4610      	mov	r0, r2
 800da06:	f7fd fc86 	bl	800b316 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800da0a:	697b      	ldr	r3, [r7, #20]
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3718      	adds	r7, #24
 800da10:	46bd      	mov	sp, r7
 800da12:	bd80      	pop	{r7, pc}
 800da14:	2400166c 	.word	0x2400166c
 800da18:	24001668 	.word	0x24001668

0800da1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b08e      	sub	sp, #56	; 0x38
 800da20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800da22:	e0ca      	b.n	800dbba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	da18      	bge.n	800da5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800da2a:	1d3b      	adds	r3, r7, #4
 800da2c:	3304      	adds	r3, #4
 800da2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800da30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da32:	2b00      	cmp	r3, #0
 800da34:	d10a      	bne.n	800da4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800da36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3a:	f383 8811 	msr	BASEPRI, r3
 800da3e:	f3bf 8f6f 	isb	sy
 800da42:	f3bf 8f4f 	dsb	sy
 800da46:	61fb      	str	r3, [r7, #28]
}
 800da48:	bf00      	nop
 800da4a:	e7fe      	b.n	800da4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800da4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da52:	6850      	ldr	r0, [r2, #4]
 800da54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da56:	6892      	ldr	r2, [r2, #8]
 800da58:	4611      	mov	r1, r2
 800da5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	f2c0 80aa 	blt.w	800dbb8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800da68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da6a:	695b      	ldr	r3, [r3, #20]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d004      	beq.n	800da7a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800da70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da72:	3304      	adds	r3, #4
 800da74:	4618      	mov	r0, r3
 800da76:	f7fd fc87 	bl	800b388 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da7a:	463b      	mov	r3, r7
 800da7c:	4618      	mov	r0, r3
 800da7e:	f7ff ff6b 	bl	800d958 <prvSampleTimeNow>
 800da82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b09      	cmp	r3, #9
 800da88:	f200 8097 	bhi.w	800dbba <prvProcessReceivedCommands+0x19e>
 800da8c:	a201      	add	r2, pc, #4	; (adr r2, 800da94 <prvProcessReceivedCommands+0x78>)
 800da8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da92:	bf00      	nop
 800da94:	0800dabd 	.word	0x0800dabd
 800da98:	0800dabd 	.word	0x0800dabd
 800da9c:	0800dabd 	.word	0x0800dabd
 800daa0:	0800db31 	.word	0x0800db31
 800daa4:	0800db45 	.word	0x0800db45
 800daa8:	0800db8f 	.word	0x0800db8f
 800daac:	0800dabd 	.word	0x0800dabd
 800dab0:	0800dabd 	.word	0x0800dabd
 800dab4:	0800db31 	.word	0x0800db31
 800dab8:	0800db45 	.word	0x0800db45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dabe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dac2:	f043 0301 	orr.w	r3, r3, #1
 800dac6:	b2da      	uxtb	r2, r3
 800dac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dace:	68ba      	ldr	r2, [r7, #8]
 800dad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dad2:	699b      	ldr	r3, [r3, #24]
 800dad4:	18d1      	adds	r1, r2, r3
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dadc:	f7ff ff5c 	bl	800d998 <prvInsertTimerInActiveList>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d069      	beq.n	800dbba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae8:	6a1b      	ldr	r3, [r3, #32]
 800daea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800daec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800daee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800daf4:	f003 0304 	and.w	r3, r3, #4
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d05e      	beq.n	800dbba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dafc:	68ba      	ldr	r2, [r7, #8]
 800dafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db00:	699b      	ldr	r3, [r3, #24]
 800db02:	441a      	add	r2, r3
 800db04:	2300      	movs	r3, #0
 800db06:	9300      	str	r3, [sp, #0]
 800db08:	2300      	movs	r3, #0
 800db0a:	2100      	movs	r1, #0
 800db0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db0e:	f7ff fe05 	bl	800d71c <xTimerGenericCommand>
 800db12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800db14:	6a3b      	ldr	r3, [r7, #32]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d14f      	bne.n	800dbba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800db1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1e:	f383 8811 	msr	BASEPRI, r3
 800db22:	f3bf 8f6f 	isb	sy
 800db26:	f3bf 8f4f 	dsb	sy
 800db2a:	61bb      	str	r3, [r7, #24]
}
 800db2c:	bf00      	nop
 800db2e:	e7fe      	b.n	800db2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800db30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db36:	f023 0301 	bic.w	r3, r3, #1
 800db3a:	b2da      	uxtb	r2, r3
 800db3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800db42:	e03a      	b.n	800dbba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800db44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db4a:	f043 0301 	orr.w	r3, r3, #1
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800db56:	68ba      	ldr	r2, [r7, #8]
 800db58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800db5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5e:	699b      	ldr	r3, [r3, #24]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d10a      	bne.n	800db7a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800db64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db68:	f383 8811 	msr	BASEPRI, r3
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	f3bf 8f4f 	dsb	sy
 800db74:	617b      	str	r3, [r7, #20]
}
 800db76:	bf00      	nop
 800db78:	e7fe      	b.n	800db78 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800db7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db7c:	699a      	ldr	r2, [r3, #24]
 800db7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db80:	18d1      	adds	r1, r2, r3
 800db82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db88:	f7ff ff06 	bl	800d998 <prvInsertTimerInActiveList>
					break;
 800db8c:	e015      	b.n	800dbba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800db8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db94:	f003 0302 	and.w	r3, r3, #2
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d103      	bne.n	800dba4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800db9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db9e:	f000 fbdf 	bl	800e360 <vPortFree>
 800dba2:	e00a      	b.n	800dbba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbaa:	f023 0301 	bic.w	r3, r3, #1
 800dbae:	b2da      	uxtb	r2, r3
 800dbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dbb6:	e000      	b.n	800dbba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dbb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dbba:	4b08      	ldr	r3, [pc, #32]	; (800dbdc <prvProcessReceivedCommands+0x1c0>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	1d39      	adds	r1, r7, #4
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7fe f824 	bl	800bc10 <xQueueReceive>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f47f af2a 	bne.w	800da24 <prvProcessReceivedCommands+0x8>
	}
}
 800dbd0:	bf00      	nop
 800dbd2:	bf00      	nop
 800dbd4:	3730      	adds	r7, #48	; 0x30
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop
 800dbdc:	24001670 	.word	0x24001670

0800dbe0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b088      	sub	sp, #32
 800dbe4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dbe6:	e048      	b.n	800dc7a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dbe8:	4b2d      	ldr	r3, [pc, #180]	; (800dca0 <prvSwitchTimerLists+0xc0>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	68db      	ldr	r3, [r3, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbf2:	4b2b      	ldr	r3, [pc, #172]	; (800dca0 <prvSwitchTimerLists+0xc0>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	68db      	ldr	r3, [r3, #12]
 800dbfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	3304      	adds	r3, #4
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7fd fbc1 	bl	800b388 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	6a1b      	ldr	r3, [r3, #32]
 800dc0a:	68f8      	ldr	r0, [r7, #12]
 800dc0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc14:	f003 0304 	and.w	r3, r3, #4
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d02e      	beq.n	800dc7a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	699b      	ldr	r3, [r3, #24]
 800dc20:	693a      	ldr	r2, [r7, #16]
 800dc22:	4413      	add	r3, r2
 800dc24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dc26:	68ba      	ldr	r2, [r7, #8]
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d90e      	bls.n	800dc4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	68ba      	ldr	r2, [r7, #8]
 800dc32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	68fa      	ldr	r2, [r7, #12]
 800dc38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dc3a:	4b19      	ldr	r3, [pc, #100]	; (800dca0 <prvSwitchTimerLists+0xc0>)
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	3304      	adds	r3, #4
 800dc42:	4619      	mov	r1, r3
 800dc44:	4610      	mov	r0, r2
 800dc46:	f7fd fb66 	bl	800b316 <vListInsert>
 800dc4a:	e016      	b.n	800dc7a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	9300      	str	r3, [sp, #0]
 800dc50:	2300      	movs	r3, #0
 800dc52:	693a      	ldr	r2, [r7, #16]
 800dc54:	2100      	movs	r1, #0
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f7ff fd60 	bl	800d71c <xTimerGenericCommand>
 800dc5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d10a      	bne.n	800dc7a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc68:	f383 8811 	msr	BASEPRI, r3
 800dc6c:	f3bf 8f6f 	isb	sy
 800dc70:	f3bf 8f4f 	dsb	sy
 800dc74:	603b      	str	r3, [r7, #0]
}
 800dc76:	bf00      	nop
 800dc78:	e7fe      	b.n	800dc78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dc7a:	4b09      	ldr	r3, [pc, #36]	; (800dca0 <prvSwitchTimerLists+0xc0>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d1b1      	bne.n	800dbe8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800dc84:	4b06      	ldr	r3, [pc, #24]	; (800dca0 <prvSwitchTimerLists+0xc0>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800dc8a:	4b06      	ldr	r3, [pc, #24]	; (800dca4 <prvSwitchTimerLists+0xc4>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4a04      	ldr	r2, [pc, #16]	; (800dca0 <prvSwitchTimerLists+0xc0>)
 800dc90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800dc92:	4a04      	ldr	r2, [pc, #16]	; (800dca4 <prvSwitchTimerLists+0xc4>)
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	6013      	str	r3, [r2, #0]
}
 800dc98:	bf00      	nop
 800dc9a:	3718      	adds	r7, #24
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	24001668 	.word	0x24001668
 800dca4:	2400166c 	.word	0x2400166c

0800dca8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800dcae:	f000 f969 	bl	800df84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800dcb2:	4b15      	ldr	r3, [pc, #84]	; (800dd08 <prvCheckForValidListAndQueue+0x60>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d120      	bne.n	800dcfc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800dcba:	4814      	ldr	r0, [pc, #80]	; (800dd0c <prvCheckForValidListAndQueue+0x64>)
 800dcbc:	f7fd fada 	bl	800b274 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800dcc0:	4813      	ldr	r0, [pc, #76]	; (800dd10 <prvCheckForValidListAndQueue+0x68>)
 800dcc2:	f7fd fad7 	bl	800b274 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800dcc6:	4b13      	ldr	r3, [pc, #76]	; (800dd14 <prvCheckForValidListAndQueue+0x6c>)
 800dcc8:	4a10      	ldr	r2, [pc, #64]	; (800dd0c <prvCheckForValidListAndQueue+0x64>)
 800dcca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800dccc:	4b12      	ldr	r3, [pc, #72]	; (800dd18 <prvCheckForValidListAndQueue+0x70>)
 800dcce:	4a10      	ldr	r2, [pc, #64]	; (800dd10 <prvCheckForValidListAndQueue+0x68>)
 800dcd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	9300      	str	r3, [sp, #0]
 800dcd6:	4b11      	ldr	r3, [pc, #68]	; (800dd1c <prvCheckForValidListAndQueue+0x74>)
 800dcd8:	4a11      	ldr	r2, [pc, #68]	; (800dd20 <prvCheckForValidListAndQueue+0x78>)
 800dcda:	2110      	movs	r1, #16
 800dcdc:	200a      	movs	r0, #10
 800dcde:	f7fd fbe5 	bl	800b4ac <xQueueGenericCreateStatic>
 800dce2:	4603      	mov	r3, r0
 800dce4:	4a08      	ldr	r2, [pc, #32]	; (800dd08 <prvCheckForValidListAndQueue+0x60>)
 800dce6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800dce8:	4b07      	ldr	r3, [pc, #28]	; (800dd08 <prvCheckForValidListAndQueue+0x60>)
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d005      	beq.n	800dcfc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800dcf0:	4b05      	ldr	r3, [pc, #20]	; (800dd08 <prvCheckForValidListAndQueue+0x60>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	490b      	ldr	r1, [pc, #44]	; (800dd24 <prvCheckForValidListAndQueue+0x7c>)
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fe fb42 	bl	800c380 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dcfc:	f000 f972 	bl	800dfe4 <vPortExitCritical>
}
 800dd00:	bf00      	nop
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	24001670 	.word	0x24001670
 800dd0c:	24001640 	.word	0x24001640
 800dd10:	24001654 	.word	0x24001654
 800dd14:	24001668 	.word	0x24001668
 800dd18:	2400166c 	.word	0x2400166c
 800dd1c:	2400171c 	.word	0x2400171c
 800dd20:	2400167c 	.word	0x2400167c
 800dd24:	0800fd98 	.word	0x0800fd98

0800dd28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dd28:	b480      	push	{r7}
 800dd2a:	b085      	sub	sp, #20
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	60b9      	str	r1, [r7, #8]
 800dd32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	3b04      	subs	r3, #4
 800dd38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dd40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	3b04      	subs	r3, #4
 800dd46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	f023 0201 	bic.w	r2, r3, #1
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	3b04      	subs	r3, #4
 800dd56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dd58:	4a0c      	ldr	r2, [pc, #48]	; (800dd8c <pxPortInitialiseStack+0x64>)
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	3b14      	subs	r3, #20
 800dd62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	3b04      	subs	r3, #4
 800dd6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f06f 0202 	mvn.w	r2, #2
 800dd76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	3b20      	subs	r3, #32
 800dd7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3714      	adds	r7, #20
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr
 800dd8c:	0800dd91 	.word	0x0800dd91

0800dd90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dd90:	b480      	push	{r7}
 800dd92:	b085      	sub	sp, #20
 800dd94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dd96:	2300      	movs	r3, #0
 800dd98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dd9a:	4b12      	ldr	r3, [pc, #72]	; (800dde4 <prvTaskExitError+0x54>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dda2:	d00a      	beq.n	800ddba <prvTaskExitError+0x2a>
	__asm volatile
 800dda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda8:	f383 8811 	msr	BASEPRI, r3
 800ddac:	f3bf 8f6f 	isb	sy
 800ddb0:	f3bf 8f4f 	dsb	sy
 800ddb4:	60fb      	str	r3, [r7, #12]
}
 800ddb6:	bf00      	nop
 800ddb8:	e7fe      	b.n	800ddb8 <prvTaskExitError+0x28>
	__asm volatile
 800ddba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddbe:	f383 8811 	msr	BASEPRI, r3
 800ddc2:	f3bf 8f6f 	isb	sy
 800ddc6:	f3bf 8f4f 	dsb	sy
 800ddca:	60bb      	str	r3, [r7, #8]
}
 800ddcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ddce:	bf00      	nop
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d0fc      	beq.n	800ddd0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ddd6:	bf00      	nop
 800ddd8:	bf00      	nop
 800ddda:	3714      	adds	r7, #20
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr
 800dde4:	24000014 	.word	0x24000014
	...

0800ddf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ddf0:	4b07      	ldr	r3, [pc, #28]	; (800de10 <pxCurrentTCBConst2>)
 800ddf2:	6819      	ldr	r1, [r3, #0]
 800ddf4:	6808      	ldr	r0, [r1, #0]
 800ddf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddfa:	f380 8809 	msr	PSP, r0
 800ddfe:	f3bf 8f6f 	isb	sy
 800de02:	f04f 0000 	mov.w	r0, #0
 800de06:	f380 8811 	msr	BASEPRI, r0
 800de0a:	4770      	bx	lr
 800de0c:	f3af 8000 	nop.w

0800de10 <pxCurrentTCBConst2>:
 800de10:	24001140 	.word	0x24001140
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800de14:	bf00      	nop
 800de16:	bf00      	nop

0800de18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800de18:	4808      	ldr	r0, [pc, #32]	; (800de3c <prvPortStartFirstTask+0x24>)
 800de1a:	6800      	ldr	r0, [r0, #0]
 800de1c:	6800      	ldr	r0, [r0, #0]
 800de1e:	f380 8808 	msr	MSP, r0
 800de22:	f04f 0000 	mov.w	r0, #0
 800de26:	f380 8814 	msr	CONTROL, r0
 800de2a:	b662      	cpsie	i
 800de2c:	b661      	cpsie	f
 800de2e:	f3bf 8f4f 	dsb	sy
 800de32:	f3bf 8f6f 	isb	sy
 800de36:	df00      	svc	0
 800de38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800de3a:	bf00      	nop
 800de3c:	e000ed08 	.word	0xe000ed08

0800de40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b086      	sub	sp, #24
 800de44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800de46:	4b46      	ldr	r3, [pc, #280]	; (800df60 <xPortStartScheduler+0x120>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	4a46      	ldr	r2, [pc, #280]	; (800df64 <xPortStartScheduler+0x124>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d10a      	bne.n	800de66 <xPortStartScheduler+0x26>
	__asm volatile
 800de50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de54:	f383 8811 	msr	BASEPRI, r3
 800de58:	f3bf 8f6f 	isb	sy
 800de5c:	f3bf 8f4f 	dsb	sy
 800de60:	613b      	str	r3, [r7, #16]
}
 800de62:	bf00      	nop
 800de64:	e7fe      	b.n	800de64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800de66:	4b3e      	ldr	r3, [pc, #248]	; (800df60 <xPortStartScheduler+0x120>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	4a3f      	ldr	r2, [pc, #252]	; (800df68 <xPortStartScheduler+0x128>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d10a      	bne.n	800de86 <xPortStartScheduler+0x46>
	__asm volatile
 800de70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de74:	f383 8811 	msr	BASEPRI, r3
 800de78:	f3bf 8f6f 	isb	sy
 800de7c:	f3bf 8f4f 	dsb	sy
 800de80:	60fb      	str	r3, [r7, #12]
}
 800de82:	bf00      	nop
 800de84:	e7fe      	b.n	800de84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800de86:	4b39      	ldr	r3, [pc, #228]	; (800df6c <xPortStartScheduler+0x12c>)
 800de88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	22ff      	movs	r2, #255	; 0xff
 800de96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dea0:	78fb      	ldrb	r3, [r7, #3]
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	4b31      	ldr	r3, [pc, #196]	; (800df70 <xPortStartScheduler+0x130>)
 800deac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800deae:	4b31      	ldr	r3, [pc, #196]	; (800df74 <xPortStartScheduler+0x134>)
 800deb0:	2207      	movs	r2, #7
 800deb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800deb4:	e009      	b.n	800deca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800deb6:	4b2f      	ldr	r3, [pc, #188]	; (800df74 <xPortStartScheduler+0x134>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	3b01      	subs	r3, #1
 800debc:	4a2d      	ldr	r2, [pc, #180]	; (800df74 <xPortStartScheduler+0x134>)
 800debe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dec0:	78fb      	ldrb	r3, [r7, #3]
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	005b      	lsls	r3, r3, #1
 800dec6:	b2db      	uxtb	r3, r3
 800dec8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800deca:	78fb      	ldrb	r3, [r7, #3]
 800decc:	b2db      	uxtb	r3, r3
 800dece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ded2:	2b80      	cmp	r3, #128	; 0x80
 800ded4:	d0ef      	beq.n	800deb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ded6:	4b27      	ldr	r3, [pc, #156]	; (800df74 <xPortStartScheduler+0x134>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f1c3 0307 	rsb	r3, r3, #7
 800dede:	2b04      	cmp	r3, #4
 800dee0:	d00a      	beq.n	800def8 <xPortStartScheduler+0xb8>
	__asm volatile
 800dee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee6:	f383 8811 	msr	BASEPRI, r3
 800deea:	f3bf 8f6f 	isb	sy
 800deee:	f3bf 8f4f 	dsb	sy
 800def2:	60bb      	str	r3, [r7, #8]
}
 800def4:	bf00      	nop
 800def6:	e7fe      	b.n	800def6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800def8:	4b1e      	ldr	r3, [pc, #120]	; (800df74 <xPortStartScheduler+0x134>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	021b      	lsls	r3, r3, #8
 800defe:	4a1d      	ldr	r2, [pc, #116]	; (800df74 <xPortStartScheduler+0x134>)
 800df00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800df02:	4b1c      	ldr	r3, [pc, #112]	; (800df74 <xPortStartScheduler+0x134>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800df0a:	4a1a      	ldr	r2, [pc, #104]	; (800df74 <xPortStartScheduler+0x134>)
 800df0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	b2da      	uxtb	r2, r3
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800df16:	4b18      	ldr	r3, [pc, #96]	; (800df78 <xPortStartScheduler+0x138>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	4a17      	ldr	r2, [pc, #92]	; (800df78 <xPortStartScheduler+0x138>)
 800df1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800df20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800df22:	4b15      	ldr	r3, [pc, #84]	; (800df78 <xPortStartScheduler+0x138>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	4a14      	ldr	r2, [pc, #80]	; (800df78 <xPortStartScheduler+0x138>)
 800df28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800df2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800df2e:	f000 f8dd 	bl	800e0ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800df32:	4b12      	ldr	r3, [pc, #72]	; (800df7c <xPortStartScheduler+0x13c>)
 800df34:	2200      	movs	r2, #0
 800df36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800df38:	f000 f8fc 	bl	800e134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800df3c:	4b10      	ldr	r3, [pc, #64]	; (800df80 <xPortStartScheduler+0x140>)
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4a0f      	ldr	r2, [pc, #60]	; (800df80 <xPortStartScheduler+0x140>)
 800df42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800df46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800df48:	f7ff ff66 	bl	800de18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800df4c:	f7fe ff4a 	bl	800cde4 <vTaskSwitchContext>
	prvTaskExitError();
 800df50:	f7ff ff1e 	bl	800dd90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800df54:	2300      	movs	r3, #0
}
 800df56:	4618      	mov	r0, r3
 800df58:	3718      	adds	r7, #24
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}
 800df5e:	bf00      	nop
 800df60:	e000ed00 	.word	0xe000ed00
 800df64:	410fc271 	.word	0x410fc271
 800df68:	410fc270 	.word	0x410fc270
 800df6c:	e000e400 	.word	0xe000e400
 800df70:	2400176c 	.word	0x2400176c
 800df74:	24001770 	.word	0x24001770
 800df78:	e000ed20 	.word	0xe000ed20
 800df7c:	24000014 	.word	0x24000014
 800df80:	e000ef34 	.word	0xe000ef34

0800df84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
	__asm volatile
 800df8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df8e:	f383 8811 	msr	BASEPRI, r3
 800df92:	f3bf 8f6f 	isb	sy
 800df96:	f3bf 8f4f 	dsb	sy
 800df9a:	607b      	str	r3, [r7, #4]
}
 800df9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800df9e:	4b0f      	ldr	r3, [pc, #60]	; (800dfdc <vPortEnterCritical+0x58>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	4a0d      	ldr	r2, [pc, #52]	; (800dfdc <vPortEnterCritical+0x58>)
 800dfa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dfa8:	4b0c      	ldr	r3, [pc, #48]	; (800dfdc <vPortEnterCritical+0x58>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	d10f      	bne.n	800dfd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dfb0:	4b0b      	ldr	r3, [pc, #44]	; (800dfe0 <vPortEnterCritical+0x5c>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	b2db      	uxtb	r3, r3
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d00a      	beq.n	800dfd0 <vPortEnterCritical+0x4c>
	__asm volatile
 800dfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfbe:	f383 8811 	msr	BASEPRI, r3
 800dfc2:	f3bf 8f6f 	isb	sy
 800dfc6:	f3bf 8f4f 	dsb	sy
 800dfca:	603b      	str	r3, [r7, #0]
}
 800dfcc:	bf00      	nop
 800dfce:	e7fe      	b.n	800dfce <vPortEnterCritical+0x4a>
	}
}
 800dfd0:	bf00      	nop
 800dfd2:	370c      	adds	r7, #12
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr
 800dfdc:	24000014 	.word	0x24000014
 800dfe0:	e000ed04 	.word	0xe000ed04

0800dfe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b083      	sub	sp, #12
 800dfe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dfea:	4b12      	ldr	r3, [pc, #72]	; (800e034 <vPortExitCritical+0x50>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d10a      	bne.n	800e008 <vPortExitCritical+0x24>
	__asm volatile
 800dff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff6:	f383 8811 	msr	BASEPRI, r3
 800dffa:	f3bf 8f6f 	isb	sy
 800dffe:	f3bf 8f4f 	dsb	sy
 800e002:	607b      	str	r3, [r7, #4]
}
 800e004:	bf00      	nop
 800e006:	e7fe      	b.n	800e006 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e008:	4b0a      	ldr	r3, [pc, #40]	; (800e034 <vPortExitCritical+0x50>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	3b01      	subs	r3, #1
 800e00e:	4a09      	ldr	r2, [pc, #36]	; (800e034 <vPortExitCritical+0x50>)
 800e010:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e012:	4b08      	ldr	r3, [pc, #32]	; (800e034 <vPortExitCritical+0x50>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d105      	bne.n	800e026 <vPortExitCritical+0x42>
 800e01a:	2300      	movs	r3, #0
 800e01c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	f383 8811 	msr	BASEPRI, r3
}
 800e024:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e026:	bf00      	nop
 800e028:	370c      	adds	r7, #12
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	24000014 	.word	0x24000014
	...

0800e040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e040:	f3ef 8009 	mrs	r0, PSP
 800e044:	f3bf 8f6f 	isb	sy
 800e048:	4b15      	ldr	r3, [pc, #84]	; (800e0a0 <pxCurrentTCBConst>)
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	f01e 0f10 	tst.w	lr, #16
 800e050:	bf08      	it	eq
 800e052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e05a:	6010      	str	r0, [r2, #0]
 800e05c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e060:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e064:	f380 8811 	msr	BASEPRI, r0
 800e068:	f3bf 8f4f 	dsb	sy
 800e06c:	f3bf 8f6f 	isb	sy
 800e070:	f7fe feb8 	bl	800cde4 <vTaskSwitchContext>
 800e074:	f04f 0000 	mov.w	r0, #0
 800e078:	f380 8811 	msr	BASEPRI, r0
 800e07c:	bc09      	pop	{r0, r3}
 800e07e:	6819      	ldr	r1, [r3, #0]
 800e080:	6808      	ldr	r0, [r1, #0]
 800e082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e086:	f01e 0f10 	tst.w	lr, #16
 800e08a:	bf08      	it	eq
 800e08c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e090:	f380 8809 	msr	PSP, r0
 800e094:	f3bf 8f6f 	isb	sy
 800e098:	4770      	bx	lr
 800e09a:	bf00      	nop
 800e09c:	f3af 8000 	nop.w

0800e0a0 <pxCurrentTCBConst>:
 800e0a0:	24001140 	.word	0x24001140
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e0a4:	bf00      	nop
 800e0a6:	bf00      	nop

0800e0a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
	__asm volatile
 800e0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b2:	f383 8811 	msr	BASEPRI, r3
 800e0b6:	f3bf 8f6f 	isb	sy
 800e0ba:	f3bf 8f4f 	dsb	sy
 800e0be:	607b      	str	r3, [r7, #4]
}
 800e0c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e0c2:	f7fe fdd5 	bl	800cc70 <xTaskIncrementTick>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d003      	beq.n	800e0d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e0cc:	4b06      	ldr	r3, [pc, #24]	; (800e0e8 <xPortSysTickHandler+0x40>)
 800e0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0d2:	601a      	str	r2, [r3, #0]
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	f383 8811 	msr	BASEPRI, r3
}
 800e0de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e0e0:	bf00      	nop
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	e000ed04 	.word	0xe000ed04

0800e0ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e0f0:	4b0b      	ldr	r3, [pc, #44]	; (800e120 <vPortSetupTimerInterrupt+0x34>)
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e0f6:	4b0b      	ldr	r3, [pc, #44]	; (800e124 <vPortSetupTimerInterrupt+0x38>)
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e0fc:	4b0a      	ldr	r3, [pc, #40]	; (800e128 <vPortSetupTimerInterrupt+0x3c>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	4a0a      	ldr	r2, [pc, #40]	; (800e12c <vPortSetupTimerInterrupt+0x40>)
 800e102:	fba2 2303 	umull	r2, r3, r2, r3
 800e106:	099b      	lsrs	r3, r3, #6
 800e108:	4a09      	ldr	r2, [pc, #36]	; (800e130 <vPortSetupTimerInterrupt+0x44>)
 800e10a:	3b01      	subs	r3, #1
 800e10c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e10e:	4b04      	ldr	r3, [pc, #16]	; (800e120 <vPortSetupTimerInterrupt+0x34>)
 800e110:	2207      	movs	r2, #7
 800e112:	601a      	str	r2, [r3, #0]
}
 800e114:	bf00      	nop
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr
 800e11e:	bf00      	nop
 800e120:	e000e010 	.word	0xe000e010
 800e124:	e000e018 	.word	0xe000e018
 800e128:	24000004 	.word	0x24000004
 800e12c:	10624dd3 	.word	0x10624dd3
 800e130:	e000e014 	.word	0xe000e014

0800e134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e144 <vPortEnableVFP+0x10>
 800e138:	6801      	ldr	r1, [r0, #0]
 800e13a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e13e:	6001      	str	r1, [r0, #0]
 800e140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e142:	bf00      	nop
 800e144:	e000ed88 	.word	0xe000ed88

0800e148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e148:	b480      	push	{r7}
 800e14a:	b085      	sub	sp, #20
 800e14c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e14e:	f3ef 8305 	mrs	r3, IPSR
 800e152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	2b0f      	cmp	r3, #15
 800e158:	d914      	bls.n	800e184 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e15a:	4a17      	ldr	r2, [pc, #92]	; (800e1b8 <vPortValidateInterruptPriority+0x70>)
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	4413      	add	r3, r2
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e164:	4b15      	ldr	r3, [pc, #84]	; (800e1bc <vPortValidateInterruptPriority+0x74>)
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	7afa      	ldrb	r2, [r7, #11]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d20a      	bcs.n	800e184 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e172:	f383 8811 	msr	BASEPRI, r3
 800e176:	f3bf 8f6f 	isb	sy
 800e17a:	f3bf 8f4f 	dsb	sy
 800e17e:	607b      	str	r3, [r7, #4]
}
 800e180:	bf00      	nop
 800e182:	e7fe      	b.n	800e182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e184:	4b0e      	ldr	r3, [pc, #56]	; (800e1c0 <vPortValidateInterruptPriority+0x78>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e18c:	4b0d      	ldr	r3, [pc, #52]	; (800e1c4 <vPortValidateInterruptPriority+0x7c>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	429a      	cmp	r2, r3
 800e192:	d90a      	bls.n	800e1aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e198:	f383 8811 	msr	BASEPRI, r3
 800e19c:	f3bf 8f6f 	isb	sy
 800e1a0:	f3bf 8f4f 	dsb	sy
 800e1a4:	603b      	str	r3, [r7, #0]
}
 800e1a6:	bf00      	nop
 800e1a8:	e7fe      	b.n	800e1a8 <vPortValidateInterruptPriority+0x60>
	}
 800e1aa:	bf00      	nop
 800e1ac:	3714      	adds	r7, #20
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr
 800e1b6:	bf00      	nop
 800e1b8:	e000e3f0 	.word	0xe000e3f0
 800e1bc:	2400176c 	.word	0x2400176c
 800e1c0:	e000ed0c 	.word	0xe000ed0c
 800e1c4:	24001770 	.word	0x24001770

0800e1c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b08a      	sub	sp, #40	; 0x28
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e1d4:	f7fe fc90 	bl	800caf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e1d8:	4b5b      	ldr	r3, [pc, #364]	; (800e348 <pvPortMalloc+0x180>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d101      	bne.n	800e1e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e1e0:	f000 f920 	bl	800e424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e1e4:	4b59      	ldr	r3, [pc, #356]	; (800e34c <pvPortMalloc+0x184>)
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	4013      	ands	r3, r2
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	f040 8093 	bne.w	800e318 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d01d      	beq.n	800e234 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e1f8:	2208      	movs	r2, #8
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f003 0307 	and.w	r3, r3, #7
 800e206:	2b00      	cmp	r3, #0
 800e208:	d014      	beq.n	800e234 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f023 0307 	bic.w	r3, r3, #7
 800e210:	3308      	adds	r3, #8
 800e212:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f003 0307 	and.w	r3, r3, #7
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00a      	beq.n	800e234 <pvPortMalloc+0x6c>
	__asm volatile
 800e21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e222:	f383 8811 	msr	BASEPRI, r3
 800e226:	f3bf 8f6f 	isb	sy
 800e22a:	f3bf 8f4f 	dsb	sy
 800e22e:	617b      	str	r3, [r7, #20]
}
 800e230:	bf00      	nop
 800e232:	e7fe      	b.n	800e232 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d06e      	beq.n	800e318 <pvPortMalloc+0x150>
 800e23a:	4b45      	ldr	r3, [pc, #276]	; (800e350 <pvPortMalloc+0x188>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	687a      	ldr	r2, [r7, #4]
 800e240:	429a      	cmp	r2, r3
 800e242:	d869      	bhi.n	800e318 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e244:	4b43      	ldr	r3, [pc, #268]	; (800e354 <pvPortMalloc+0x18c>)
 800e246:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e248:	4b42      	ldr	r3, [pc, #264]	; (800e354 <pvPortMalloc+0x18c>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e24e:	e004      	b.n	800e25a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e252:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	687a      	ldr	r2, [r7, #4]
 800e260:	429a      	cmp	r2, r3
 800e262:	d903      	bls.n	800e26c <pvPortMalloc+0xa4>
 800e264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1f1      	bne.n	800e250 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e26c:	4b36      	ldr	r3, [pc, #216]	; (800e348 <pvPortMalloc+0x180>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e272:	429a      	cmp	r2, r3
 800e274:	d050      	beq.n	800e318 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e276:	6a3b      	ldr	r3, [r7, #32]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	2208      	movs	r2, #8
 800e27c:	4413      	add	r3, r2
 800e27e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	6a3b      	ldr	r3, [r7, #32]
 800e286:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28a:	685a      	ldr	r2, [r3, #4]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	1ad2      	subs	r2, r2, r3
 800e290:	2308      	movs	r3, #8
 800e292:	005b      	lsls	r3, r3, #1
 800e294:	429a      	cmp	r2, r3
 800e296:	d91f      	bls.n	800e2d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	4413      	add	r3, r2
 800e29e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e2a0:	69bb      	ldr	r3, [r7, #24]
 800e2a2:	f003 0307 	and.w	r3, r3, #7
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d00a      	beq.n	800e2c0 <pvPortMalloc+0xf8>
	__asm volatile
 800e2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ae:	f383 8811 	msr	BASEPRI, r3
 800e2b2:	f3bf 8f6f 	isb	sy
 800e2b6:	f3bf 8f4f 	dsb	sy
 800e2ba:	613b      	str	r3, [r7, #16]
}
 800e2bc:	bf00      	nop
 800e2be:	e7fe      	b.n	800e2be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c2:	685a      	ldr	r2, [r3, #4]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	1ad2      	subs	r2, r2, r3
 800e2c8:	69bb      	ldr	r3, [r7, #24]
 800e2ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e2d2:	69b8      	ldr	r0, [r7, #24]
 800e2d4:	f000 f908 	bl	800e4e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e2d8:	4b1d      	ldr	r3, [pc, #116]	; (800e350 <pvPortMalloc+0x188>)
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2de:	685b      	ldr	r3, [r3, #4]
 800e2e0:	1ad3      	subs	r3, r2, r3
 800e2e2:	4a1b      	ldr	r2, [pc, #108]	; (800e350 <pvPortMalloc+0x188>)
 800e2e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e2e6:	4b1a      	ldr	r3, [pc, #104]	; (800e350 <pvPortMalloc+0x188>)
 800e2e8:	681a      	ldr	r2, [r3, #0]
 800e2ea:	4b1b      	ldr	r3, [pc, #108]	; (800e358 <pvPortMalloc+0x190>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d203      	bcs.n	800e2fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e2f2:	4b17      	ldr	r3, [pc, #92]	; (800e350 <pvPortMalloc+0x188>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	4a18      	ldr	r2, [pc, #96]	; (800e358 <pvPortMalloc+0x190>)
 800e2f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fc:	685a      	ldr	r2, [r3, #4]
 800e2fe:	4b13      	ldr	r3, [pc, #76]	; (800e34c <pvPortMalloc+0x184>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	431a      	orrs	r2, r3
 800e304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e306:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e30a:	2200      	movs	r2, #0
 800e30c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e30e:	4b13      	ldr	r3, [pc, #76]	; (800e35c <pvPortMalloc+0x194>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	3301      	adds	r3, #1
 800e314:	4a11      	ldr	r2, [pc, #68]	; (800e35c <pvPortMalloc+0x194>)
 800e316:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e318:	f7fe fbfc 	bl	800cb14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e31c:	69fb      	ldr	r3, [r7, #28]
 800e31e:	f003 0307 	and.w	r3, r3, #7
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00a      	beq.n	800e33c <pvPortMalloc+0x174>
	__asm volatile
 800e326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e32a:	f383 8811 	msr	BASEPRI, r3
 800e32e:	f3bf 8f6f 	isb	sy
 800e332:	f3bf 8f4f 	dsb	sy
 800e336:	60fb      	str	r3, [r7, #12]
}
 800e338:	bf00      	nop
 800e33a:	e7fe      	b.n	800e33a <pvPortMalloc+0x172>
	return pvReturn;
 800e33c:	69fb      	ldr	r3, [r7, #28]
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3728      	adds	r7, #40	; 0x28
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	2400537c 	.word	0x2400537c
 800e34c:	24005390 	.word	0x24005390
 800e350:	24005380 	.word	0x24005380
 800e354:	24005374 	.word	0x24005374
 800e358:	24005384 	.word	0x24005384
 800e35c:	24005388 	.word	0x24005388

0800e360 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b086      	sub	sp, #24
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d04d      	beq.n	800e40e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e372:	2308      	movs	r3, #8
 800e374:	425b      	negs	r3, r3
 800e376:	697a      	ldr	r2, [r7, #20]
 800e378:	4413      	add	r3, r2
 800e37a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	685a      	ldr	r2, [r3, #4]
 800e384:	4b24      	ldr	r3, [pc, #144]	; (800e418 <vPortFree+0xb8>)
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4013      	ands	r3, r2
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d10a      	bne.n	800e3a4 <vPortFree+0x44>
	__asm volatile
 800e38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e392:	f383 8811 	msr	BASEPRI, r3
 800e396:	f3bf 8f6f 	isb	sy
 800e39a:	f3bf 8f4f 	dsb	sy
 800e39e:	60fb      	str	r3, [r7, #12]
}
 800e3a0:	bf00      	nop
 800e3a2:	e7fe      	b.n	800e3a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e3a4:	693b      	ldr	r3, [r7, #16]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d00a      	beq.n	800e3c2 <vPortFree+0x62>
	__asm volatile
 800e3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b0:	f383 8811 	msr	BASEPRI, r3
 800e3b4:	f3bf 8f6f 	isb	sy
 800e3b8:	f3bf 8f4f 	dsb	sy
 800e3bc:	60bb      	str	r3, [r7, #8]
}
 800e3be:	bf00      	nop
 800e3c0:	e7fe      	b.n	800e3c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	685a      	ldr	r2, [r3, #4]
 800e3c6:	4b14      	ldr	r3, [pc, #80]	; (800e418 <vPortFree+0xb8>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	4013      	ands	r3, r2
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d01e      	beq.n	800e40e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d11a      	bne.n	800e40e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	685a      	ldr	r2, [r3, #4]
 800e3dc:	4b0e      	ldr	r3, [pc, #56]	; (800e418 <vPortFree+0xb8>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	43db      	mvns	r3, r3
 800e3e2:	401a      	ands	r2, r3
 800e3e4:	693b      	ldr	r3, [r7, #16]
 800e3e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e3e8:	f7fe fb86 	bl	800caf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	685a      	ldr	r2, [r3, #4]
 800e3f0:	4b0a      	ldr	r3, [pc, #40]	; (800e41c <vPortFree+0xbc>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	4a09      	ldr	r2, [pc, #36]	; (800e41c <vPortFree+0xbc>)
 800e3f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e3fa:	6938      	ldr	r0, [r7, #16]
 800e3fc:	f000 f874 	bl	800e4e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e400:	4b07      	ldr	r3, [pc, #28]	; (800e420 <vPortFree+0xc0>)
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	3301      	adds	r3, #1
 800e406:	4a06      	ldr	r2, [pc, #24]	; (800e420 <vPortFree+0xc0>)
 800e408:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e40a:	f7fe fb83 	bl	800cb14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e40e:	bf00      	nop
 800e410:	3718      	adds	r7, #24
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
 800e416:	bf00      	nop
 800e418:	24005390 	.word	0x24005390
 800e41c:	24005380 	.word	0x24005380
 800e420:	2400538c 	.word	0x2400538c

0800e424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e424:	b480      	push	{r7}
 800e426:	b085      	sub	sp, #20
 800e428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e42a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e42e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e430:	4b27      	ldr	r3, [pc, #156]	; (800e4d0 <prvHeapInit+0xac>)
 800e432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	f003 0307 	and.w	r3, r3, #7
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d00c      	beq.n	800e458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	3307      	adds	r3, #7
 800e442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f023 0307 	bic.w	r3, r3, #7
 800e44a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e44c:	68ba      	ldr	r2, [r7, #8]
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	1ad3      	subs	r3, r2, r3
 800e452:	4a1f      	ldr	r2, [pc, #124]	; (800e4d0 <prvHeapInit+0xac>)
 800e454:	4413      	add	r3, r2
 800e456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e45c:	4a1d      	ldr	r2, [pc, #116]	; (800e4d4 <prvHeapInit+0xb0>)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e462:	4b1c      	ldr	r3, [pc, #112]	; (800e4d4 <prvHeapInit+0xb0>)
 800e464:	2200      	movs	r2, #0
 800e466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	68ba      	ldr	r2, [r7, #8]
 800e46c:	4413      	add	r3, r2
 800e46e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e470:	2208      	movs	r2, #8
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	1a9b      	subs	r3, r3, r2
 800e476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	f023 0307 	bic.w	r3, r3, #7
 800e47e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	4a15      	ldr	r2, [pc, #84]	; (800e4d8 <prvHeapInit+0xb4>)
 800e484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e486:	4b14      	ldr	r3, [pc, #80]	; (800e4d8 <prvHeapInit+0xb4>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	2200      	movs	r2, #0
 800e48c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e48e:	4b12      	ldr	r3, [pc, #72]	; (800e4d8 <prvHeapInit+0xb4>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	2200      	movs	r2, #0
 800e494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	68fa      	ldr	r2, [r7, #12]
 800e49e:	1ad2      	subs	r2, r2, r3
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e4a4:	4b0c      	ldr	r3, [pc, #48]	; (800e4d8 <prvHeapInit+0xb4>)
 800e4a6:	681a      	ldr	r2, [r3, #0]
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	685b      	ldr	r3, [r3, #4]
 800e4b0:	4a0a      	ldr	r2, [pc, #40]	; (800e4dc <prvHeapInit+0xb8>)
 800e4b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	685b      	ldr	r3, [r3, #4]
 800e4b8:	4a09      	ldr	r2, [pc, #36]	; (800e4e0 <prvHeapInit+0xbc>)
 800e4ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e4bc:	4b09      	ldr	r3, [pc, #36]	; (800e4e4 <prvHeapInit+0xc0>)
 800e4be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e4c2:	601a      	str	r2, [r3, #0]
}
 800e4c4:	bf00      	nop
 800e4c6:	3714      	adds	r7, #20
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ce:	4770      	bx	lr
 800e4d0:	24001774 	.word	0x24001774
 800e4d4:	24005374 	.word	0x24005374
 800e4d8:	2400537c 	.word	0x2400537c
 800e4dc:	24005384 	.word	0x24005384
 800e4e0:	24005380 	.word	0x24005380
 800e4e4:	24005390 	.word	0x24005390

0800e4e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b085      	sub	sp, #20
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e4f0:	4b28      	ldr	r3, [pc, #160]	; (800e594 <prvInsertBlockIntoFreeList+0xac>)
 800e4f2:	60fb      	str	r3, [r7, #12]
 800e4f4:	e002      	b.n	800e4fc <prvInsertBlockIntoFreeList+0x14>
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	60fb      	str	r3, [r7, #12]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	687a      	ldr	r2, [r7, #4]
 800e502:	429a      	cmp	r2, r3
 800e504:	d8f7      	bhi.n	800e4f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	685b      	ldr	r3, [r3, #4]
 800e50e:	68ba      	ldr	r2, [r7, #8]
 800e510:	4413      	add	r3, r2
 800e512:	687a      	ldr	r2, [r7, #4]
 800e514:	429a      	cmp	r2, r3
 800e516:	d108      	bne.n	800e52a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	685a      	ldr	r2, [r3, #4]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	685b      	ldr	r3, [r3, #4]
 800e520:	441a      	add	r2, r3
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	68ba      	ldr	r2, [r7, #8]
 800e534:	441a      	add	r2, r3
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d118      	bne.n	800e570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	4b15      	ldr	r3, [pc, #84]	; (800e598 <prvInsertBlockIntoFreeList+0xb0>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	429a      	cmp	r2, r3
 800e548:	d00d      	beq.n	800e566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	685a      	ldr	r2, [r3, #4]
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	441a      	add	r2, r3
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	681a      	ldr	r2, [r3, #0]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	601a      	str	r2, [r3, #0]
 800e564:	e008      	b.n	800e578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e566:	4b0c      	ldr	r3, [pc, #48]	; (800e598 <prvInsertBlockIntoFreeList+0xb0>)
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	601a      	str	r2, [r3, #0]
 800e56e:	e003      	b.n	800e578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681a      	ldr	r2, [r3, #0]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e578:	68fa      	ldr	r2, [r7, #12]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d002      	beq.n	800e586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	687a      	ldr	r2, [r7, #4]
 800e584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e586:	bf00      	nop
 800e588:	3714      	adds	r7, #20
 800e58a:	46bd      	mov	sp, r7
 800e58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e590:	4770      	bx	lr
 800e592:	bf00      	nop
 800e594:	24005374 	.word	0x24005374
 800e598:	2400537c 	.word	0x2400537c

0800e59c <__errno>:
 800e59c:	4b01      	ldr	r3, [pc, #4]	; (800e5a4 <__errno+0x8>)
 800e59e:	6818      	ldr	r0, [r3, #0]
 800e5a0:	4770      	bx	lr
 800e5a2:	bf00      	nop
 800e5a4:	24000018 	.word	0x24000018

0800e5a8 <std>:
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	b510      	push	{r4, lr}
 800e5ac:	4604      	mov	r4, r0
 800e5ae:	e9c0 3300 	strd	r3, r3, [r0]
 800e5b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5b6:	6083      	str	r3, [r0, #8]
 800e5b8:	8181      	strh	r1, [r0, #12]
 800e5ba:	6643      	str	r3, [r0, #100]	; 0x64
 800e5bc:	81c2      	strh	r2, [r0, #14]
 800e5be:	6183      	str	r3, [r0, #24]
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	2208      	movs	r2, #8
 800e5c4:	305c      	adds	r0, #92	; 0x5c
 800e5c6:	f000 f91a 	bl	800e7fe <memset>
 800e5ca:	4b05      	ldr	r3, [pc, #20]	; (800e5e0 <std+0x38>)
 800e5cc:	6263      	str	r3, [r4, #36]	; 0x24
 800e5ce:	4b05      	ldr	r3, [pc, #20]	; (800e5e4 <std+0x3c>)
 800e5d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5d2:	4b05      	ldr	r3, [pc, #20]	; (800e5e8 <std+0x40>)
 800e5d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5d6:	4b05      	ldr	r3, [pc, #20]	; (800e5ec <std+0x44>)
 800e5d8:	6224      	str	r4, [r4, #32]
 800e5da:	6323      	str	r3, [r4, #48]	; 0x30
 800e5dc:	bd10      	pop	{r4, pc}
 800e5de:	bf00      	nop
 800e5e0:	0800ec21 	.word	0x0800ec21
 800e5e4:	0800ec43 	.word	0x0800ec43
 800e5e8:	0800ec7b 	.word	0x0800ec7b
 800e5ec:	0800ec9f 	.word	0x0800ec9f

0800e5f0 <_cleanup_r>:
 800e5f0:	4901      	ldr	r1, [pc, #4]	; (800e5f8 <_cleanup_r+0x8>)
 800e5f2:	f000 b8af 	b.w	800e754 <_fwalk_reent>
 800e5f6:	bf00      	nop
 800e5f8:	0800efe9 	.word	0x0800efe9

0800e5fc <__sfmoreglue>:
 800e5fc:	b570      	push	{r4, r5, r6, lr}
 800e5fe:	2268      	movs	r2, #104	; 0x68
 800e600:	1e4d      	subs	r5, r1, #1
 800e602:	4355      	muls	r5, r2
 800e604:	460e      	mov	r6, r1
 800e606:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e60a:	f000 f921 	bl	800e850 <_malloc_r>
 800e60e:	4604      	mov	r4, r0
 800e610:	b140      	cbz	r0, 800e624 <__sfmoreglue+0x28>
 800e612:	2100      	movs	r1, #0
 800e614:	e9c0 1600 	strd	r1, r6, [r0]
 800e618:	300c      	adds	r0, #12
 800e61a:	60a0      	str	r0, [r4, #8]
 800e61c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e620:	f000 f8ed 	bl	800e7fe <memset>
 800e624:	4620      	mov	r0, r4
 800e626:	bd70      	pop	{r4, r5, r6, pc}

0800e628 <__sfp_lock_acquire>:
 800e628:	4801      	ldr	r0, [pc, #4]	; (800e630 <__sfp_lock_acquire+0x8>)
 800e62a:	f000 b8d8 	b.w	800e7de <__retarget_lock_acquire_recursive>
 800e62e:	bf00      	nop
 800e630:	24005395 	.word	0x24005395

0800e634 <__sfp_lock_release>:
 800e634:	4801      	ldr	r0, [pc, #4]	; (800e63c <__sfp_lock_release+0x8>)
 800e636:	f000 b8d3 	b.w	800e7e0 <__retarget_lock_release_recursive>
 800e63a:	bf00      	nop
 800e63c:	24005395 	.word	0x24005395

0800e640 <__sinit_lock_acquire>:
 800e640:	4801      	ldr	r0, [pc, #4]	; (800e648 <__sinit_lock_acquire+0x8>)
 800e642:	f000 b8cc 	b.w	800e7de <__retarget_lock_acquire_recursive>
 800e646:	bf00      	nop
 800e648:	24005396 	.word	0x24005396

0800e64c <__sinit_lock_release>:
 800e64c:	4801      	ldr	r0, [pc, #4]	; (800e654 <__sinit_lock_release+0x8>)
 800e64e:	f000 b8c7 	b.w	800e7e0 <__retarget_lock_release_recursive>
 800e652:	bf00      	nop
 800e654:	24005396 	.word	0x24005396

0800e658 <__sinit>:
 800e658:	b510      	push	{r4, lr}
 800e65a:	4604      	mov	r4, r0
 800e65c:	f7ff fff0 	bl	800e640 <__sinit_lock_acquire>
 800e660:	69a3      	ldr	r3, [r4, #24]
 800e662:	b11b      	cbz	r3, 800e66c <__sinit+0x14>
 800e664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e668:	f7ff bff0 	b.w	800e64c <__sinit_lock_release>
 800e66c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e670:	6523      	str	r3, [r4, #80]	; 0x50
 800e672:	4b13      	ldr	r3, [pc, #76]	; (800e6c0 <__sinit+0x68>)
 800e674:	4a13      	ldr	r2, [pc, #76]	; (800e6c4 <__sinit+0x6c>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	62a2      	str	r2, [r4, #40]	; 0x28
 800e67a:	42a3      	cmp	r3, r4
 800e67c:	bf04      	itt	eq
 800e67e:	2301      	moveq	r3, #1
 800e680:	61a3      	streq	r3, [r4, #24]
 800e682:	4620      	mov	r0, r4
 800e684:	f000 f820 	bl	800e6c8 <__sfp>
 800e688:	6060      	str	r0, [r4, #4]
 800e68a:	4620      	mov	r0, r4
 800e68c:	f000 f81c 	bl	800e6c8 <__sfp>
 800e690:	60a0      	str	r0, [r4, #8]
 800e692:	4620      	mov	r0, r4
 800e694:	f000 f818 	bl	800e6c8 <__sfp>
 800e698:	2200      	movs	r2, #0
 800e69a:	60e0      	str	r0, [r4, #12]
 800e69c:	2104      	movs	r1, #4
 800e69e:	6860      	ldr	r0, [r4, #4]
 800e6a0:	f7ff ff82 	bl	800e5a8 <std>
 800e6a4:	68a0      	ldr	r0, [r4, #8]
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	2109      	movs	r1, #9
 800e6aa:	f7ff ff7d 	bl	800e5a8 <std>
 800e6ae:	68e0      	ldr	r0, [r4, #12]
 800e6b0:	2202      	movs	r2, #2
 800e6b2:	2112      	movs	r1, #18
 800e6b4:	f7ff ff78 	bl	800e5a8 <std>
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	61a3      	str	r3, [r4, #24]
 800e6bc:	e7d2      	b.n	800e664 <__sinit+0xc>
 800e6be:	bf00      	nop
 800e6c0:	0800ff68 	.word	0x0800ff68
 800e6c4:	0800e5f1 	.word	0x0800e5f1

0800e6c8 <__sfp>:
 800e6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ca:	4607      	mov	r7, r0
 800e6cc:	f7ff ffac 	bl	800e628 <__sfp_lock_acquire>
 800e6d0:	4b1e      	ldr	r3, [pc, #120]	; (800e74c <__sfp+0x84>)
 800e6d2:	681e      	ldr	r6, [r3, #0]
 800e6d4:	69b3      	ldr	r3, [r6, #24]
 800e6d6:	b913      	cbnz	r3, 800e6de <__sfp+0x16>
 800e6d8:	4630      	mov	r0, r6
 800e6da:	f7ff ffbd 	bl	800e658 <__sinit>
 800e6de:	3648      	adds	r6, #72	; 0x48
 800e6e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e6e4:	3b01      	subs	r3, #1
 800e6e6:	d503      	bpl.n	800e6f0 <__sfp+0x28>
 800e6e8:	6833      	ldr	r3, [r6, #0]
 800e6ea:	b30b      	cbz	r3, 800e730 <__sfp+0x68>
 800e6ec:	6836      	ldr	r6, [r6, #0]
 800e6ee:	e7f7      	b.n	800e6e0 <__sfp+0x18>
 800e6f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e6f4:	b9d5      	cbnz	r5, 800e72c <__sfp+0x64>
 800e6f6:	4b16      	ldr	r3, [pc, #88]	; (800e750 <__sfp+0x88>)
 800e6f8:	60e3      	str	r3, [r4, #12]
 800e6fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e6fe:	6665      	str	r5, [r4, #100]	; 0x64
 800e700:	f000 f86c 	bl	800e7dc <__retarget_lock_init_recursive>
 800e704:	f7ff ff96 	bl	800e634 <__sfp_lock_release>
 800e708:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e70c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e710:	6025      	str	r5, [r4, #0]
 800e712:	61a5      	str	r5, [r4, #24]
 800e714:	2208      	movs	r2, #8
 800e716:	4629      	mov	r1, r5
 800e718:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e71c:	f000 f86f 	bl	800e7fe <memset>
 800e720:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e724:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e728:	4620      	mov	r0, r4
 800e72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e72c:	3468      	adds	r4, #104	; 0x68
 800e72e:	e7d9      	b.n	800e6e4 <__sfp+0x1c>
 800e730:	2104      	movs	r1, #4
 800e732:	4638      	mov	r0, r7
 800e734:	f7ff ff62 	bl	800e5fc <__sfmoreglue>
 800e738:	4604      	mov	r4, r0
 800e73a:	6030      	str	r0, [r6, #0]
 800e73c:	2800      	cmp	r0, #0
 800e73e:	d1d5      	bne.n	800e6ec <__sfp+0x24>
 800e740:	f7ff ff78 	bl	800e634 <__sfp_lock_release>
 800e744:	230c      	movs	r3, #12
 800e746:	603b      	str	r3, [r7, #0]
 800e748:	e7ee      	b.n	800e728 <__sfp+0x60>
 800e74a:	bf00      	nop
 800e74c:	0800ff68 	.word	0x0800ff68
 800e750:	ffff0001 	.word	0xffff0001

0800e754 <_fwalk_reent>:
 800e754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e758:	4606      	mov	r6, r0
 800e75a:	4688      	mov	r8, r1
 800e75c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e760:	2700      	movs	r7, #0
 800e762:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e766:	f1b9 0901 	subs.w	r9, r9, #1
 800e76a:	d505      	bpl.n	800e778 <_fwalk_reent+0x24>
 800e76c:	6824      	ldr	r4, [r4, #0]
 800e76e:	2c00      	cmp	r4, #0
 800e770:	d1f7      	bne.n	800e762 <_fwalk_reent+0xe>
 800e772:	4638      	mov	r0, r7
 800e774:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e778:	89ab      	ldrh	r3, [r5, #12]
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d907      	bls.n	800e78e <_fwalk_reent+0x3a>
 800e77e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e782:	3301      	adds	r3, #1
 800e784:	d003      	beq.n	800e78e <_fwalk_reent+0x3a>
 800e786:	4629      	mov	r1, r5
 800e788:	4630      	mov	r0, r6
 800e78a:	47c0      	blx	r8
 800e78c:	4307      	orrs	r7, r0
 800e78e:	3568      	adds	r5, #104	; 0x68
 800e790:	e7e9      	b.n	800e766 <_fwalk_reent+0x12>
	...

0800e794 <__libc_init_array>:
 800e794:	b570      	push	{r4, r5, r6, lr}
 800e796:	4d0d      	ldr	r5, [pc, #52]	; (800e7cc <__libc_init_array+0x38>)
 800e798:	4c0d      	ldr	r4, [pc, #52]	; (800e7d0 <__libc_init_array+0x3c>)
 800e79a:	1b64      	subs	r4, r4, r5
 800e79c:	10a4      	asrs	r4, r4, #2
 800e79e:	2600      	movs	r6, #0
 800e7a0:	42a6      	cmp	r6, r4
 800e7a2:	d109      	bne.n	800e7b8 <__libc_init_array+0x24>
 800e7a4:	4d0b      	ldr	r5, [pc, #44]	; (800e7d4 <__libc_init_array+0x40>)
 800e7a6:	4c0c      	ldr	r4, [pc, #48]	; (800e7d8 <__libc_init_array+0x44>)
 800e7a8:	f001 f8cc 	bl	800f944 <_init>
 800e7ac:	1b64      	subs	r4, r4, r5
 800e7ae:	10a4      	asrs	r4, r4, #2
 800e7b0:	2600      	movs	r6, #0
 800e7b2:	42a6      	cmp	r6, r4
 800e7b4:	d105      	bne.n	800e7c2 <__libc_init_array+0x2e>
 800e7b6:	bd70      	pop	{r4, r5, r6, pc}
 800e7b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7bc:	4798      	blx	r3
 800e7be:	3601      	adds	r6, #1
 800e7c0:	e7ee      	b.n	800e7a0 <__libc_init_array+0xc>
 800e7c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7c6:	4798      	blx	r3
 800e7c8:	3601      	adds	r6, #1
 800e7ca:	e7f2      	b.n	800e7b2 <__libc_init_array+0x1e>
 800e7cc:	08010058 	.word	0x08010058
 800e7d0:	08010058 	.word	0x08010058
 800e7d4:	08010058 	.word	0x08010058
 800e7d8:	0801005c 	.word	0x0801005c

0800e7dc <__retarget_lock_init_recursive>:
 800e7dc:	4770      	bx	lr

0800e7de <__retarget_lock_acquire_recursive>:
 800e7de:	4770      	bx	lr

0800e7e0 <__retarget_lock_release_recursive>:
 800e7e0:	4770      	bx	lr

0800e7e2 <memcpy>:
 800e7e2:	440a      	add	r2, r1
 800e7e4:	4291      	cmp	r1, r2
 800e7e6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e7ea:	d100      	bne.n	800e7ee <memcpy+0xc>
 800e7ec:	4770      	bx	lr
 800e7ee:	b510      	push	{r4, lr}
 800e7f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e7f8:	4291      	cmp	r1, r2
 800e7fa:	d1f9      	bne.n	800e7f0 <memcpy+0xe>
 800e7fc:	bd10      	pop	{r4, pc}

0800e7fe <memset>:
 800e7fe:	4402      	add	r2, r0
 800e800:	4603      	mov	r3, r0
 800e802:	4293      	cmp	r3, r2
 800e804:	d100      	bne.n	800e808 <memset+0xa>
 800e806:	4770      	bx	lr
 800e808:	f803 1b01 	strb.w	r1, [r3], #1
 800e80c:	e7f9      	b.n	800e802 <memset+0x4>
	...

0800e810 <sbrk_aligned>:
 800e810:	b570      	push	{r4, r5, r6, lr}
 800e812:	4e0e      	ldr	r6, [pc, #56]	; (800e84c <sbrk_aligned+0x3c>)
 800e814:	460c      	mov	r4, r1
 800e816:	6831      	ldr	r1, [r6, #0]
 800e818:	4605      	mov	r5, r0
 800e81a:	b911      	cbnz	r1, 800e822 <sbrk_aligned+0x12>
 800e81c:	f000 f9f0 	bl	800ec00 <_sbrk_r>
 800e820:	6030      	str	r0, [r6, #0]
 800e822:	4621      	mov	r1, r4
 800e824:	4628      	mov	r0, r5
 800e826:	f000 f9eb 	bl	800ec00 <_sbrk_r>
 800e82a:	1c43      	adds	r3, r0, #1
 800e82c:	d00a      	beq.n	800e844 <sbrk_aligned+0x34>
 800e82e:	1cc4      	adds	r4, r0, #3
 800e830:	f024 0403 	bic.w	r4, r4, #3
 800e834:	42a0      	cmp	r0, r4
 800e836:	d007      	beq.n	800e848 <sbrk_aligned+0x38>
 800e838:	1a21      	subs	r1, r4, r0
 800e83a:	4628      	mov	r0, r5
 800e83c:	f000 f9e0 	bl	800ec00 <_sbrk_r>
 800e840:	3001      	adds	r0, #1
 800e842:	d101      	bne.n	800e848 <sbrk_aligned+0x38>
 800e844:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e848:	4620      	mov	r0, r4
 800e84a:	bd70      	pop	{r4, r5, r6, pc}
 800e84c:	2400539c 	.word	0x2400539c

0800e850 <_malloc_r>:
 800e850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e854:	1ccd      	adds	r5, r1, #3
 800e856:	f025 0503 	bic.w	r5, r5, #3
 800e85a:	3508      	adds	r5, #8
 800e85c:	2d0c      	cmp	r5, #12
 800e85e:	bf38      	it	cc
 800e860:	250c      	movcc	r5, #12
 800e862:	2d00      	cmp	r5, #0
 800e864:	4607      	mov	r7, r0
 800e866:	db01      	blt.n	800e86c <_malloc_r+0x1c>
 800e868:	42a9      	cmp	r1, r5
 800e86a:	d905      	bls.n	800e878 <_malloc_r+0x28>
 800e86c:	230c      	movs	r3, #12
 800e86e:	603b      	str	r3, [r7, #0]
 800e870:	2600      	movs	r6, #0
 800e872:	4630      	mov	r0, r6
 800e874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e878:	4e2e      	ldr	r6, [pc, #184]	; (800e934 <_malloc_r+0xe4>)
 800e87a:	f000 fc95 	bl	800f1a8 <__malloc_lock>
 800e87e:	6833      	ldr	r3, [r6, #0]
 800e880:	461c      	mov	r4, r3
 800e882:	bb34      	cbnz	r4, 800e8d2 <_malloc_r+0x82>
 800e884:	4629      	mov	r1, r5
 800e886:	4638      	mov	r0, r7
 800e888:	f7ff ffc2 	bl	800e810 <sbrk_aligned>
 800e88c:	1c43      	adds	r3, r0, #1
 800e88e:	4604      	mov	r4, r0
 800e890:	d14d      	bne.n	800e92e <_malloc_r+0xde>
 800e892:	6834      	ldr	r4, [r6, #0]
 800e894:	4626      	mov	r6, r4
 800e896:	2e00      	cmp	r6, #0
 800e898:	d140      	bne.n	800e91c <_malloc_r+0xcc>
 800e89a:	6823      	ldr	r3, [r4, #0]
 800e89c:	4631      	mov	r1, r6
 800e89e:	4638      	mov	r0, r7
 800e8a0:	eb04 0803 	add.w	r8, r4, r3
 800e8a4:	f000 f9ac 	bl	800ec00 <_sbrk_r>
 800e8a8:	4580      	cmp	r8, r0
 800e8aa:	d13a      	bne.n	800e922 <_malloc_r+0xd2>
 800e8ac:	6821      	ldr	r1, [r4, #0]
 800e8ae:	3503      	adds	r5, #3
 800e8b0:	1a6d      	subs	r5, r5, r1
 800e8b2:	f025 0503 	bic.w	r5, r5, #3
 800e8b6:	3508      	adds	r5, #8
 800e8b8:	2d0c      	cmp	r5, #12
 800e8ba:	bf38      	it	cc
 800e8bc:	250c      	movcc	r5, #12
 800e8be:	4629      	mov	r1, r5
 800e8c0:	4638      	mov	r0, r7
 800e8c2:	f7ff ffa5 	bl	800e810 <sbrk_aligned>
 800e8c6:	3001      	adds	r0, #1
 800e8c8:	d02b      	beq.n	800e922 <_malloc_r+0xd2>
 800e8ca:	6823      	ldr	r3, [r4, #0]
 800e8cc:	442b      	add	r3, r5
 800e8ce:	6023      	str	r3, [r4, #0]
 800e8d0:	e00e      	b.n	800e8f0 <_malloc_r+0xa0>
 800e8d2:	6822      	ldr	r2, [r4, #0]
 800e8d4:	1b52      	subs	r2, r2, r5
 800e8d6:	d41e      	bmi.n	800e916 <_malloc_r+0xc6>
 800e8d8:	2a0b      	cmp	r2, #11
 800e8da:	d916      	bls.n	800e90a <_malloc_r+0xba>
 800e8dc:	1961      	adds	r1, r4, r5
 800e8de:	42a3      	cmp	r3, r4
 800e8e0:	6025      	str	r5, [r4, #0]
 800e8e2:	bf18      	it	ne
 800e8e4:	6059      	strne	r1, [r3, #4]
 800e8e6:	6863      	ldr	r3, [r4, #4]
 800e8e8:	bf08      	it	eq
 800e8ea:	6031      	streq	r1, [r6, #0]
 800e8ec:	5162      	str	r2, [r4, r5]
 800e8ee:	604b      	str	r3, [r1, #4]
 800e8f0:	4638      	mov	r0, r7
 800e8f2:	f104 060b 	add.w	r6, r4, #11
 800e8f6:	f000 fc5d 	bl	800f1b4 <__malloc_unlock>
 800e8fa:	f026 0607 	bic.w	r6, r6, #7
 800e8fe:	1d23      	adds	r3, r4, #4
 800e900:	1af2      	subs	r2, r6, r3
 800e902:	d0b6      	beq.n	800e872 <_malloc_r+0x22>
 800e904:	1b9b      	subs	r3, r3, r6
 800e906:	50a3      	str	r3, [r4, r2]
 800e908:	e7b3      	b.n	800e872 <_malloc_r+0x22>
 800e90a:	6862      	ldr	r2, [r4, #4]
 800e90c:	42a3      	cmp	r3, r4
 800e90e:	bf0c      	ite	eq
 800e910:	6032      	streq	r2, [r6, #0]
 800e912:	605a      	strne	r2, [r3, #4]
 800e914:	e7ec      	b.n	800e8f0 <_malloc_r+0xa0>
 800e916:	4623      	mov	r3, r4
 800e918:	6864      	ldr	r4, [r4, #4]
 800e91a:	e7b2      	b.n	800e882 <_malloc_r+0x32>
 800e91c:	4634      	mov	r4, r6
 800e91e:	6876      	ldr	r6, [r6, #4]
 800e920:	e7b9      	b.n	800e896 <_malloc_r+0x46>
 800e922:	230c      	movs	r3, #12
 800e924:	603b      	str	r3, [r7, #0]
 800e926:	4638      	mov	r0, r7
 800e928:	f000 fc44 	bl	800f1b4 <__malloc_unlock>
 800e92c:	e7a1      	b.n	800e872 <_malloc_r+0x22>
 800e92e:	6025      	str	r5, [r4, #0]
 800e930:	e7de      	b.n	800e8f0 <_malloc_r+0xa0>
 800e932:	bf00      	nop
 800e934:	24005398 	.word	0x24005398

0800e938 <iprintf>:
 800e938:	b40f      	push	{r0, r1, r2, r3}
 800e93a:	4b0a      	ldr	r3, [pc, #40]	; (800e964 <iprintf+0x2c>)
 800e93c:	b513      	push	{r0, r1, r4, lr}
 800e93e:	681c      	ldr	r4, [r3, #0]
 800e940:	b124      	cbz	r4, 800e94c <iprintf+0x14>
 800e942:	69a3      	ldr	r3, [r4, #24]
 800e944:	b913      	cbnz	r3, 800e94c <iprintf+0x14>
 800e946:	4620      	mov	r0, r4
 800e948:	f7ff fe86 	bl	800e658 <__sinit>
 800e94c:	ab05      	add	r3, sp, #20
 800e94e:	9a04      	ldr	r2, [sp, #16]
 800e950:	68a1      	ldr	r1, [r4, #8]
 800e952:	9301      	str	r3, [sp, #4]
 800e954:	4620      	mov	r0, r4
 800e956:	f000 fca9 	bl	800f2ac <_vfiprintf_r>
 800e95a:	b002      	add	sp, #8
 800e95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e960:	b004      	add	sp, #16
 800e962:	4770      	bx	lr
 800e964:	24000018 	.word	0x24000018

0800e968 <_puts_r>:
 800e968:	b570      	push	{r4, r5, r6, lr}
 800e96a:	460e      	mov	r6, r1
 800e96c:	4605      	mov	r5, r0
 800e96e:	b118      	cbz	r0, 800e978 <_puts_r+0x10>
 800e970:	6983      	ldr	r3, [r0, #24]
 800e972:	b90b      	cbnz	r3, 800e978 <_puts_r+0x10>
 800e974:	f7ff fe70 	bl	800e658 <__sinit>
 800e978:	69ab      	ldr	r3, [r5, #24]
 800e97a:	68ac      	ldr	r4, [r5, #8]
 800e97c:	b913      	cbnz	r3, 800e984 <_puts_r+0x1c>
 800e97e:	4628      	mov	r0, r5
 800e980:	f7ff fe6a 	bl	800e658 <__sinit>
 800e984:	4b2c      	ldr	r3, [pc, #176]	; (800ea38 <_puts_r+0xd0>)
 800e986:	429c      	cmp	r4, r3
 800e988:	d120      	bne.n	800e9cc <_puts_r+0x64>
 800e98a:	686c      	ldr	r4, [r5, #4]
 800e98c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e98e:	07db      	lsls	r3, r3, #31
 800e990:	d405      	bmi.n	800e99e <_puts_r+0x36>
 800e992:	89a3      	ldrh	r3, [r4, #12]
 800e994:	0598      	lsls	r0, r3, #22
 800e996:	d402      	bmi.n	800e99e <_puts_r+0x36>
 800e998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e99a:	f7ff ff20 	bl	800e7de <__retarget_lock_acquire_recursive>
 800e99e:	89a3      	ldrh	r3, [r4, #12]
 800e9a0:	0719      	lsls	r1, r3, #28
 800e9a2:	d51d      	bpl.n	800e9e0 <_puts_r+0x78>
 800e9a4:	6923      	ldr	r3, [r4, #16]
 800e9a6:	b1db      	cbz	r3, 800e9e0 <_puts_r+0x78>
 800e9a8:	3e01      	subs	r6, #1
 800e9aa:	68a3      	ldr	r3, [r4, #8]
 800e9ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	60a3      	str	r3, [r4, #8]
 800e9b4:	bb39      	cbnz	r1, 800ea06 <_puts_r+0x9e>
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	da38      	bge.n	800ea2c <_puts_r+0xc4>
 800e9ba:	4622      	mov	r2, r4
 800e9bc:	210a      	movs	r1, #10
 800e9be:	4628      	mov	r0, r5
 800e9c0:	f000 f98c 	bl	800ecdc <__swbuf_r>
 800e9c4:	3001      	adds	r0, #1
 800e9c6:	d011      	beq.n	800e9ec <_puts_r+0x84>
 800e9c8:	250a      	movs	r5, #10
 800e9ca:	e011      	b.n	800e9f0 <_puts_r+0x88>
 800e9cc:	4b1b      	ldr	r3, [pc, #108]	; (800ea3c <_puts_r+0xd4>)
 800e9ce:	429c      	cmp	r4, r3
 800e9d0:	d101      	bne.n	800e9d6 <_puts_r+0x6e>
 800e9d2:	68ac      	ldr	r4, [r5, #8]
 800e9d4:	e7da      	b.n	800e98c <_puts_r+0x24>
 800e9d6:	4b1a      	ldr	r3, [pc, #104]	; (800ea40 <_puts_r+0xd8>)
 800e9d8:	429c      	cmp	r4, r3
 800e9da:	bf08      	it	eq
 800e9dc:	68ec      	ldreq	r4, [r5, #12]
 800e9de:	e7d5      	b.n	800e98c <_puts_r+0x24>
 800e9e0:	4621      	mov	r1, r4
 800e9e2:	4628      	mov	r0, r5
 800e9e4:	f000 f9de 	bl	800eda4 <__swsetup_r>
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	d0dd      	beq.n	800e9a8 <_puts_r+0x40>
 800e9ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e9f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e9f2:	07da      	lsls	r2, r3, #31
 800e9f4:	d405      	bmi.n	800ea02 <_puts_r+0x9a>
 800e9f6:	89a3      	ldrh	r3, [r4, #12]
 800e9f8:	059b      	lsls	r3, r3, #22
 800e9fa:	d402      	bmi.n	800ea02 <_puts_r+0x9a>
 800e9fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9fe:	f7ff feef 	bl	800e7e0 <__retarget_lock_release_recursive>
 800ea02:	4628      	mov	r0, r5
 800ea04:	bd70      	pop	{r4, r5, r6, pc}
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	da04      	bge.n	800ea14 <_puts_r+0xac>
 800ea0a:	69a2      	ldr	r2, [r4, #24]
 800ea0c:	429a      	cmp	r2, r3
 800ea0e:	dc06      	bgt.n	800ea1e <_puts_r+0xb6>
 800ea10:	290a      	cmp	r1, #10
 800ea12:	d004      	beq.n	800ea1e <_puts_r+0xb6>
 800ea14:	6823      	ldr	r3, [r4, #0]
 800ea16:	1c5a      	adds	r2, r3, #1
 800ea18:	6022      	str	r2, [r4, #0]
 800ea1a:	7019      	strb	r1, [r3, #0]
 800ea1c:	e7c5      	b.n	800e9aa <_puts_r+0x42>
 800ea1e:	4622      	mov	r2, r4
 800ea20:	4628      	mov	r0, r5
 800ea22:	f000 f95b 	bl	800ecdc <__swbuf_r>
 800ea26:	3001      	adds	r0, #1
 800ea28:	d1bf      	bne.n	800e9aa <_puts_r+0x42>
 800ea2a:	e7df      	b.n	800e9ec <_puts_r+0x84>
 800ea2c:	6823      	ldr	r3, [r4, #0]
 800ea2e:	250a      	movs	r5, #10
 800ea30:	1c5a      	adds	r2, r3, #1
 800ea32:	6022      	str	r2, [r4, #0]
 800ea34:	701d      	strb	r5, [r3, #0]
 800ea36:	e7db      	b.n	800e9f0 <_puts_r+0x88>
 800ea38:	0800ff28 	.word	0x0800ff28
 800ea3c:	0800ff48 	.word	0x0800ff48
 800ea40:	0800ff08 	.word	0x0800ff08

0800ea44 <puts>:
 800ea44:	4b02      	ldr	r3, [pc, #8]	; (800ea50 <puts+0xc>)
 800ea46:	4601      	mov	r1, r0
 800ea48:	6818      	ldr	r0, [r3, #0]
 800ea4a:	f7ff bf8d 	b.w	800e968 <_puts_r>
 800ea4e:	bf00      	nop
 800ea50:	24000018 	.word	0x24000018

0800ea54 <srand>:
 800ea54:	b538      	push	{r3, r4, r5, lr}
 800ea56:	4b10      	ldr	r3, [pc, #64]	; (800ea98 <srand+0x44>)
 800ea58:	681d      	ldr	r5, [r3, #0]
 800ea5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ea5c:	4604      	mov	r4, r0
 800ea5e:	b9b3      	cbnz	r3, 800ea8e <srand+0x3a>
 800ea60:	2018      	movs	r0, #24
 800ea62:	f000 fb99 	bl	800f198 <malloc>
 800ea66:	4602      	mov	r2, r0
 800ea68:	63a8      	str	r0, [r5, #56]	; 0x38
 800ea6a:	b920      	cbnz	r0, 800ea76 <srand+0x22>
 800ea6c:	4b0b      	ldr	r3, [pc, #44]	; (800ea9c <srand+0x48>)
 800ea6e:	480c      	ldr	r0, [pc, #48]	; (800eaa0 <srand+0x4c>)
 800ea70:	2142      	movs	r1, #66	; 0x42
 800ea72:	f000 fa05 	bl	800ee80 <__assert_func>
 800ea76:	490b      	ldr	r1, [pc, #44]	; (800eaa4 <srand+0x50>)
 800ea78:	4b0b      	ldr	r3, [pc, #44]	; (800eaa8 <srand+0x54>)
 800ea7a:	e9c0 1300 	strd	r1, r3, [r0]
 800ea7e:	4b0b      	ldr	r3, [pc, #44]	; (800eaac <srand+0x58>)
 800ea80:	6083      	str	r3, [r0, #8]
 800ea82:	230b      	movs	r3, #11
 800ea84:	8183      	strh	r3, [r0, #12]
 800ea86:	2100      	movs	r1, #0
 800ea88:	2001      	movs	r0, #1
 800ea8a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800ea8e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ea90:	2200      	movs	r2, #0
 800ea92:	611c      	str	r4, [r3, #16]
 800ea94:	615a      	str	r2, [r3, #20]
 800ea96:	bd38      	pop	{r3, r4, r5, pc}
 800ea98:	24000018 	.word	0x24000018
 800ea9c:	0800ff6c 	.word	0x0800ff6c
 800eaa0:	0800ff83 	.word	0x0800ff83
 800eaa4:	abcd330e 	.word	0xabcd330e
 800eaa8:	e66d1234 	.word	0xe66d1234
 800eaac:	0005deec 	.word	0x0005deec

0800eab0 <rand>:
 800eab0:	4b16      	ldr	r3, [pc, #88]	; (800eb0c <rand+0x5c>)
 800eab2:	b510      	push	{r4, lr}
 800eab4:	681c      	ldr	r4, [r3, #0]
 800eab6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eab8:	b9b3      	cbnz	r3, 800eae8 <rand+0x38>
 800eaba:	2018      	movs	r0, #24
 800eabc:	f000 fb6c 	bl	800f198 <malloc>
 800eac0:	63a0      	str	r0, [r4, #56]	; 0x38
 800eac2:	b928      	cbnz	r0, 800ead0 <rand+0x20>
 800eac4:	4602      	mov	r2, r0
 800eac6:	4b12      	ldr	r3, [pc, #72]	; (800eb10 <rand+0x60>)
 800eac8:	4812      	ldr	r0, [pc, #72]	; (800eb14 <rand+0x64>)
 800eaca:	214e      	movs	r1, #78	; 0x4e
 800eacc:	f000 f9d8 	bl	800ee80 <__assert_func>
 800ead0:	4a11      	ldr	r2, [pc, #68]	; (800eb18 <rand+0x68>)
 800ead2:	4b12      	ldr	r3, [pc, #72]	; (800eb1c <rand+0x6c>)
 800ead4:	e9c0 2300 	strd	r2, r3, [r0]
 800ead8:	4b11      	ldr	r3, [pc, #68]	; (800eb20 <rand+0x70>)
 800eada:	6083      	str	r3, [r0, #8]
 800eadc:	230b      	movs	r3, #11
 800eade:	8183      	strh	r3, [r0, #12]
 800eae0:	2201      	movs	r2, #1
 800eae2:	2300      	movs	r3, #0
 800eae4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800eae8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800eaea:	4a0e      	ldr	r2, [pc, #56]	; (800eb24 <rand+0x74>)
 800eaec:	6920      	ldr	r0, [r4, #16]
 800eaee:	6963      	ldr	r3, [r4, #20]
 800eaf0:	490d      	ldr	r1, [pc, #52]	; (800eb28 <rand+0x78>)
 800eaf2:	4342      	muls	r2, r0
 800eaf4:	fb01 2203 	mla	r2, r1, r3, r2
 800eaf8:	fba0 0101 	umull	r0, r1, r0, r1
 800eafc:	1c43      	adds	r3, r0, #1
 800eafe:	eb42 0001 	adc.w	r0, r2, r1
 800eb02:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800eb06:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800eb0a:	bd10      	pop	{r4, pc}
 800eb0c:	24000018 	.word	0x24000018
 800eb10:	0800ff6c 	.word	0x0800ff6c
 800eb14:	0800ff83 	.word	0x0800ff83
 800eb18:	abcd330e 	.word	0xabcd330e
 800eb1c:	e66d1234 	.word	0xe66d1234
 800eb20:	0005deec 	.word	0x0005deec
 800eb24:	5851f42d 	.word	0x5851f42d
 800eb28:	4c957f2d 	.word	0x4c957f2d

0800eb2c <cleanup_glue>:
 800eb2c:	b538      	push	{r3, r4, r5, lr}
 800eb2e:	460c      	mov	r4, r1
 800eb30:	6809      	ldr	r1, [r1, #0]
 800eb32:	4605      	mov	r5, r0
 800eb34:	b109      	cbz	r1, 800eb3a <cleanup_glue+0xe>
 800eb36:	f7ff fff9 	bl	800eb2c <cleanup_glue>
 800eb3a:	4621      	mov	r1, r4
 800eb3c:	4628      	mov	r0, r5
 800eb3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb42:	f000 bb3d 	b.w	800f1c0 <_free_r>
	...

0800eb48 <_reclaim_reent>:
 800eb48:	4b2c      	ldr	r3, [pc, #176]	; (800ebfc <_reclaim_reent+0xb4>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4283      	cmp	r3, r0
 800eb4e:	b570      	push	{r4, r5, r6, lr}
 800eb50:	4604      	mov	r4, r0
 800eb52:	d051      	beq.n	800ebf8 <_reclaim_reent+0xb0>
 800eb54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800eb56:	b143      	cbz	r3, 800eb6a <_reclaim_reent+0x22>
 800eb58:	68db      	ldr	r3, [r3, #12]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d14a      	bne.n	800ebf4 <_reclaim_reent+0xac>
 800eb5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb60:	6819      	ldr	r1, [r3, #0]
 800eb62:	b111      	cbz	r1, 800eb6a <_reclaim_reent+0x22>
 800eb64:	4620      	mov	r0, r4
 800eb66:	f000 fb2b 	bl	800f1c0 <_free_r>
 800eb6a:	6961      	ldr	r1, [r4, #20]
 800eb6c:	b111      	cbz	r1, 800eb74 <_reclaim_reent+0x2c>
 800eb6e:	4620      	mov	r0, r4
 800eb70:	f000 fb26 	bl	800f1c0 <_free_r>
 800eb74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800eb76:	b111      	cbz	r1, 800eb7e <_reclaim_reent+0x36>
 800eb78:	4620      	mov	r0, r4
 800eb7a:	f000 fb21 	bl	800f1c0 <_free_r>
 800eb7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800eb80:	b111      	cbz	r1, 800eb88 <_reclaim_reent+0x40>
 800eb82:	4620      	mov	r0, r4
 800eb84:	f000 fb1c 	bl	800f1c0 <_free_r>
 800eb88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800eb8a:	b111      	cbz	r1, 800eb92 <_reclaim_reent+0x4a>
 800eb8c:	4620      	mov	r0, r4
 800eb8e:	f000 fb17 	bl	800f1c0 <_free_r>
 800eb92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800eb94:	b111      	cbz	r1, 800eb9c <_reclaim_reent+0x54>
 800eb96:	4620      	mov	r0, r4
 800eb98:	f000 fb12 	bl	800f1c0 <_free_r>
 800eb9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800eb9e:	b111      	cbz	r1, 800eba6 <_reclaim_reent+0x5e>
 800eba0:	4620      	mov	r0, r4
 800eba2:	f000 fb0d 	bl	800f1c0 <_free_r>
 800eba6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800eba8:	b111      	cbz	r1, 800ebb0 <_reclaim_reent+0x68>
 800ebaa:	4620      	mov	r0, r4
 800ebac:	f000 fb08 	bl	800f1c0 <_free_r>
 800ebb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebb2:	b111      	cbz	r1, 800ebba <_reclaim_reent+0x72>
 800ebb4:	4620      	mov	r0, r4
 800ebb6:	f000 fb03 	bl	800f1c0 <_free_r>
 800ebba:	69a3      	ldr	r3, [r4, #24]
 800ebbc:	b1e3      	cbz	r3, 800ebf8 <_reclaim_reent+0xb0>
 800ebbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	4798      	blx	r3
 800ebc4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ebc6:	b1b9      	cbz	r1, 800ebf8 <_reclaim_reent+0xb0>
 800ebc8:	4620      	mov	r0, r4
 800ebca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebce:	f7ff bfad 	b.w	800eb2c <cleanup_glue>
 800ebd2:	5949      	ldr	r1, [r1, r5]
 800ebd4:	b941      	cbnz	r1, 800ebe8 <_reclaim_reent+0xa0>
 800ebd6:	3504      	adds	r5, #4
 800ebd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebda:	2d80      	cmp	r5, #128	; 0x80
 800ebdc:	68d9      	ldr	r1, [r3, #12]
 800ebde:	d1f8      	bne.n	800ebd2 <_reclaim_reent+0x8a>
 800ebe0:	4620      	mov	r0, r4
 800ebe2:	f000 faed 	bl	800f1c0 <_free_r>
 800ebe6:	e7ba      	b.n	800eb5e <_reclaim_reent+0x16>
 800ebe8:	680e      	ldr	r6, [r1, #0]
 800ebea:	4620      	mov	r0, r4
 800ebec:	f000 fae8 	bl	800f1c0 <_free_r>
 800ebf0:	4631      	mov	r1, r6
 800ebf2:	e7ef      	b.n	800ebd4 <_reclaim_reent+0x8c>
 800ebf4:	2500      	movs	r5, #0
 800ebf6:	e7ef      	b.n	800ebd8 <_reclaim_reent+0x90>
 800ebf8:	bd70      	pop	{r4, r5, r6, pc}
 800ebfa:	bf00      	nop
 800ebfc:	24000018 	.word	0x24000018

0800ec00 <_sbrk_r>:
 800ec00:	b538      	push	{r3, r4, r5, lr}
 800ec02:	4d06      	ldr	r5, [pc, #24]	; (800ec1c <_sbrk_r+0x1c>)
 800ec04:	2300      	movs	r3, #0
 800ec06:	4604      	mov	r4, r0
 800ec08:	4608      	mov	r0, r1
 800ec0a:	602b      	str	r3, [r5, #0]
 800ec0c:	f7f2 ff4a 	bl	8001aa4 <_sbrk>
 800ec10:	1c43      	adds	r3, r0, #1
 800ec12:	d102      	bne.n	800ec1a <_sbrk_r+0x1a>
 800ec14:	682b      	ldr	r3, [r5, #0]
 800ec16:	b103      	cbz	r3, 800ec1a <_sbrk_r+0x1a>
 800ec18:	6023      	str	r3, [r4, #0]
 800ec1a:	bd38      	pop	{r3, r4, r5, pc}
 800ec1c:	240053a0 	.word	0x240053a0

0800ec20 <__sread>:
 800ec20:	b510      	push	{r4, lr}
 800ec22:	460c      	mov	r4, r1
 800ec24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec28:	f000 fe04 	bl	800f834 <_read_r>
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	bfab      	itete	ge
 800ec30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec32:	89a3      	ldrhlt	r3, [r4, #12]
 800ec34:	181b      	addge	r3, r3, r0
 800ec36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec3a:	bfac      	ite	ge
 800ec3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec3e:	81a3      	strhlt	r3, [r4, #12]
 800ec40:	bd10      	pop	{r4, pc}

0800ec42 <__swrite>:
 800ec42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec46:	461f      	mov	r7, r3
 800ec48:	898b      	ldrh	r3, [r1, #12]
 800ec4a:	05db      	lsls	r3, r3, #23
 800ec4c:	4605      	mov	r5, r0
 800ec4e:	460c      	mov	r4, r1
 800ec50:	4616      	mov	r6, r2
 800ec52:	d505      	bpl.n	800ec60 <__swrite+0x1e>
 800ec54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec58:	2302      	movs	r3, #2
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	f000 fa24 	bl	800f0a8 <_lseek_r>
 800ec60:	89a3      	ldrh	r3, [r4, #12]
 800ec62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec6a:	81a3      	strh	r3, [r4, #12]
 800ec6c:	4632      	mov	r2, r6
 800ec6e:	463b      	mov	r3, r7
 800ec70:	4628      	mov	r0, r5
 800ec72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec76:	f000 b883 	b.w	800ed80 <_write_r>

0800ec7a <__sseek>:
 800ec7a:	b510      	push	{r4, lr}
 800ec7c:	460c      	mov	r4, r1
 800ec7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec82:	f000 fa11 	bl	800f0a8 <_lseek_r>
 800ec86:	1c43      	adds	r3, r0, #1
 800ec88:	89a3      	ldrh	r3, [r4, #12]
 800ec8a:	bf15      	itete	ne
 800ec8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ec8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ec92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ec96:	81a3      	strheq	r3, [r4, #12]
 800ec98:	bf18      	it	ne
 800ec9a:	81a3      	strhne	r3, [r4, #12]
 800ec9c:	bd10      	pop	{r4, pc}

0800ec9e <__sclose>:
 800ec9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eca2:	f000 b90b 	b.w	800eebc <_close_r>
	...

0800eca8 <time>:
 800eca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ecaa:	4b0b      	ldr	r3, [pc, #44]	; (800ecd8 <time+0x30>)
 800ecac:	2200      	movs	r2, #0
 800ecae:	4669      	mov	r1, sp
 800ecb0:	4604      	mov	r4, r0
 800ecb2:	6818      	ldr	r0, [r3, #0]
 800ecb4:	f000 f9e6 	bl	800f084 <_gettimeofday_r>
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	bfbe      	ittt	lt
 800ecbc:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800ecc0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ecc4:	e9cd 2300 	strdlt	r2, r3, [sp]
 800ecc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eccc:	b10c      	cbz	r4, 800ecd2 <time+0x2a>
 800ecce:	e9c4 0100 	strd	r0, r1, [r4]
 800ecd2:	b004      	add	sp, #16
 800ecd4:	bd10      	pop	{r4, pc}
 800ecd6:	bf00      	nop
 800ecd8:	24000018 	.word	0x24000018

0800ecdc <__swbuf_r>:
 800ecdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecde:	460e      	mov	r6, r1
 800ece0:	4614      	mov	r4, r2
 800ece2:	4605      	mov	r5, r0
 800ece4:	b118      	cbz	r0, 800ecee <__swbuf_r+0x12>
 800ece6:	6983      	ldr	r3, [r0, #24]
 800ece8:	b90b      	cbnz	r3, 800ecee <__swbuf_r+0x12>
 800ecea:	f7ff fcb5 	bl	800e658 <__sinit>
 800ecee:	4b21      	ldr	r3, [pc, #132]	; (800ed74 <__swbuf_r+0x98>)
 800ecf0:	429c      	cmp	r4, r3
 800ecf2:	d12b      	bne.n	800ed4c <__swbuf_r+0x70>
 800ecf4:	686c      	ldr	r4, [r5, #4]
 800ecf6:	69a3      	ldr	r3, [r4, #24]
 800ecf8:	60a3      	str	r3, [r4, #8]
 800ecfa:	89a3      	ldrh	r3, [r4, #12]
 800ecfc:	071a      	lsls	r2, r3, #28
 800ecfe:	d52f      	bpl.n	800ed60 <__swbuf_r+0x84>
 800ed00:	6923      	ldr	r3, [r4, #16]
 800ed02:	b36b      	cbz	r3, 800ed60 <__swbuf_r+0x84>
 800ed04:	6923      	ldr	r3, [r4, #16]
 800ed06:	6820      	ldr	r0, [r4, #0]
 800ed08:	1ac0      	subs	r0, r0, r3
 800ed0a:	6963      	ldr	r3, [r4, #20]
 800ed0c:	b2f6      	uxtb	r6, r6
 800ed0e:	4283      	cmp	r3, r0
 800ed10:	4637      	mov	r7, r6
 800ed12:	dc04      	bgt.n	800ed1e <__swbuf_r+0x42>
 800ed14:	4621      	mov	r1, r4
 800ed16:	4628      	mov	r0, r5
 800ed18:	f000 f966 	bl	800efe8 <_fflush_r>
 800ed1c:	bb30      	cbnz	r0, 800ed6c <__swbuf_r+0x90>
 800ed1e:	68a3      	ldr	r3, [r4, #8]
 800ed20:	3b01      	subs	r3, #1
 800ed22:	60a3      	str	r3, [r4, #8]
 800ed24:	6823      	ldr	r3, [r4, #0]
 800ed26:	1c5a      	adds	r2, r3, #1
 800ed28:	6022      	str	r2, [r4, #0]
 800ed2a:	701e      	strb	r6, [r3, #0]
 800ed2c:	6963      	ldr	r3, [r4, #20]
 800ed2e:	3001      	adds	r0, #1
 800ed30:	4283      	cmp	r3, r0
 800ed32:	d004      	beq.n	800ed3e <__swbuf_r+0x62>
 800ed34:	89a3      	ldrh	r3, [r4, #12]
 800ed36:	07db      	lsls	r3, r3, #31
 800ed38:	d506      	bpl.n	800ed48 <__swbuf_r+0x6c>
 800ed3a:	2e0a      	cmp	r6, #10
 800ed3c:	d104      	bne.n	800ed48 <__swbuf_r+0x6c>
 800ed3e:	4621      	mov	r1, r4
 800ed40:	4628      	mov	r0, r5
 800ed42:	f000 f951 	bl	800efe8 <_fflush_r>
 800ed46:	b988      	cbnz	r0, 800ed6c <__swbuf_r+0x90>
 800ed48:	4638      	mov	r0, r7
 800ed4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed4c:	4b0a      	ldr	r3, [pc, #40]	; (800ed78 <__swbuf_r+0x9c>)
 800ed4e:	429c      	cmp	r4, r3
 800ed50:	d101      	bne.n	800ed56 <__swbuf_r+0x7a>
 800ed52:	68ac      	ldr	r4, [r5, #8]
 800ed54:	e7cf      	b.n	800ecf6 <__swbuf_r+0x1a>
 800ed56:	4b09      	ldr	r3, [pc, #36]	; (800ed7c <__swbuf_r+0xa0>)
 800ed58:	429c      	cmp	r4, r3
 800ed5a:	bf08      	it	eq
 800ed5c:	68ec      	ldreq	r4, [r5, #12]
 800ed5e:	e7ca      	b.n	800ecf6 <__swbuf_r+0x1a>
 800ed60:	4621      	mov	r1, r4
 800ed62:	4628      	mov	r0, r5
 800ed64:	f000 f81e 	bl	800eda4 <__swsetup_r>
 800ed68:	2800      	cmp	r0, #0
 800ed6a:	d0cb      	beq.n	800ed04 <__swbuf_r+0x28>
 800ed6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ed70:	e7ea      	b.n	800ed48 <__swbuf_r+0x6c>
 800ed72:	bf00      	nop
 800ed74:	0800ff28 	.word	0x0800ff28
 800ed78:	0800ff48 	.word	0x0800ff48
 800ed7c:	0800ff08 	.word	0x0800ff08

0800ed80 <_write_r>:
 800ed80:	b538      	push	{r3, r4, r5, lr}
 800ed82:	4d07      	ldr	r5, [pc, #28]	; (800eda0 <_write_r+0x20>)
 800ed84:	4604      	mov	r4, r0
 800ed86:	4608      	mov	r0, r1
 800ed88:	4611      	mov	r1, r2
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	602a      	str	r2, [r5, #0]
 800ed8e:	461a      	mov	r2, r3
 800ed90:	f7f2 fe37 	bl	8001a02 <_write>
 800ed94:	1c43      	adds	r3, r0, #1
 800ed96:	d102      	bne.n	800ed9e <_write_r+0x1e>
 800ed98:	682b      	ldr	r3, [r5, #0]
 800ed9a:	b103      	cbz	r3, 800ed9e <_write_r+0x1e>
 800ed9c:	6023      	str	r3, [r4, #0]
 800ed9e:	bd38      	pop	{r3, r4, r5, pc}
 800eda0:	240053a0 	.word	0x240053a0

0800eda4 <__swsetup_r>:
 800eda4:	4b32      	ldr	r3, [pc, #200]	; (800ee70 <__swsetup_r+0xcc>)
 800eda6:	b570      	push	{r4, r5, r6, lr}
 800eda8:	681d      	ldr	r5, [r3, #0]
 800edaa:	4606      	mov	r6, r0
 800edac:	460c      	mov	r4, r1
 800edae:	b125      	cbz	r5, 800edba <__swsetup_r+0x16>
 800edb0:	69ab      	ldr	r3, [r5, #24]
 800edb2:	b913      	cbnz	r3, 800edba <__swsetup_r+0x16>
 800edb4:	4628      	mov	r0, r5
 800edb6:	f7ff fc4f 	bl	800e658 <__sinit>
 800edba:	4b2e      	ldr	r3, [pc, #184]	; (800ee74 <__swsetup_r+0xd0>)
 800edbc:	429c      	cmp	r4, r3
 800edbe:	d10f      	bne.n	800ede0 <__swsetup_r+0x3c>
 800edc0:	686c      	ldr	r4, [r5, #4]
 800edc2:	89a3      	ldrh	r3, [r4, #12]
 800edc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edc8:	0719      	lsls	r1, r3, #28
 800edca:	d42c      	bmi.n	800ee26 <__swsetup_r+0x82>
 800edcc:	06dd      	lsls	r5, r3, #27
 800edce:	d411      	bmi.n	800edf4 <__swsetup_r+0x50>
 800edd0:	2309      	movs	r3, #9
 800edd2:	6033      	str	r3, [r6, #0]
 800edd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800edd8:	81a3      	strh	r3, [r4, #12]
 800edda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edde:	e03e      	b.n	800ee5e <__swsetup_r+0xba>
 800ede0:	4b25      	ldr	r3, [pc, #148]	; (800ee78 <__swsetup_r+0xd4>)
 800ede2:	429c      	cmp	r4, r3
 800ede4:	d101      	bne.n	800edea <__swsetup_r+0x46>
 800ede6:	68ac      	ldr	r4, [r5, #8]
 800ede8:	e7eb      	b.n	800edc2 <__swsetup_r+0x1e>
 800edea:	4b24      	ldr	r3, [pc, #144]	; (800ee7c <__swsetup_r+0xd8>)
 800edec:	429c      	cmp	r4, r3
 800edee:	bf08      	it	eq
 800edf0:	68ec      	ldreq	r4, [r5, #12]
 800edf2:	e7e6      	b.n	800edc2 <__swsetup_r+0x1e>
 800edf4:	0758      	lsls	r0, r3, #29
 800edf6:	d512      	bpl.n	800ee1e <__swsetup_r+0x7a>
 800edf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edfa:	b141      	cbz	r1, 800ee0e <__swsetup_r+0x6a>
 800edfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ee00:	4299      	cmp	r1, r3
 800ee02:	d002      	beq.n	800ee0a <__swsetup_r+0x66>
 800ee04:	4630      	mov	r0, r6
 800ee06:	f000 f9db 	bl	800f1c0 <_free_r>
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	6363      	str	r3, [r4, #52]	; 0x34
 800ee0e:	89a3      	ldrh	r3, [r4, #12]
 800ee10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee14:	81a3      	strh	r3, [r4, #12]
 800ee16:	2300      	movs	r3, #0
 800ee18:	6063      	str	r3, [r4, #4]
 800ee1a:	6923      	ldr	r3, [r4, #16]
 800ee1c:	6023      	str	r3, [r4, #0]
 800ee1e:	89a3      	ldrh	r3, [r4, #12]
 800ee20:	f043 0308 	orr.w	r3, r3, #8
 800ee24:	81a3      	strh	r3, [r4, #12]
 800ee26:	6923      	ldr	r3, [r4, #16]
 800ee28:	b94b      	cbnz	r3, 800ee3e <__swsetup_r+0x9a>
 800ee2a:	89a3      	ldrh	r3, [r4, #12]
 800ee2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee34:	d003      	beq.n	800ee3e <__swsetup_r+0x9a>
 800ee36:	4621      	mov	r1, r4
 800ee38:	4630      	mov	r0, r6
 800ee3a:	f000 f96d 	bl	800f118 <__smakebuf_r>
 800ee3e:	89a0      	ldrh	r0, [r4, #12]
 800ee40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee44:	f010 0301 	ands.w	r3, r0, #1
 800ee48:	d00a      	beq.n	800ee60 <__swsetup_r+0xbc>
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	60a3      	str	r3, [r4, #8]
 800ee4e:	6963      	ldr	r3, [r4, #20]
 800ee50:	425b      	negs	r3, r3
 800ee52:	61a3      	str	r3, [r4, #24]
 800ee54:	6923      	ldr	r3, [r4, #16]
 800ee56:	b943      	cbnz	r3, 800ee6a <__swsetup_r+0xc6>
 800ee58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee5c:	d1ba      	bne.n	800edd4 <__swsetup_r+0x30>
 800ee5e:	bd70      	pop	{r4, r5, r6, pc}
 800ee60:	0781      	lsls	r1, r0, #30
 800ee62:	bf58      	it	pl
 800ee64:	6963      	ldrpl	r3, [r4, #20]
 800ee66:	60a3      	str	r3, [r4, #8]
 800ee68:	e7f4      	b.n	800ee54 <__swsetup_r+0xb0>
 800ee6a:	2000      	movs	r0, #0
 800ee6c:	e7f7      	b.n	800ee5e <__swsetup_r+0xba>
 800ee6e:	bf00      	nop
 800ee70:	24000018 	.word	0x24000018
 800ee74:	0800ff28 	.word	0x0800ff28
 800ee78:	0800ff48 	.word	0x0800ff48
 800ee7c:	0800ff08 	.word	0x0800ff08

0800ee80 <__assert_func>:
 800ee80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee82:	4614      	mov	r4, r2
 800ee84:	461a      	mov	r2, r3
 800ee86:	4b09      	ldr	r3, [pc, #36]	; (800eeac <__assert_func+0x2c>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4605      	mov	r5, r0
 800ee8c:	68d8      	ldr	r0, [r3, #12]
 800ee8e:	b14c      	cbz	r4, 800eea4 <__assert_func+0x24>
 800ee90:	4b07      	ldr	r3, [pc, #28]	; (800eeb0 <__assert_func+0x30>)
 800ee92:	9100      	str	r1, [sp, #0]
 800ee94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee98:	4906      	ldr	r1, [pc, #24]	; (800eeb4 <__assert_func+0x34>)
 800ee9a:	462b      	mov	r3, r5
 800ee9c:	f000 f8e0 	bl	800f060 <fiprintf>
 800eea0:	f000 fcda 	bl	800f858 <abort>
 800eea4:	4b04      	ldr	r3, [pc, #16]	; (800eeb8 <__assert_func+0x38>)
 800eea6:	461c      	mov	r4, r3
 800eea8:	e7f3      	b.n	800ee92 <__assert_func+0x12>
 800eeaa:	bf00      	nop
 800eeac:	24000018 	.word	0x24000018
 800eeb0:	0800ffde 	.word	0x0800ffde
 800eeb4:	0800ffeb 	.word	0x0800ffeb
 800eeb8:	08010019 	.word	0x08010019

0800eebc <_close_r>:
 800eebc:	b538      	push	{r3, r4, r5, lr}
 800eebe:	4d06      	ldr	r5, [pc, #24]	; (800eed8 <_close_r+0x1c>)
 800eec0:	2300      	movs	r3, #0
 800eec2:	4604      	mov	r4, r0
 800eec4:	4608      	mov	r0, r1
 800eec6:	602b      	str	r3, [r5, #0]
 800eec8:	f7f2 fdb7 	bl	8001a3a <_close>
 800eecc:	1c43      	adds	r3, r0, #1
 800eece:	d102      	bne.n	800eed6 <_close_r+0x1a>
 800eed0:	682b      	ldr	r3, [r5, #0]
 800eed2:	b103      	cbz	r3, 800eed6 <_close_r+0x1a>
 800eed4:	6023      	str	r3, [r4, #0]
 800eed6:	bd38      	pop	{r3, r4, r5, pc}
 800eed8:	240053a0 	.word	0x240053a0

0800eedc <__sflush_r>:
 800eedc:	898a      	ldrh	r2, [r1, #12]
 800eede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eee2:	4605      	mov	r5, r0
 800eee4:	0710      	lsls	r0, r2, #28
 800eee6:	460c      	mov	r4, r1
 800eee8:	d458      	bmi.n	800ef9c <__sflush_r+0xc0>
 800eeea:	684b      	ldr	r3, [r1, #4]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	dc05      	bgt.n	800eefc <__sflush_r+0x20>
 800eef0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	dc02      	bgt.n	800eefc <__sflush_r+0x20>
 800eef6:	2000      	movs	r0, #0
 800eef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eefc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eefe:	2e00      	cmp	r6, #0
 800ef00:	d0f9      	beq.n	800eef6 <__sflush_r+0x1a>
 800ef02:	2300      	movs	r3, #0
 800ef04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ef08:	682f      	ldr	r7, [r5, #0]
 800ef0a:	602b      	str	r3, [r5, #0]
 800ef0c:	d032      	beq.n	800ef74 <__sflush_r+0x98>
 800ef0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ef10:	89a3      	ldrh	r3, [r4, #12]
 800ef12:	075a      	lsls	r2, r3, #29
 800ef14:	d505      	bpl.n	800ef22 <__sflush_r+0x46>
 800ef16:	6863      	ldr	r3, [r4, #4]
 800ef18:	1ac0      	subs	r0, r0, r3
 800ef1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ef1c:	b10b      	cbz	r3, 800ef22 <__sflush_r+0x46>
 800ef1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef20:	1ac0      	subs	r0, r0, r3
 800ef22:	2300      	movs	r3, #0
 800ef24:	4602      	mov	r2, r0
 800ef26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ef28:	6a21      	ldr	r1, [r4, #32]
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	47b0      	blx	r6
 800ef2e:	1c43      	adds	r3, r0, #1
 800ef30:	89a3      	ldrh	r3, [r4, #12]
 800ef32:	d106      	bne.n	800ef42 <__sflush_r+0x66>
 800ef34:	6829      	ldr	r1, [r5, #0]
 800ef36:	291d      	cmp	r1, #29
 800ef38:	d82c      	bhi.n	800ef94 <__sflush_r+0xb8>
 800ef3a:	4a2a      	ldr	r2, [pc, #168]	; (800efe4 <__sflush_r+0x108>)
 800ef3c:	40ca      	lsrs	r2, r1
 800ef3e:	07d6      	lsls	r6, r2, #31
 800ef40:	d528      	bpl.n	800ef94 <__sflush_r+0xb8>
 800ef42:	2200      	movs	r2, #0
 800ef44:	6062      	str	r2, [r4, #4]
 800ef46:	04d9      	lsls	r1, r3, #19
 800ef48:	6922      	ldr	r2, [r4, #16]
 800ef4a:	6022      	str	r2, [r4, #0]
 800ef4c:	d504      	bpl.n	800ef58 <__sflush_r+0x7c>
 800ef4e:	1c42      	adds	r2, r0, #1
 800ef50:	d101      	bne.n	800ef56 <__sflush_r+0x7a>
 800ef52:	682b      	ldr	r3, [r5, #0]
 800ef54:	b903      	cbnz	r3, 800ef58 <__sflush_r+0x7c>
 800ef56:	6560      	str	r0, [r4, #84]	; 0x54
 800ef58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef5a:	602f      	str	r7, [r5, #0]
 800ef5c:	2900      	cmp	r1, #0
 800ef5e:	d0ca      	beq.n	800eef6 <__sflush_r+0x1a>
 800ef60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef64:	4299      	cmp	r1, r3
 800ef66:	d002      	beq.n	800ef6e <__sflush_r+0x92>
 800ef68:	4628      	mov	r0, r5
 800ef6a:	f000 f929 	bl	800f1c0 <_free_r>
 800ef6e:	2000      	movs	r0, #0
 800ef70:	6360      	str	r0, [r4, #52]	; 0x34
 800ef72:	e7c1      	b.n	800eef8 <__sflush_r+0x1c>
 800ef74:	6a21      	ldr	r1, [r4, #32]
 800ef76:	2301      	movs	r3, #1
 800ef78:	4628      	mov	r0, r5
 800ef7a:	47b0      	blx	r6
 800ef7c:	1c41      	adds	r1, r0, #1
 800ef7e:	d1c7      	bne.n	800ef10 <__sflush_r+0x34>
 800ef80:	682b      	ldr	r3, [r5, #0]
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d0c4      	beq.n	800ef10 <__sflush_r+0x34>
 800ef86:	2b1d      	cmp	r3, #29
 800ef88:	d001      	beq.n	800ef8e <__sflush_r+0xb2>
 800ef8a:	2b16      	cmp	r3, #22
 800ef8c:	d101      	bne.n	800ef92 <__sflush_r+0xb6>
 800ef8e:	602f      	str	r7, [r5, #0]
 800ef90:	e7b1      	b.n	800eef6 <__sflush_r+0x1a>
 800ef92:	89a3      	ldrh	r3, [r4, #12]
 800ef94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef98:	81a3      	strh	r3, [r4, #12]
 800ef9a:	e7ad      	b.n	800eef8 <__sflush_r+0x1c>
 800ef9c:	690f      	ldr	r7, [r1, #16]
 800ef9e:	2f00      	cmp	r7, #0
 800efa0:	d0a9      	beq.n	800eef6 <__sflush_r+0x1a>
 800efa2:	0793      	lsls	r3, r2, #30
 800efa4:	680e      	ldr	r6, [r1, #0]
 800efa6:	bf08      	it	eq
 800efa8:	694b      	ldreq	r3, [r1, #20]
 800efaa:	600f      	str	r7, [r1, #0]
 800efac:	bf18      	it	ne
 800efae:	2300      	movne	r3, #0
 800efb0:	eba6 0807 	sub.w	r8, r6, r7
 800efb4:	608b      	str	r3, [r1, #8]
 800efb6:	f1b8 0f00 	cmp.w	r8, #0
 800efba:	dd9c      	ble.n	800eef6 <__sflush_r+0x1a>
 800efbc:	6a21      	ldr	r1, [r4, #32]
 800efbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800efc0:	4643      	mov	r3, r8
 800efc2:	463a      	mov	r2, r7
 800efc4:	4628      	mov	r0, r5
 800efc6:	47b0      	blx	r6
 800efc8:	2800      	cmp	r0, #0
 800efca:	dc06      	bgt.n	800efda <__sflush_r+0xfe>
 800efcc:	89a3      	ldrh	r3, [r4, #12]
 800efce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efd2:	81a3      	strh	r3, [r4, #12]
 800efd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efd8:	e78e      	b.n	800eef8 <__sflush_r+0x1c>
 800efda:	4407      	add	r7, r0
 800efdc:	eba8 0800 	sub.w	r8, r8, r0
 800efe0:	e7e9      	b.n	800efb6 <__sflush_r+0xda>
 800efe2:	bf00      	nop
 800efe4:	20400001 	.word	0x20400001

0800efe8 <_fflush_r>:
 800efe8:	b538      	push	{r3, r4, r5, lr}
 800efea:	690b      	ldr	r3, [r1, #16]
 800efec:	4605      	mov	r5, r0
 800efee:	460c      	mov	r4, r1
 800eff0:	b913      	cbnz	r3, 800eff8 <_fflush_r+0x10>
 800eff2:	2500      	movs	r5, #0
 800eff4:	4628      	mov	r0, r5
 800eff6:	bd38      	pop	{r3, r4, r5, pc}
 800eff8:	b118      	cbz	r0, 800f002 <_fflush_r+0x1a>
 800effa:	6983      	ldr	r3, [r0, #24]
 800effc:	b90b      	cbnz	r3, 800f002 <_fflush_r+0x1a>
 800effe:	f7ff fb2b 	bl	800e658 <__sinit>
 800f002:	4b14      	ldr	r3, [pc, #80]	; (800f054 <_fflush_r+0x6c>)
 800f004:	429c      	cmp	r4, r3
 800f006:	d11b      	bne.n	800f040 <_fflush_r+0x58>
 800f008:	686c      	ldr	r4, [r5, #4]
 800f00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d0ef      	beq.n	800eff2 <_fflush_r+0xa>
 800f012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f014:	07d0      	lsls	r0, r2, #31
 800f016:	d404      	bmi.n	800f022 <_fflush_r+0x3a>
 800f018:	0599      	lsls	r1, r3, #22
 800f01a:	d402      	bmi.n	800f022 <_fflush_r+0x3a>
 800f01c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f01e:	f7ff fbde 	bl	800e7de <__retarget_lock_acquire_recursive>
 800f022:	4628      	mov	r0, r5
 800f024:	4621      	mov	r1, r4
 800f026:	f7ff ff59 	bl	800eedc <__sflush_r>
 800f02a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f02c:	07da      	lsls	r2, r3, #31
 800f02e:	4605      	mov	r5, r0
 800f030:	d4e0      	bmi.n	800eff4 <_fflush_r+0xc>
 800f032:	89a3      	ldrh	r3, [r4, #12]
 800f034:	059b      	lsls	r3, r3, #22
 800f036:	d4dd      	bmi.n	800eff4 <_fflush_r+0xc>
 800f038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f03a:	f7ff fbd1 	bl	800e7e0 <__retarget_lock_release_recursive>
 800f03e:	e7d9      	b.n	800eff4 <_fflush_r+0xc>
 800f040:	4b05      	ldr	r3, [pc, #20]	; (800f058 <_fflush_r+0x70>)
 800f042:	429c      	cmp	r4, r3
 800f044:	d101      	bne.n	800f04a <_fflush_r+0x62>
 800f046:	68ac      	ldr	r4, [r5, #8]
 800f048:	e7df      	b.n	800f00a <_fflush_r+0x22>
 800f04a:	4b04      	ldr	r3, [pc, #16]	; (800f05c <_fflush_r+0x74>)
 800f04c:	429c      	cmp	r4, r3
 800f04e:	bf08      	it	eq
 800f050:	68ec      	ldreq	r4, [r5, #12]
 800f052:	e7da      	b.n	800f00a <_fflush_r+0x22>
 800f054:	0800ff28 	.word	0x0800ff28
 800f058:	0800ff48 	.word	0x0800ff48
 800f05c:	0800ff08 	.word	0x0800ff08

0800f060 <fiprintf>:
 800f060:	b40e      	push	{r1, r2, r3}
 800f062:	b503      	push	{r0, r1, lr}
 800f064:	4601      	mov	r1, r0
 800f066:	ab03      	add	r3, sp, #12
 800f068:	4805      	ldr	r0, [pc, #20]	; (800f080 <fiprintf+0x20>)
 800f06a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f06e:	6800      	ldr	r0, [r0, #0]
 800f070:	9301      	str	r3, [sp, #4]
 800f072:	f000 f91b 	bl	800f2ac <_vfiprintf_r>
 800f076:	b002      	add	sp, #8
 800f078:	f85d eb04 	ldr.w	lr, [sp], #4
 800f07c:	b003      	add	sp, #12
 800f07e:	4770      	bx	lr
 800f080:	24000018 	.word	0x24000018

0800f084 <_gettimeofday_r>:
 800f084:	b538      	push	{r3, r4, r5, lr}
 800f086:	4d07      	ldr	r5, [pc, #28]	; (800f0a4 <_gettimeofday_r+0x20>)
 800f088:	2300      	movs	r3, #0
 800f08a:	4604      	mov	r4, r0
 800f08c:	4608      	mov	r0, r1
 800f08e:	4611      	mov	r1, r2
 800f090:	602b      	str	r3, [r5, #0]
 800f092:	f000 fc4f 	bl	800f934 <_gettimeofday>
 800f096:	1c43      	adds	r3, r0, #1
 800f098:	d102      	bne.n	800f0a0 <_gettimeofday_r+0x1c>
 800f09a:	682b      	ldr	r3, [r5, #0]
 800f09c:	b103      	cbz	r3, 800f0a0 <_gettimeofday_r+0x1c>
 800f09e:	6023      	str	r3, [r4, #0]
 800f0a0:	bd38      	pop	{r3, r4, r5, pc}
 800f0a2:	bf00      	nop
 800f0a4:	240053a0 	.word	0x240053a0

0800f0a8 <_lseek_r>:
 800f0a8:	b538      	push	{r3, r4, r5, lr}
 800f0aa:	4d07      	ldr	r5, [pc, #28]	; (800f0c8 <_lseek_r+0x20>)
 800f0ac:	4604      	mov	r4, r0
 800f0ae:	4608      	mov	r0, r1
 800f0b0:	4611      	mov	r1, r2
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	602a      	str	r2, [r5, #0]
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	f7f2 fce6 	bl	8001a88 <_lseek>
 800f0bc:	1c43      	adds	r3, r0, #1
 800f0be:	d102      	bne.n	800f0c6 <_lseek_r+0x1e>
 800f0c0:	682b      	ldr	r3, [r5, #0]
 800f0c2:	b103      	cbz	r3, 800f0c6 <_lseek_r+0x1e>
 800f0c4:	6023      	str	r3, [r4, #0]
 800f0c6:	bd38      	pop	{r3, r4, r5, pc}
 800f0c8:	240053a0 	.word	0x240053a0

0800f0cc <__swhatbuf_r>:
 800f0cc:	b570      	push	{r4, r5, r6, lr}
 800f0ce:	460e      	mov	r6, r1
 800f0d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0d4:	2900      	cmp	r1, #0
 800f0d6:	b096      	sub	sp, #88	; 0x58
 800f0d8:	4614      	mov	r4, r2
 800f0da:	461d      	mov	r5, r3
 800f0dc:	da08      	bge.n	800f0f0 <__swhatbuf_r+0x24>
 800f0de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	602a      	str	r2, [r5, #0]
 800f0e6:	061a      	lsls	r2, r3, #24
 800f0e8:	d410      	bmi.n	800f10c <__swhatbuf_r+0x40>
 800f0ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0ee:	e00e      	b.n	800f10e <__swhatbuf_r+0x42>
 800f0f0:	466a      	mov	r2, sp
 800f0f2:	f000 fbb9 	bl	800f868 <_fstat_r>
 800f0f6:	2800      	cmp	r0, #0
 800f0f8:	dbf1      	blt.n	800f0de <__swhatbuf_r+0x12>
 800f0fa:	9a01      	ldr	r2, [sp, #4]
 800f0fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f100:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f104:	425a      	negs	r2, r3
 800f106:	415a      	adcs	r2, r3
 800f108:	602a      	str	r2, [r5, #0]
 800f10a:	e7ee      	b.n	800f0ea <__swhatbuf_r+0x1e>
 800f10c:	2340      	movs	r3, #64	; 0x40
 800f10e:	2000      	movs	r0, #0
 800f110:	6023      	str	r3, [r4, #0]
 800f112:	b016      	add	sp, #88	; 0x58
 800f114:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f118 <__smakebuf_r>:
 800f118:	898b      	ldrh	r3, [r1, #12]
 800f11a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f11c:	079d      	lsls	r5, r3, #30
 800f11e:	4606      	mov	r6, r0
 800f120:	460c      	mov	r4, r1
 800f122:	d507      	bpl.n	800f134 <__smakebuf_r+0x1c>
 800f124:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f128:	6023      	str	r3, [r4, #0]
 800f12a:	6123      	str	r3, [r4, #16]
 800f12c:	2301      	movs	r3, #1
 800f12e:	6163      	str	r3, [r4, #20]
 800f130:	b002      	add	sp, #8
 800f132:	bd70      	pop	{r4, r5, r6, pc}
 800f134:	ab01      	add	r3, sp, #4
 800f136:	466a      	mov	r2, sp
 800f138:	f7ff ffc8 	bl	800f0cc <__swhatbuf_r>
 800f13c:	9900      	ldr	r1, [sp, #0]
 800f13e:	4605      	mov	r5, r0
 800f140:	4630      	mov	r0, r6
 800f142:	f7ff fb85 	bl	800e850 <_malloc_r>
 800f146:	b948      	cbnz	r0, 800f15c <__smakebuf_r+0x44>
 800f148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f14c:	059a      	lsls	r2, r3, #22
 800f14e:	d4ef      	bmi.n	800f130 <__smakebuf_r+0x18>
 800f150:	f023 0303 	bic.w	r3, r3, #3
 800f154:	f043 0302 	orr.w	r3, r3, #2
 800f158:	81a3      	strh	r3, [r4, #12]
 800f15a:	e7e3      	b.n	800f124 <__smakebuf_r+0xc>
 800f15c:	4b0d      	ldr	r3, [pc, #52]	; (800f194 <__smakebuf_r+0x7c>)
 800f15e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f160:	89a3      	ldrh	r3, [r4, #12]
 800f162:	6020      	str	r0, [r4, #0]
 800f164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f168:	81a3      	strh	r3, [r4, #12]
 800f16a:	9b00      	ldr	r3, [sp, #0]
 800f16c:	6163      	str	r3, [r4, #20]
 800f16e:	9b01      	ldr	r3, [sp, #4]
 800f170:	6120      	str	r0, [r4, #16]
 800f172:	b15b      	cbz	r3, 800f18c <__smakebuf_r+0x74>
 800f174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f178:	4630      	mov	r0, r6
 800f17a:	f000 fb87 	bl	800f88c <_isatty_r>
 800f17e:	b128      	cbz	r0, 800f18c <__smakebuf_r+0x74>
 800f180:	89a3      	ldrh	r3, [r4, #12]
 800f182:	f023 0303 	bic.w	r3, r3, #3
 800f186:	f043 0301 	orr.w	r3, r3, #1
 800f18a:	81a3      	strh	r3, [r4, #12]
 800f18c:	89a0      	ldrh	r0, [r4, #12]
 800f18e:	4305      	orrs	r5, r0
 800f190:	81a5      	strh	r5, [r4, #12]
 800f192:	e7cd      	b.n	800f130 <__smakebuf_r+0x18>
 800f194:	0800e5f1 	.word	0x0800e5f1

0800f198 <malloc>:
 800f198:	4b02      	ldr	r3, [pc, #8]	; (800f1a4 <malloc+0xc>)
 800f19a:	4601      	mov	r1, r0
 800f19c:	6818      	ldr	r0, [r3, #0]
 800f19e:	f7ff bb57 	b.w	800e850 <_malloc_r>
 800f1a2:	bf00      	nop
 800f1a4:	24000018 	.word	0x24000018

0800f1a8 <__malloc_lock>:
 800f1a8:	4801      	ldr	r0, [pc, #4]	; (800f1b0 <__malloc_lock+0x8>)
 800f1aa:	f7ff bb18 	b.w	800e7de <__retarget_lock_acquire_recursive>
 800f1ae:	bf00      	nop
 800f1b0:	24005394 	.word	0x24005394

0800f1b4 <__malloc_unlock>:
 800f1b4:	4801      	ldr	r0, [pc, #4]	; (800f1bc <__malloc_unlock+0x8>)
 800f1b6:	f7ff bb13 	b.w	800e7e0 <__retarget_lock_release_recursive>
 800f1ba:	bf00      	nop
 800f1bc:	24005394 	.word	0x24005394

0800f1c0 <_free_r>:
 800f1c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1c2:	2900      	cmp	r1, #0
 800f1c4:	d044      	beq.n	800f250 <_free_r+0x90>
 800f1c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1ca:	9001      	str	r0, [sp, #4]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	f1a1 0404 	sub.w	r4, r1, #4
 800f1d2:	bfb8      	it	lt
 800f1d4:	18e4      	addlt	r4, r4, r3
 800f1d6:	f7ff ffe7 	bl	800f1a8 <__malloc_lock>
 800f1da:	4a1e      	ldr	r2, [pc, #120]	; (800f254 <_free_r+0x94>)
 800f1dc:	9801      	ldr	r0, [sp, #4]
 800f1de:	6813      	ldr	r3, [r2, #0]
 800f1e0:	b933      	cbnz	r3, 800f1f0 <_free_r+0x30>
 800f1e2:	6063      	str	r3, [r4, #4]
 800f1e4:	6014      	str	r4, [r2, #0]
 800f1e6:	b003      	add	sp, #12
 800f1e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1ec:	f7ff bfe2 	b.w	800f1b4 <__malloc_unlock>
 800f1f0:	42a3      	cmp	r3, r4
 800f1f2:	d908      	bls.n	800f206 <_free_r+0x46>
 800f1f4:	6825      	ldr	r5, [r4, #0]
 800f1f6:	1961      	adds	r1, r4, r5
 800f1f8:	428b      	cmp	r3, r1
 800f1fa:	bf01      	itttt	eq
 800f1fc:	6819      	ldreq	r1, [r3, #0]
 800f1fe:	685b      	ldreq	r3, [r3, #4]
 800f200:	1949      	addeq	r1, r1, r5
 800f202:	6021      	streq	r1, [r4, #0]
 800f204:	e7ed      	b.n	800f1e2 <_free_r+0x22>
 800f206:	461a      	mov	r2, r3
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	b10b      	cbz	r3, 800f210 <_free_r+0x50>
 800f20c:	42a3      	cmp	r3, r4
 800f20e:	d9fa      	bls.n	800f206 <_free_r+0x46>
 800f210:	6811      	ldr	r1, [r2, #0]
 800f212:	1855      	adds	r5, r2, r1
 800f214:	42a5      	cmp	r5, r4
 800f216:	d10b      	bne.n	800f230 <_free_r+0x70>
 800f218:	6824      	ldr	r4, [r4, #0]
 800f21a:	4421      	add	r1, r4
 800f21c:	1854      	adds	r4, r2, r1
 800f21e:	42a3      	cmp	r3, r4
 800f220:	6011      	str	r1, [r2, #0]
 800f222:	d1e0      	bne.n	800f1e6 <_free_r+0x26>
 800f224:	681c      	ldr	r4, [r3, #0]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	6053      	str	r3, [r2, #4]
 800f22a:	4421      	add	r1, r4
 800f22c:	6011      	str	r1, [r2, #0]
 800f22e:	e7da      	b.n	800f1e6 <_free_r+0x26>
 800f230:	d902      	bls.n	800f238 <_free_r+0x78>
 800f232:	230c      	movs	r3, #12
 800f234:	6003      	str	r3, [r0, #0]
 800f236:	e7d6      	b.n	800f1e6 <_free_r+0x26>
 800f238:	6825      	ldr	r5, [r4, #0]
 800f23a:	1961      	adds	r1, r4, r5
 800f23c:	428b      	cmp	r3, r1
 800f23e:	bf04      	itt	eq
 800f240:	6819      	ldreq	r1, [r3, #0]
 800f242:	685b      	ldreq	r3, [r3, #4]
 800f244:	6063      	str	r3, [r4, #4]
 800f246:	bf04      	itt	eq
 800f248:	1949      	addeq	r1, r1, r5
 800f24a:	6021      	streq	r1, [r4, #0]
 800f24c:	6054      	str	r4, [r2, #4]
 800f24e:	e7ca      	b.n	800f1e6 <_free_r+0x26>
 800f250:	b003      	add	sp, #12
 800f252:	bd30      	pop	{r4, r5, pc}
 800f254:	24005398 	.word	0x24005398

0800f258 <__sfputc_r>:
 800f258:	6893      	ldr	r3, [r2, #8]
 800f25a:	3b01      	subs	r3, #1
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	b410      	push	{r4}
 800f260:	6093      	str	r3, [r2, #8]
 800f262:	da08      	bge.n	800f276 <__sfputc_r+0x1e>
 800f264:	6994      	ldr	r4, [r2, #24]
 800f266:	42a3      	cmp	r3, r4
 800f268:	db01      	blt.n	800f26e <__sfputc_r+0x16>
 800f26a:	290a      	cmp	r1, #10
 800f26c:	d103      	bne.n	800f276 <__sfputc_r+0x1e>
 800f26e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f272:	f7ff bd33 	b.w	800ecdc <__swbuf_r>
 800f276:	6813      	ldr	r3, [r2, #0]
 800f278:	1c58      	adds	r0, r3, #1
 800f27a:	6010      	str	r0, [r2, #0]
 800f27c:	7019      	strb	r1, [r3, #0]
 800f27e:	4608      	mov	r0, r1
 800f280:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f284:	4770      	bx	lr

0800f286 <__sfputs_r>:
 800f286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f288:	4606      	mov	r6, r0
 800f28a:	460f      	mov	r7, r1
 800f28c:	4614      	mov	r4, r2
 800f28e:	18d5      	adds	r5, r2, r3
 800f290:	42ac      	cmp	r4, r5
 800f292:	d101      	bne.n	800f298 <__sfputs_r+0x12>
 800f294:	2000      	movs	r0, #0
 800f296:	e007      	b.n	800f2a8 <__sfputs_r+0x22>
 800f298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f29c:	463a      	mov	r2, r7
 800f29e:	4630      	mov	r0, r6
 800f2a0:	f7ff ffda 	bl	800f258 <__sfputc_r>
 800f2a4:	1c43      	adds	r3, r0, #1
 800f2a6:	d1f3      	bne.n	800f290 <__sfputs_r+0xa>
 800f2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f2ac <_vfiprintf_r>:
 800f2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2b0:	460d      	mov	r5, r1
 800f2b2:	b09d      	sub	sp, #116	; 0x74
 800f2b4:	4614      	mov	r4, r2
 800f2b6:	4698      	mov	r8, r3
 800f2b8:	4606      	mov	r6, r0
 800f2ba:	b118      	cbz	r0, 800f2c4 <_vfiprintf_r+0x18>
 800f2bc:	6983      	ldr	r3, [r0, #24]
 800f2be:	b90b      	cbnz	r3, 800f2c4 <_vfiprintf_r+0x18>
 800f2c0:	f7ff f9ca 	bl	800e658 <__sinit>
 800f2c4:	4b89      	ldr	r3, [pc, #548]	; (800f4ec <_vfiprintf_r+0x240>)
 800f2c6:	429d      	cmp	r5, r3
 800f2c8:	d11b      	bne.n	800f302 <_vfiprintf_r+0x56>
 800f2ca:	6875      	ldr	r5, [r6, #4]
 800f2cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2ce:	07d9      	lsls	r1, r3, #31
 800f2d0:	d405      	bmi.n	800f2de <_vfiprintf_r+0x32>
 800f2d2:	89ab      	ldrh	r3, [r5, #12]
 800f2d4:	059a      	lsls	r2, r3, #22
 800f2d6:	d402      	bmi.n	800f2de <_vfiprintf_r+0x32>
 800f2d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2da:	f7ff fa80 	bl	800e7de <__retarget_lock_acquire_recursive>
 800f2de:	89ab      	ldrh	r3, [r5, #12]
 800f2e0:	071b      	lsls	r3, r3, #28
 800f2e2:	d501      	bpl.n	800f2e8 <_vfiprintf_r+0x3c>
 800f2e4:	692b      	ldr	r3, [r5, #16]
 800f2e6:	b9eb      	cbnz	r3, 800f324 <_vfiprintf_r+0x78>
 800f2e8:	4629      	mov	r1, r5
 800f2ea:	4630      	mov	r0, r6
 800f2ec:	f7ff fd5a 	bl	800eda4 <__swsetup_r>
 800f2f0:	b1c0      	cbz	r0, 800f324 <_vfiprintf_r+0x78>
 800f2f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2f4:	07dc      	lsls	r4, r3, #31
 800f2f6:	d50e      	bpl.n	800f316 <_vfiprintf_r+0x6a>
 800f2f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2fc:	b01d      	add	sp, #116	; 0x74
 800f2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f302:	4b7b      	ldr	r3, [pc, #492]	; (800f4f0 <_vfiprintf_r+0x244>)
 800f304:	429d      	cmp	r5, r3
 800f306:	d101      	bne.n	800f30c <_vfiprintf_r+0x60>
 800f308:	68b5      	ldr	r5, [r6, #8]
 800f30a:	e7df      	b.n	800f2cc <_vfiprintf_r+0x20>
 800f30c:	4b79      	ldr	r3, [pc, #484]	; (800f4f4 <_vfiprintf_r+0x248>)
 800f30e:	429d      	cmp	r5, r3
 800f310:	bf08      	it	eq
 800f312:	68f5      	ldreq	r5, [r6, #12]
 800f314:	e7da      	b.n	800f2cc <_vfiprintf_r+0x20>
 800f316:	89ab      	ldrh	r3, [r5, #12]
 800f318:	0598      	lsls	r0, r3, #22
 800f31a:	d4ed      	bmi.n	800f2f8 <_vfiprintf_r+0x4c>
 800f31c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f31e:	f7ff fa5f 	bl	800e7e0 <__retarget_lock_release_recursive>
 800f322:	e7e9      	b.n	800f2f8 <_vfiprintf_r+0x4c>
 800f324:	2300      	movs	r3, #0
 800f326:	9309      	str	r3, [sp, #36]	; 0x24
 800f328:	2320      	movs	r3, #32
 800f32a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f32e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f332:	2330      	movs	r3, #48	; 0x30
 800f334:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f4f8 <_vfiprintf_r+0x24c>
 800f338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f33c:	f04f 0901 	mov.w	r9, #1
 800f340:	4623      	mov	r3, r4
 800f342:	469a      	mov	sl, r3
 800f344:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f348:	b10a      	cbz	r2, 800f34e <_vfiprintf_r+0xa2>
 800f34a:	2a25      	cmp	r2, #37	; 0x25
 800f34c:	d1f9      	bne.n	800f342 <_vfiprintf_r+0x96>
 800f34e:	ebba 0b04 	subs.w	fp, sl, r4
 800f352:	d00b      	beq.n	800f36c <_vfiprintf_r+0xc0>
 800f354:	465b      	mov	r3, fp
 800f356:	4622      	mov	r2, r4
 800f358:	4629      	mov	r1, r5
 800f35a:	4630      	mov	r0, r6
 800f35c:	f7ff ff93 	bl	800f286 <__sfputs_r>
 800f360:	3001      	adds	r0, #1
 800f362:	f000 80aa 	beq.w	800f4ba <_vfiprintf_r+0x20e>
 800f366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f368:	445a      	add	r2, fp
 800f36a:	9209      	str	r2, [sp, #36]	; 0x24
 800f36c:	f89a 3000 	ldrb.w	r3, [sl]
 800f370:	2b00      	cmp	r3, #0
 800f372:	f000 80a2 	beq.w	800f4ba <_vfiprintf_r+0x20e>
 800f376:	2300      	movs	r3, #0
 800f378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f37c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f380:	f10a 0a01 	add.w	sl, sl, #1
 800f384:	9304      	str	r3, [sp, #16]
 800f386:	9307      	str	r3, [sp, #28]
 800f388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f38c:	931a      	str	r3, [sp, #104]	; 0x68
 800f38e:	4654      	mov	r4, sl
 800f390:	2205      	movs	r2, #5
 800f392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f396:	4858      	ldr	r0, [pc, #352]	; (800f4f8 <_vfiprintf_r+0x24c>)
 800f398:	f7f0 ffa2 	bl	80002e0 <memchr>
 800f39c:	9a04      	ldr	r2, [sp, #16]
 800f39e:	b9d8      	cbnz	r0, 800f3d8 <_vfiprintf_r+0x12c>
 800f3a0:	06d1      	lsls	r1, r2, #27
 800f3a2:	bf44      	itt	mi
 800f3a4:	2320      	movmi	r3, #32
 800f3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3aa:	0713      	lsls	r3, r2, #28
 800f3ac:	bf44      	itt	mi
 800f3ae:	232b      	movmi	r3, #43	; 0x2b
 800f3b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f3b4:	f89a 3000 	ldrb.w	r3, [sl]
 800f3b8:	2b2a      	cmp	r3, #42	; 0x2a
 800f3ba:	d015      	beq.n	800f3e8 <_vfiprintf_r+0x13c>
 800f3bc:	9a07      	ldr	r2, [sp, #28]
 800f3be:	4654      	mov	r4, sl
 800f3c0:	2000      	movs	r0, #0
 800f3c2:	f04f 0c0a 	mov.w	ip, #10
 800f3c6:	4621      	mov	r1, r4
 800f3c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3cc:	3b30      	subs	r3, #48	; 0x30
 800f3ce:	2b09      	cmp	r3, #9
 800f3d0:	d94e      	bls.n	800f470 <_vfiprintf_r+0x1c4>
 800f3d2:	b1b0      	cbz	r0, 800f402 <_vfiprintf_r+0x156>
 800f3d4:	9207      	str	r2, [sp, #28]
 800f3d6:	e014      	b.n	800f402 <_vfiprintf_r+0x156>
 800f3d8:	eba0 0308 	sub.w	r3, r0, r8
 800f3dc:	fa09 f303 	lsl.w	r3, r9, r3
 800f3e0:	4313      	orrs	r3, r2
 800f3e2:	9304      	str	r3, [sp, #16]
 800f3e4:	46a2      	mov	sl, r4
 800f3e6:	e7d2      	b.n	800f38e <_vfiprintf_r+0xe2>
 800f3e8:	9b03      	ldr	r3, [sp, #12]
 800f3ea:	1d19      	adds	r1, r3, #4
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	9103      	str	r1, [sp, #12]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	bfbb      	ittet	lt
 800f3f4:	425b      	neglt	r3, r3
 800f3f6:	f042 0202 	orrlt.w	r2, r2, #2
 800f3fa:	9307      	strge	r3, [sp, #28]
 800f3fc:	9307      	strlt	r3, [sp, #28]
 800f3fe:	bfb8      	it	lt
 800f400:	9204      	strlt	r2, [sp, #16]
 800f402:	7823      	ldrb	r3, [r4, #0]
 800f404:	2b2e      	cmp	r3, #46	; 0x2e
 800f406:	d10c      	bne.n	800f422 <_vfiprintf_r+0x176>
 800f408:	7863      	ldrb	r3, [r4, #1]
 800f40a:	2b2a      	cmp	r3, #42	; 0x2a
 800f40c:	d135      	bne.n	800f47a <_vfiprintf_r+0x1ce>
 800f40e:	9b03      	ldr	r3, [sp, #12]
 800f410:	1d1a      	adds	r2, r3, #4
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	9203      	str	r2, [sp, #12]
 800f416:	2b00      	cmp	r3, #0
 800f418:	bfb8      	it	lt
 800f41a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f41e:	3402      	adds	r4, #2
 800f420:	9305      	str	r3, [sp, #20]
 800f422:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f508 <_vfiprintf_r+0x25c>
 800f426:	7821      	ldrb	r1, [r4, #0]
 800f428:	2203      	movs	r2, #3
 800f42a:	4650      	mov	r0, sl
 800f42c:	f7f0 ff58 	bl	80002e0 <memchr>
 800f430:	b140      	cbz	r0, 800f444 <_vfiprintf_r+0x198>
 800f432:	2340      	movs	r3, #64	; 0x40
 800f434:	eba0 000a 	sub.w	r0, r0, sl
 800f438:	fa03 f000 	lsl.w	r0, r3, r0
 800f43c:	9b04      	ldr	r3, [sp, #16]
 800f43e:	4303      	orrs	r3, r0
 800f440:	3401      	adds	r4, #1
 800f442:	9304      	str	r3, [sp, #16]
 800f444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f448:	482c      	ldr	r0, [pc, #176]	; (800f4fc <_vfiprintf_r+0x250>)
 800f44a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f44e:	2206      	movs	r2, #6
 800f450:	f7f0 ff46 	bl	80002e0 <memchr>
 800f454:	2800      	cmp	r0, #0
 800f456:	d03f      	beq.n	800f4d8 <_vfiprintf_r+0x22c>
 800f458:	4b29      	ldr	r3, [pc, #164]	; (800f500 <_vfiprintf_r+0x254>)
 800f45a:	bb1b      	cbnz	r3, 800f4a4 <_vfiprintf_r+0x1f8>
 800f45c:	9b03      	ldr	r3, [sp, #12]
 800f45e:	3307      	adds	r3, #7
 800f460:	f023 0307 	bic.w	r3, r3, #7
 800f464:	3308      	adds	r3, #8
 800f466:	9303      	str	r3, [sp, #12]
 800f468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f46a:	443b      	add	r3, r7
 800f46c:	9309      	str	r3, [sp, #36]	; 0x24
 800f46e:	e767      	b.n	800f340 <_vfiprintf_r+0x94>
 800f470:	fb0c 3202 	mla	r2, ip, r2, r3
 800f474:	460c      	mov	r4, r1
 800f476:	2001      	movs	r0, #1
 800f478:	e7a5      	b.n	800f3c6 <_vfiprintf_r+0x11a>
 800f47a:	2300      	movs	r3, #0
 800f47c:	3401      	adds	r4, #1
 800f47e:	9305      	str	r3, [sp, #20]
 800f480:	4619      	mov	r1, r3
 800f482:	f04f 0c0a 	mov.w	ip, #10
 800f486:	4620      	mov	r0, r4
 800f488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f48c:	3a30      	subs	r2, #48	; 0x30
 800f48e:	2a09      	cmp	r2, #9
 800f490:	d903      	bls.n	800f49a <_vfiprintf_r+0x1ee>
 800f492:	2b00      	cmp	r3, #0
 800f494:	d0c5      	beq.n	800f422 <_vfiprintf_r+0x176>
 800f496:	9105      	str	r1, [sp, #20]
 800f498:	e7c3      	b.n	800f422 <_vfiprintf_r+0x176>
 800f49a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f49e:	4604      	mov	r4, r0
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	e7f0      	b.n	800f486 <_vfiprintf_r+0x1da>
 800f4a4:	ab03      	add	r3, sp, #12
 800f4a6:	9300      	str	r3, [sp, #0]
 800f4a8:	462a      	mov	r2, r5
 800f4aa:	4b16      	ldr	r3, [pc, #88]	; (800f504 <_vfiprintf_r+0x258>)
 800f4ac:	a904      	add	r1, sp, #16
 800f4ae:	4630      	mov	r0, r6
 800f4b0:	f3af 8000 	nop.w
 800f4b4:	4607      	mov	r7, r0
 800f4b6:	1c78      	adds	r0, r7, #1
 800f4b8:	d1d6      	bne.n	800f468 <_vfiprintf_r+0x1bc>
 800f4ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4bc:	07d9      	lsls	r1, r3, #31
 800f4be:	d405      	bmi.n	800f4cc <_vfiprintf_r+0x220>
 800f4c0:	89ab      	ldrh	r3, [r5, #12]
 800f4c2:	059a      	lsls	r2, r3, #22
 800f4c4:	d402      	bmi.n	800f4cc <_vfiprintf_r+0x220>
 800f4c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4c8:	f7ff f98a 	bl	800e7e0 <__retarget_lock_release_recursive>
 800f4cc:	89ab      	ldrh	r3, [r5, #12]
 800f4ce:	065b      	lsls	r3, r3, #25
 800f4d0:	f53f af12 	bmi.w	800f2f8 <_vfiprintf_r+0x4c>
 800f4d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f4d6:	e711      	b.n	800f2fc <_vfiprintf_r+0x50>
 800f4d8:	ab03      	add	r3, sp, #12
 800f4da:	9300      	str	r3, [sp, #0]
 800f4dc:	462a      	mov	r2, r5
 800f4de:	4b09      	ldr	r3, [pc, #36]	; (800f504 <_vfiprintf_r+0x258>)
 800f4e0:	a904      	add	r1, sp, #16
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f000 f880 	bl	800f5e8 <_printf_i>
 800f4e8:	e7e4      	b.n	800f4b4 <_vfiprintf_r+0x208>
 800f4ea:	bf00      	nop
 800f4ec:	0800ff28 	.word	0x0800ff28
 800f4f0:	0800ff48 	.word	0x0800ff48
 800f4f4:	0800ff08 	.word	0x0800ff08
 800f4f8:	0801001a 	.word	0x0801001a
 800f4fc:	08010024 	.word	0x08010024
 800f500:	00000000 	.word	0x00000000
 800f504:	0800f287 	.word	0x0800f287
 800f508:	08010020 	.word	0x08010020

0800f50c <_printf_common>:
 800f50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f510:	4616      	mov	r6, r2
 800f512:	4699      	mov	r9, r3
 800f514:	688a      	ldr	r2, [r1, #8]
 800f516:	690b      	ldr	r3, [r1, #16]
 800f518:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f51c:	4293      	cmp	r3, r2
 800f51e:	bfb8      	it	lt
 800f520:	4613      	movlt	r3, r2
 800f522:	6033      	str	r3, [r6, #0]
 800f524:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f528:	4607      	mov	r7, r0
 800f52a:	460c      	mov	r4, r1
 800f52c:	b10a      	cbz	r2, 800f532 <_printf_common+0x26>
 800f52e:	3301      	adds	r3, #1
 800f530:	6033      	str	r3, [r6, #0]
 800f532:	6823      	ldr	r3, [r4, #0]
 800f534:	0699      	lsls	r1, r3, #26
 800f536:	bf42      	ittt	mi
 800f538:	6833      	ldrmi	r3, [r6, #0]
 800f53a:	3302      	addmi	r3, #2
 800f53c:	6033      	strmi	r3, [r6, #0]
 800f53e:	6825      	ldr	r5, [r4, #0]
 800f540:	f015 0506 	ands.w	r5, r5, #6
 800f544:	d106      	bne.n	800f554 <_printf_common+0x48>
 800f546:	f104 0a19 	add.w	sl, r4, #25
 800f54a:	68e3      	ldr	r3, [r4, #12]
 800f54c:	6832      	ldr	r2, [r6, #0]
 800f54e:	1a9b      	subs	r3, r3, r2
 800f550:	42ab      	cmp	r3, r5
 800f552:	dc26      	bgt.n	800f5a2 <_printf_common+0x96>
 800f554:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f558:	1e13      	subs	r3, r2, #0
 800f55a:	6822      	ldr	r2, [r4, #0]
 800f55c:	bf18      	it	ne
 800f55e:	2301      	movne	r3, #1
 800f560:	0692      	lsls	r2, r2, #26
 800f562:	d42b      	bmi.n	800f5bc <_printf_common+0xb0>
 800f564:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f568:	4649      	mov	r1, r9
 800f56a:	4638      	mov	r0, r7
 800f56c:	47c0      	blx	r8
 800f56e:	3001      	adds	r0, #1
 800f570:	d01e      	beq.n	800f5b0 <_printf_common+0xa4>
 800f572:	6823      	ldr	r3, [r4, #0]
 800f574:	68e5      	ldr	r5, [r4, #12]
 800f576:	6832      	ldr	r2, [r6, #0]
 800f578:	f003 0306 	and.w	r3, r3, #6
 800f57c:	2b04      	cmp	r3, #4
 800f57e:	bf08      	it	eq
 800f580:	1aad      	subeq	r5, r5, r2
 800f582:	68a3      	ldr	r3, [r4, #8]
 800f584:	6922      	ldr	r2, [r4, #16]
 800f586:	bf0c      	ite	eq
 800f588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f58c:	2500      	movne	r5, #0
 800f58e:	4293      	cmp	r3, r2
 800f590:	bfc4      	itt	gt
 800f592:	1a9b      	subgt	r3, r3, r2
 800f594:	18ed      	addgt	r5, r5, r3
 800f596:	2600      	movs	r6, #0
 800f598:	341a      	adds	r4, #26
 800f59a:	42b5      	cmp	r5, r6
 800f59c:	d11a      	bne.n	800f5d4 <_printf_common+0xc8>
 800f59e:	2000      	movs	r0, #0
 800f5a0:	e008      	b.n	800f5b4 <_printf_common+0xa8>
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	4652      	mov	r2, sl
 800f5a6:	4649      	mov	r1, r9
 800f5a8:	4638      	mov	r0, r7
 800f5aa:	47c0      	blx	r8
 800f5ac:	3001      	adds	r0, #1
 800f5ae:	d103      	bne.n	800f5b8 <_printf_common+0xac>
 800f5b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5b8:	3501      	adds	r5, #1
 800f5ba:	e7c6      	b.n	800f54a <_printf_common+0x3e>
 800f5bc:	18e1      	adds	r1, r4, r3
 800f5be:	1c5a      	adds	r2, r3, #1
 800f5c0:	2030      	movs	r0, #48	; 0x30
 800f5c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f5c6:	4422      	add	r2, r4
 800f5c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f5cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f5d0:	3302      	adds	r3, #2
 800f5d2:	e7c7      	b.n	800f564 <_printf_common+0x58>
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	4622      	mov	r2, r4
 800f5d8:	4649      	mov	r1, r9
 800f5da:	4638      	mov	r0, r7
 800f5dc:	47c0      	blx	r8
 800f5de:	3001      	adds	r0, #1
 800f5e0:	d0e6      	beq.n	800f5b0 <_printf_common+0xa4>
 800f5e2:	3601      	adds	r6, #1
 800f5e4:	e7d9      	b.n	800f59a <_printf_common+0x8e>
	...

0800f5e8 <_printf_i>:
 800f5e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f5ec:	7e0f      	ldrb	r7, [r1, #24]
 800f5ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f5f0:	2f78      	cmp	r7, #120	; 0x78
 800f5f2:	4691      	mov	r9, r2
 800f5f4:	4680      	mov	r8, r0
 800f5f6:	460c      	mov	r4, r1
 800f5f8:	469a      	mov	sl, r3
 800f5fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f5fe:	d807      	bhi.n	800f610 <_printf_i+0x28>
 800f600:	2f62      	cmp	r7, #98	; 0x62
 800f602:	d80a      	bhi.n	800f61a <_printf_i+0x32>
 800f604:	2f00      	cmp	r7, #0
 800f606:	f000 80d8 	beq.w	800f7ba <_printf_i+0x1d2>
 800f60a:	2f58      	cmp	r7, #88	; 0x58
 800f60c:	f000 80a3 	beq.w	800f756 <_printf_i+0x16e>
 800f610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f614:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f618:	e03a      	b.n	800f690 <_printf_i+0xa8>
 800f61a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f61e:	2b15      	cmp	r3, #21
 800f620:	d8f6      	bhi.n	800f610 <_printf_i+0x28>
 800f622:	a101      	add	r1, pc, #4	; (adr r1, 800f628 <_printf_i+0x40>)
 800f624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f628:	0800f681 	.word	0x0800f681
 800f62c:	0800f695 	.word	0x0800f695
 800f630:	0800f611 	.word	0x0800f611
 800f634:	0800f611 	.word	0x0800f611
 800f638:	0800f611 	.word	0x0800f611
 800f63c:	0800f611 	.word	0x0800f611
 800f640:	0800f695 	.word	0x0800f695
 800f644:	0800f611 	.word	0x0800f611
 800f648:	0800f611 	.word	0x0800f611
 800f64c:	0800f611 	.word	0x0800f611
 800f650:	0800f611 	.word	0x0800f611
 800f654:	0800f7a1 	.word	0x0800f7a1
 800f658:	0800f6c5 	.word	0x0800f6c5
 800f65c:	0800f783 	.word	0x0800f783
 800f660:	0800f611 	.word	0x0800f611
 800f664:	0800f611 	.word	0x0800f611
 800f668:	0800f7c3 	.word	0x0800f7c3
 800f66c:	0800f611 	.word	0x0800f611
 800f670:	0800f6c5 	.word	0x0800f6c5
 800f674:	0800f611 	.word	0x0800f611
 800f678:	0800f611 	.word	0x0800f611
 800f67c:	0800f78b 	.word	0x0800f78b
 800f680:	682b      	ldr	r3, [r5, #0]
 800f682:	1d1a      	adds	r2, r3, #4
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	602a      	str	r2, [r5, #0]
 800f688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f68c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f690:	2301      	movs	r3, #1
 800f692:	e0a3      	b.n	800f7dc <_printf_i+0x1f4>
 800f694:	6820      	ldr	r0, [r4, #0]
 800f696:	6829      	ldr	r1, [r5, #0]
 800f698:	0606      	lsls	r6, r0, #24
 800f69a:	f101 0304 	add.w	r3, r1, #4
 800f69e:	d50a      	bpl.n	800f6b6 <_printf_i+0xce>
 800f6a0:	680e      	ldr	r6, [r1, #0]
 800f6a2:	602b      	str	r3, [r5, #0]
 800f6a4:	2e00      	cmp	r6, #0
 800f6a6:	da03      	bge.n	800f6b0 <_printf_i+0xc8>
 800f6a8:	232d      	movs	r3, #45	; 0x2d
 800f6aa:	4276      	negs	r6, r6
 800f6ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6b0:	485e      	ldr	r0, [pc, #376]	; (800f82c <_printf_i+0x244>)
 800f6b2:	230a      	movs	r3, #10
 800f6b4:	e019      	b.n	800f6ea <_printf_i+0x102>
 800f6b6:	680e      	ldr	r6, [r1, #0]
 800f6b8:	602b      	str	r3, [r5, #0]
 800f6ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f6be:	bf18      	it	ne
 800f6c0:	b236      	sxthne	r6, r6
 800f6c2:	e7ef      	b.n	800f6a4 <_printf_i+0xbc>
 800f6c4:	682b      	ldr	r3, [r5, #0]
 800f6c6:	6820      	ldr	r0, [r4, #0]
 800f6c8:	1d19      	adds	r1, r3, #4
 800f6ca:	6029      	str	r1, [r5, #0]
 800f6cc:	0601      	lsls	r1, r0, #24
 800f6ce:	d501      	bpl.n	800f6d4 <_printf_i+0xec>
 800f6d0:	681e      	ldr	r6, [r3, #0]
 800f6d2:	e002      	b.n	800f6da <_printf_i+0xf2>
 800f6d4:	0646      	lsls	r6, r0, #25
 800f6d6:	d5fb      	bpl.n	800f6d0 <_printf_i+0xe8>
 800f6d8:	881e      	ldrh	r6, [r3, #0]
 800f6da:	4854      	ldr	r0, [pc, #336]	; (800f82c <_printf_i+0x244>)
 800f6dc:	2f6f      	cmp	r7, #111	; 0x6f
 800f6de:	bf0c      	ite	eq
 800f6e0:	2308      	moveq	r3, #8
 800f6e2:	230a      	movne	r3, #10
 800f6e4:	2100      	movs	r1, #0
 800f6e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f6ea:	6865      	ldr	r5, [r4, #4]
 800f6ec:	60a5      	str	r5, [r4, #8]
 800f6ee:	2d00      	cmp	r5, #0
 800f6f0:	bfa2      	ittt	ge
 800f6f2:	6821      	ldrge	r1, [r4, #0]
 800f6f4:	f021 0104 	bicge.w	r1, r1, #4
 800f6f8:	6021      	strge	r1, [r4, #0]
 800f6fa:	b90e      	cbnz	r6, 800f700 <_printf_i+0x118>
 800f6fc:	2d00      	cmp	r5, #0
 800f6fe:	d04d      	beq.n	800f79c <_printf_i+0x1b4>
 800f700:	4615      	mov	r5, r2
 800f702:	fbb6 f1f3 	udiv	r1, r6, r3
 800f706:	fb03 6711 	mls	r7, r3, r1, r6
 800f70a:	5dc7      	ldrb	r7, [r0, r7]
 800f70c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f710:	4637      	mov	r7, r6
 800f712:	42bb      	cmp	r3, r7
 800f714:	460e      	mov	r6, r1
 800f716:	d9f4      	bls.n	800f702 <_printf_i+0x11a>
 800f718:	2b08      	cmp	r3, #8
 800f71a:	d10b      	bne.n	800f734 <_printf_i+0x14c>
 800f71c:	6823      	ldr	r3, [r4, #0]
 800f71e:	07de      	lsls	r6, r3, #31
 800f720:	d508      	bpl.n	800f734 <_printf_i+0x14c>
 800f722:	6923      	ldr	r3, [r4, #16]
 800f724:	6861      	ldr	r1, [r4, #4]
 800f726:	4299      	cmp	r1, r3
 800f728:	bfde      	ittt	le
 800f72a:	2330      	movle	r3, #48	; 0x30
 800f72c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f730:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f734:	1b52      	subs	r2, r2, r5
 800f736:	6122      	str	r2, [r4, #16]
 800f738:	f8cd a000 	str.w	sl, [sp]
 800f73c:	464b      	mov	r3, r9
 800f73e:	aa03      	add	r2, sp, #12
 800f740:	4621      	mov	r1, r4
 800f742:	4640      	mov	r0, r8
 800f744:	f7ff fee2 	bl	800f50c <_printf_common>
 800f748:	3001      	adds	r0, #1
 800f74a:	d14c      	bne.n	800f7e6 <_printf_i+0x1fe>
 800f74c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f750:	b004      	add	sp, #16
 800f752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f756:	4835      	ldr	r0, [pc, #212]	; (800f82c <_printf_i+0x244>)
 800f758:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f75c:	6829      	ldr	r1, [r5, #0]
 800f75e:	6823      	ldr	r3, [r4, #0]
 800f760:	f851 6b04 	ldr.w	r6, [r1], #4
 800f764:	6029      	str	r1, [r5, #0]
 800f766:	061d      	lsls	r5, r3, #24
 800f768:	d514      	bpl.n	800f794 <_printf_i+0x1ac>
 800f76a:	07df      	lsls	r7, r3, #31
 800f76c:	bf44      	itt	mi
 800f76e:	f043 0320 	orrmi.w	r3, r3, #32
 800f772:	6023      	strmi	r3, [r4, #0]
 800f774:	b91e      	cbnz	r6, 800f77e <_printf_i+0x196>
 800f776:	6823      	ldr	r3, [r4, #0]
 800f778:	f023 0320 	bic.w	r3, r3, #32
 800f77c:	6023      	str	r3, [r4, #0]
 800f77e:	2310      	movs	r3, #16
 800f780:	e7b0      	b.n	800f6e4 <_printf_i+0xfc>
 800f782:	6823      	ldr	r3, [r4, #0]
 800f784:	f043 0320 	orr.w	r3, r3, #32
 800f788:	6023      	str	r3, [r4, #0]
 800f78a:	2378      	movs	r3, #120	; 0x78
 800f78c:	4828      	ldr	r0, [pc, #160]	; (800f830 <_printf_i+0x248>)
 800f78e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f792:	e7e3      	b.n	800f75c <_printf_i+0x174>
 800f794:	0659      	lsls	r1, r3, #25
 800f796:	bf48      	it	mi
 800f798:	b2b6      	uxthmi	r6, r6
 800f79a:	e7e6      	b.n	800f76a <_printf_i+0x182>
 800f79c:	4615      	mov	r5, r2
 800f79e:	e7bb      	b.n	800f718 <_printf_i+0x130>
 800f7a0:	682b      	ldr	r3, [r5, #0]
 800f7a2:	6826      	ldr	r6, [r4, #0]
 800f7a4:	6961      	ldr	r1, [r4, #20]
 800f7a6:	1d18      	adds	r0, r3, #4
 800f7a8:	6028      	str	r0, [r5, #0]
 800f7aa:	0635      	lsls	r5, r6, #24
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	d501      	bpl.n	800f7b4 <_printf_i+0x1cc>
 800f7b0:	6019      	str	r1, [r3, #0]
 800f7b2:	e002      	b.n	800f7ba <_printf_i+0x1d2>
 800f7b4:	0670      	lsls	r0, r6, #25
 800f7b6:	d5fb      	bpl.n	800f7b0 <_printf_i+0x1c8>
 800f7b8:	8019      	strh	r1, [r3, #0]
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	6123      	str	r3, [r4, #16]
 800f7be:	4615      	mov	r5, r2
 800f7c0:	e7ba      	b.n	800f738 <_printf_i+0x150>
 800f7c2:	682b      	ldr	r3, [r5, #0]
 800f7c4:	1d1a      	adds	r2, r3, #4
 800f7c6:	602a      	str	r2, [r5, #0]
 800f7c8:	681d      	ldr	r5, [r3, #0]
 800f7ca:	6862      	ldr	r2, [r4, #4]
 800f7cc:	2100      	movs	r1, #0
 800f7ce:	4628      	mov	r0, r5
 800f7d0:	f7f0 fd86 	bl	80002e0 <memchr>
 800f7d4:	b108      	cbz	r0, 800f7da <_printf_i+0x1f2>
 800f7d6:	1b40      	subs	r0, r0, r5
 800f7d8:	6060      	str	r0, [r4, #4]
 800f7da:	6863      	ldr	r3, [r4, #4]
 800f7dc:	6123      	str	r3, [r4, #16]
 800f7de:	2300      	movs	r3, #0
 800f7e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f7e4:	e7a8      	b.n	800f738 <_printf_i+0x150>
 800f7e6:	6923      	ldr	r3, [r4, #16]
 800f7e8:	462a      	mov	r2, r5
 800f7ea:	4649      	mov	r1, r9
 800f7ec:	4640      	mov	r0, r8
 800f7ee:	47d0      	blx	sl
 800f7f0:	3001      	adds	r0, #1
 800f7f2:	d0ab      	beq.n	800f74c <_printf_i+0x164>
 800f7f4:	6823      	ldr	r3, [r4, #0]
 800f7f6:	079b      	lsls	r3, r3, #30
 800f7f8:	d413      	bmi.n	800f822 <_printf_i+0x23a>
 800f7fa:	68e0      	ldr	r0, [r4, #12]
 800f7fc:	9b03      	ldr	r3, [sp, #12]
 800f7fe:	4298      	cmp	r0, r3
 800f800:	bfb8      	it	lt
 800f802:	4618      	movlt	r0, r3
 800f804:	e7a4      	b.n	800f750 <_printf_i+0x168>
 800f806:	2301      	movs	r3, #1
 800f808:	4632      	mov	r2, r6
 800f80a:	4649      	mov	r1, r9
 800f80c:	4640      	mov	r0, r8
 800f80e:	47d0      	blx	sl
 800f810:	3001      	adds	r0, #1
 800f812:	d09b      	beq.n	800f74c <_printf_i+0x164>
 800f814:	3501      	adds	r5, #1
 800f816:	68e3      	ldr	r3, [r4, #12]
 800f818:	9903      	ldr	r1, [sp, #12]
 800f81a:	1a5b      	subs	r3, r3, r1
 800f81c:	42ab      	cmp	r3, r5
 800f81e:	dcf2      	bgt.n	800f806 <_printf_i+0x21e>
 800f820:	e7eb      	b.n	800f7fa <_printf_i+0x212>
 800f822:	2500      	movs	r5, #0
 800f824:	f104 0619 	add.w	r6, r4, #25
 800f828:	e7f5      	b.n	800f816 <_printf_i+0x22e>
 800f82a:	bf00      	nop
 800f82c:	0801002b 	.word	0x0801002b
 800f830:	0801003c 	.word	0x0801003c

0800f834 <_read_r>:
 800f834:	b538      	push	{r3, r4, r5, lr}
 800f836:	4d07      	ldr	r5, [pc, #28]	; (800f854 <_read_r+0x20>)
 800f838:	4604      	mov	r4, r0
 800f83a:	4608      	mov	r0, r1
 800f83c:	4611      	mov	r1, r2
 800f83e:	2200      	movs	r2, #0
 800f840:	602a      	str	r2, [r5, #0]
 800f842:	461a      	mov	r2, r3
 800f844:	f7f2 f8c0 	bl	80019c8 <_read>
 800f848:	1c43      	adds	r3, r0, #1
 800f84a:	d102      	bne.n	800f852 <_read_r+0x1e>
 800f84c:	682b      	ldr	r3, [r5, #0]
 800f84e:	b103      	cbz	r3, 800f852 <_read_r+0x1e>
 800f850:	6023      	str	r3, [r4, #0]
 800f852:	bd38      	pop	{r3, r4, r5, pc}
 800f854:	240053a0 	.word	0x240053a0

0800f858 <abort>:
 800f858:	b508      	push	{r3, lr}
 800f85a:	2006      	movs	r0, #6
 800f85c:	f000 f84e 	bl	800f8fc <raise>
 800f860:	2001      	movs	r0, #1
 800f862:	f7f2 f8a7 	bl	80019b4 <_exit>
	...

0800f868 <_fstat_r>:
 800f868:	b538      	push	{r3, r4, r5, lr}
 800f86a:	4d07      	ldr	r5, [pc, #28]	; (800f888 <_fstat_r+0x20>)
 800f86c:	2300      	movs	r3, #0
 800f86e:	4604      	mov	r4, r0
 800f870:	4608      	mov	r0, r1
 800f872:	4611      	mov	r1, r2
 800f874:	602b      	str	r3, [r5, #0]
 800f876:	f7f2 f8ec 	bl	8001a52 <_fstat>
 800f87a:	1c43      	adds	r3, r0, #1
 800f87c:	d102      	bne.n	800f884 <_fstat_r+0x1c>
 800f87e:	682b      	ldr	r3, [r5, #0]
 800f880:	b103      	cbz	r3, 800f884 <_fstat_r+0x1c>
 800f882:	6023      	str	r3, [r4, #0]
 800f884:	bd38      	pop	{r3, r4, r5, pc}
 800f886:	bf00      	nop
 800f888:	240053a0 	.word	0x240053a0

0800f88c <_isatty_r>:
 800f88c:	b538      	push	{r3, r4, r5, lr}
 800f88e:	4d06      	ldr	r5, [pc, #24]	; (800f8a8 <_isatty_r+0x1c>)
 800f890:	2300      	movs	r3, #0
 800f892:	4604      	mov	r4, r0
 800f894:	4608      	mov	r0, r1
 800f896:	602b      	str	r3, [r5, #0]
 800f898:	f7f2 f8eb 	bl	8001a72 <_isatty>
 800f89c:	1c43      	adds	r3, r0, #1
 800f89e:	d102      	bne.n	800f8a6 <_isatty_r+0x1a>
 800f8a0:	682b      	ldr	r3, [r5, #0]
 800f8a2:	b103      	cbz	r3, 800f8a6 <_isatty_r+0x1a>
 800f8a4:	6023      	str	r3, [r4, #0]
 800f8a6:	bd38      	pop	{r3, r4, r5, pc}
 800f8a8:	240053a0 	.word	0x240053a0

0800f8ac <_raise_r>:
 800f8ac:	291f      	cmp	r1, #31
 800f8ae:	b538      	push	{r3, r4, r5, lr}
 800f8b0:	4604      	mov	r4, r0
 800f8b2:	460d      	mov	r5, r1
 800f8b4:	d904      	bls.n	800f8c0 <_raise_r+0x14>
 800f8b6:	2316      	movs	r3, #22
 800f8b8:	6003      	str	r3, [r0, #0]
 800f8ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8be:	bd38      	pop	{r3, r4, r5, pc}
 800f8c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f8c2:	b112      	cbz	r2, 800f8ca <_raise_r+0x1e>
 800f8c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f8c8:	b94b      	cbnz	r3, 800f8de <_raise_r+0x32>
 800f8ca:	4620      	mov	r0, r4
 800f8cc:	f000 f830 	bl	800f930 <_getpid_r>
 800f8d0:	462a      	mov	r2, r5
 800f8d2:	4601      	mov	r1, r0
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8da:	f000 b817 	b.w	800f90c <_kill_r>
 800f8de:	2b01      	cmp	r3, #1
 800f8e0:	d00a      	beq.n	800f8f8 <_raise_r+0x4c>
 800f8e2:	1c59      	adds	r1, r3, #1
 800f8e4:	d103      	bne.n	800f8ee <_raise_r+0x42>
 800f8e6:	2316      	movs	r3, #22
 800f8e8:	6003      	str	r3, [r0, #0]
 800f8ea:	2001      	movs	r0, #1
 800f8ec:	e7e7      	b.n	800f8be <_raise_r+0x12>
 800f8ee:	2400      	movs	r4, #0
 800f8f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f8f4:	4628      	mov	r0, r5
 800f8f6:	4798      	blx	r3
 800f8f8:	2000      	movs	r0, #0
 800f8fa:	e7e0      	b.n	800f8be <_raise_r+0x12>

0800f8fc <raise>:
 800f8fc:	4b02      	ldr	r3, [pc, #8]	; (800f908 <raise+0xc>)
 800f8fe:	4601      	mov	r1, r0
 800f900:	6818      	ldr	r0, [r3, #0]
 800f902:	f7ff bfd3 	b.w	800f8ac <_raise_r>
 800f906:	bf00      	nop
 800f908:	24000018 	.word	0x24000018

0800f90c <_kill_r>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	4d07      	ldr	r5, [pc, #28]	; (800f92c <_kill_r+0x20>)
 800f910:	2300      	movs	r3, #0
 800f912:	4604      	mov	r4, r0
 800f914:	4608      	mov	r0, r1
 800f916:	4611      	mov	r1, r2
 800f918:	602b      	str	r3, [r5, #0]
 800f91a:	f7f2 f83b 	bl	8001994 <_kill>
 800f91e:	1c43      	adds	r3, r0, #1
 800f920:	d102      	bne.n	800f928 <_kill_r+0x1c>
 800f922:	682b      	ldr	r3, [r5, #0]
 800f924:	b103      	cbz	r3, 800f928 <_kill_r+0x1c>
 800f926:	6023      	str	r3, [r4, #0]
 800f928:	bd38      	pop	{r3, r4, r5, pc}
 800f92a:	bf00      	nop
 800f92c:	240053a0 	.word	0x240053a0

0800f930 <_getpid_r>:
 800f930:	f7f2 b828 	b.w	8001984 <_getpid>

0800f934 <_gettimeofday>:
 800f934:	4b02      	ldr	r3, [pc, #8]	; (800f940 <_gettimeofday+0xc>)
 800f936:	2258      	movs	r2, #88	; 0x58
 800f938:	601a      	str	r2, [r3, #0]
 800f93a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f93e:	4770      	bx	lr
 800f940:	240053a0 	.word	0x240053a0

0800f944 <_init>:
 800f944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f946:	bf00      	nop
 800f948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f94a:	bc08      	pop	{r3}
 800f94c:	469e      	mov	lr, r3
 800f94e:	4770      	bx	lr

0800f950 <_fini>:
 800f950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f952:	bf00      	nop
 800f954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f956:	bc08      	pop	{r3}
 800f958:	469e      	mov	lr, r3
 800f95a:	4770      	bx	lr
